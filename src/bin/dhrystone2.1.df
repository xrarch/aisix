#include "<df>/dragonfruit.h"
#include "<ll>/rtaisix/aisix.h"

struct RecordA
	4 Ptr_Comp
	4 Discr

	2 Enum_Comp
	2 Int_Comp
	31 Str_Comp
	1 Padding
endstruct

struct RecordB
	4 Ptr_Comp
	4 Discr

	2 E_Comp_2
	31 Str_2_Comp
	3 Padding
endstruct

struct RecordC
	4 Ptr_Comp
	4 Discr

	1 Ch_1_Comp
	1 Ch_2_Comp
	34 Padding
endstruct

var Ptr_Glob 0
var Next_Ptr_Glob 0

var Int_Glob 0
var Bool_Glob 0
var Ch_1_Glob 0
var Ch_2_Glob 0

const ARRAYDIM 50
const ARRAYROW (ARRAYDIM 2 *)

buffer Arr_1_Glob ARRAYROW
buffer Arr_2_Glob (ARRAYDIM ARRAYROW * 2 *)

var Reg 1

// aisix Time syscall returns ms granularity
const HZ 1000

const Too_Small_Time (2 HZ *)

var Begin_Time 0
var End_Time 0
var User_Time 0
var Null_Time 0

var Microseconds 0
var Dhrystones_Per_Second 0

buffer InputBuffer 64

table FPNum
	"0"
	"06"
	"13"
	"19"
	"25"
	"31"
	"38"
	"44"
	"5"
	"56"
	"63"
	"69"
	"75"
	"81"
	"88"
	"94"
endtable

fn MSTime { -- mstime }
	auto sec
	auto ms

	Time ms! sec!

	sec@ 1000 * ms@ + mstime!
end

fn Main { ... -- ret }
	auto Int_1_Loc
	4 alloc Int_1_Loc!
	auto Int_2_Loc
	auto Int_3_Loc
	4 alloc Int_3_Loc!
	auto Ch_Index
	auto Enum_Loc
	4 alloc Enum_Loc!
	auto Str_1_Loc
	32 alloc Str_1_Loc!
	auto Str_2_Loc
	32 alloc Str_2_Loc!
	auto Run_Index
	1 Run_Index!
	auto Number_Of_Runs

	if (RecordA_SIZEOF RecordB_SIZEOF ~=)
		"bad!\n" Abort
	end

	if (RecordA_SIZEOF RecordC_SIZEOF ~=)
		"bad 2!\n" Abort
	end

	RecordA_SIZEOF Malloc Next_Ptr_Glob!
	RecordA_SIZEOF Malloc Ptr_Glob!

	Next_Ptr_Glob@ Ptr_Glob@ RecordA_Ptr_Comp + !
	0 Ptr_Glob@ RecordA_Discr + !
	2 Ptr_Glob@ RecordA_Enum_Comp + si
	40 Ptr_Glob@ RecordA_Int_Comp + si
	Ptr_Glob@ RecordA_Str_Comp + "DHRYSTONE PROGRAM, SOME STRING" strcpy
	Str_1_Loc@ "DHRYSTONE PROGRAM, 1'ST STRING" strcpy

	10 Arr_2_Glob 814 + si

	"\n" Printf
	"Dhrystone Benchmark, Version 2.1 (Language: Dragonfruit)\n" Printf
	"\n" Printf

	if (Reg@)
		"Program compiled with 'register' attribute\n" Printf
		"\n" Printf
	end

	"Please give the number of runs through the benchmark [200000]: " Printf

	InputBuffer 63 Gets

	if (InputBuffer gb ~~)
		200000 Number_Of_Runs!
	end else
		InputBuffer atoi Number_Of_Runs!
	end

	"\n" Printf
	Number_Of_Runs@ "Execution starts, %d runs through Dhrystone\n" Printf

	MSTime Begin_Time!

	while (Run_Index@ Number_Of_Runs@ <=)
		1 Run_Index +=
	end

	MSTime End_Time!

	End_Time@ Begin_Time@ - Null_Time!

	1 Run_Index!

	MSTime Begin_Time!

	while (Run_Index@ Number_Of_Runs@ <=)
		Proc_5
		Proc_4
		2 Int_1_Loc@!
		3 Int_2_Loc!
		Str_2_Loc@ "DHRYSTONE PROGRAM, 2'ND STRING" strcpy
		1 Enum_Loc@!

		Str_1_Loc@
		Str_2_Loc@
		Func_2 ~~ Bool_Glob!

		while (Int_1_Loc@@ Int_2_Loc@ <)
			Int_1_Loc@@ 5 * Int_2_Loc@ - Int_3_Loc@!

			Int_1_Loc@@
			Int_2_Loc@
			Int_3_Loc@
			Proc_7

			1 Int_1_Loc@ +=
		end

		Arr_1_Glob
		Arr_2_Glob
		Int_1_Loc@@
		Int_3_Loc@@
		Proc_8

		Ptr_Glob@
		Proc_1

		'A' Ch_Index!

		while (Ch_Index@ Ch_2_Glob@ <=)
			if (Ch_Index@ 'C' Func_1 Enum_Loc@@ ==)
				0
				Enum_Loc@
				Proc_6

				Str_2_Loc@ "DHRYSTONE PROGRAM, 3'RD STRING" strcpy
				Run_Index@ Int_2_Loc!
				Run_Index@ Int_Glob!
			end

			1 Ch_Index +=
		end

		Int_2_Loc@ Int_1_Loc@@ * Int_2_Loc!
		Int_2_Loc@ Int_3_Loc@@ / Int_1_Loc@!
		Int_2_Loc@ Int_3_Loc@@ - 7 * Int_1_Loc@@ - Int_2_Loc!

		Int_1_Loc@
		Proc_2

		1 Run_Index +=
	end

	MSTime End_Time!

	"Execution ends\n\n" Printf

	(*

	"Final values of the variables used in the benchmark:\n\n" Printf

	Int_Glob@
	"Int_Glob:            %d\n" Printf
	"        should be:   5\n" Printf
	Bool_Glob@
	"Bool_Glob:           %d\n" Printf
	"        should be:   1\n" Printf
	Ch_1_Glob@
	"Ch_1_Glob:           %l\n" Printf
	"        should be:   A\n" Printf
	Ch_2_Glob@
	"Ch_2_Glob:           %l\n" Printf
	"        should be:   B\n" Printf
	16 Arr_1_Glob + gi
	"Arr_1_Glob[8]:       %d\n" Printf
	"        should be:   7\n" Printf
	814 Arr_2_Glob + gi
	"Arr_2_Glob[8][7]:    %d\n" Printf
	Number_Of_Runs@ 10 +
	"        should be:   %d\n" Printf

	"Ptr_Glob->\n" Printf
	Ptr_Glob@ RecordA_Ptr_Comp + @
	"  Ptr_Comp:          %d\n" Printf
	"        should be:   (implementation-dependent)\n" Printf
	Ptr_Glob@ RecordA_Discr + @
	"  Discr:             %d\n" Printf
	"        should be:   0\n" Printf
	Ptr_Glob@ RecordA_Enum_Comp + gi
	"  Enum_Comp:         %d\n" Printf
	"        should be:   2\n" Printf
	Ptr_Glob@ RecordA_Int_Comp + gi
	"  Int_Comp:          %d\n" Printf
	"        should be:   17\n" Printf
	Ptr_Glob@ RecordA_Str_Comp +
	"  Str_Comp:          %s\n" Printf
	"        should be:   DHRYSTONE PROGRAM, SOME STRING\n" Printf

	"Next_Ptr_Glob->\n" Printf
	Next_Ptr_Glob@ RecordA_Ptr_Comp + @
	"  Ptr_Comp:          %d\n" Printf
	"        should be:   (implementation-dependent), same as above\n" Printf
	Next_Ptr_Glob@ RecordA_Discr + @
	"  Discr:             %d\n" Printf
	"        should be:   0\n" Printf
	Next_Ptr_Glob@ RecordA_Enum_Comp + gi
	"  Enum_Comp:         %d\n" Printf
	"        should be:   1\n" Printf
	Next_Ptr_Glob@ RecordA_Int_Comp + gi
	"  Int_Comp:          %d\n" Printf
	"        should be:   18\n" Printf
	Next_Ptr_Glob@ RecordA_Str_Comp +
	"  Str_Comp:          %s\n" Printf
	"        should be:   DHRYSTONE PROGRAM, SOME STRING\n" Printf

	Int_1_Loc@@
	"Int_1_Loc:           %d\n" Printf
	"        should be:   5\n" Printf
	Int_2_Loc@
	"Int_2_Loc:           %d\n" Printf
	"        should be:   13\n" Printf
	Int_3_Loc@@
	"Int_3_Loc:           %d\n" Printf
	"        should be:   7\n" Printf
	Enum_Loc@@
	"Enum_Loc:            %d\n" Printf
	"        should be:   1\n" Printf
	Str_1_Loc@
	"Str_1_Loc:           %s\n" Printf
	"        should be:   DHRYSTONE PROGRAM, 1'ST STRING\n" Printf
	Str_2_Loc@
	"Str_2_Loc:           %s\n" Printf
	"        should be:   DHRYSTONE PROGRAM, 2'ND STRING\n" Printf
	"\n" Printf

	*)

	End_Time@ Begin_Time@ - Null_Time@ - User_Time!

	if (User_Time@ Too_Small_Time <)
		"Measured time too small to obtain meaningful results\n" Printf
		"Please increase number of runs\n" Printf
		"\n" Printf
	end else
		User_Time@ 1000 * Number_Of_Runs@ / Microseconds!
		Number_Of_Runs@ HZ * User_Time@ / Dhrystones_Per_Second!

		"Microseconds for one run through Dhrystone: " Printf
		Microseconds@ "%d\n" Printf
		"Dhrystones per Second:                      " Printf

		auto vaxmips
		Dhrystones_Per_Second@ 4 << 1757 / vaxmips!

		[vaxmips@ 15 &]FPNum@ vaxmips@ 4 >> Dhrystones_Per_Second@ "%d (~%d.%s VAX MIPS)\n\n" Printf
	end

	0 ret!
end

fn Proc_1 { Ptr_Val_Par -- }
	auto Next_Record
	Ptr_Val_Par@ RecordA_Ptr_Comp + @ Next_Record!

	Next_Record@ // dest
	Ptr_Glob@ // src
	RecordA_SIZEOF // size
	memcpy

	5 Ptr_Val_Par@ RecordA_Int_Comp + si

	Ptr_Val_Par@ RecordA_Int_Comp + gi Next_Record@ RecordA_Int_Comp + si

	Ptr_Val_Par@ RecordA_Ptr_Comp + @ Next_Record@ RecordA_Ptr_Comp + !

	Next_Record@ RecordA_Ptr_Comp +
	Proc_3

	if (Next_Record@ RecordA_Discr + @ 0 ==)
		6 Next_Record@ RecordA_Int_Comp + si
		
		Ptr_Val_Par@ RecordA_Enum_Comp + gi
		Next_Record@ RecordA_Enum_Comp +
		Proc_6

		Ptr_Glob@ RecordA_Ptr_Comp + @ Next_Record@ RecordA_Ptr_Comp + !

		Next_Record@ RecordA_Int_Comp + gi
		10
		Next_Record@ RecordA_Int_Comp +
		Proc_7
	end else
		Ptr_Val_Par@ // dest
		Ptr_Val_Par@ RecordA_Ptr_Comp + @ // src
		RecordA_SIZEOF // size
		memcpy
	end
end

fn Proc_2 { Int_Par_Ref -- }
	auto Int_Loc
	auto Enum_Loc

	Int_Par_Ref@ gi 10 + Int_Loc!

	while (1)
		if (Ch_1_Glob@ 'A' ==)
			1 Int_Loc -=
			Int_Loc@ Int_Glob@ - Int_Par_Ref@ si
			0 Enum_Loc!
		end

		if (Enum_Loc@ 0 ==)
			break
		end
	end
end

fn Proc_3 { Ptr_Ref_Par -- }
	if (Ptr_Glob@)
		Ptr_Glob@ RecordA_Ptr_Comp + @ Ptr_Ref_Par@!
	end

	10
	Int_Glob@
	Ptr_Glob@ RecordA_Int_Comp +
	Proc_7
end

fn Proc_4 { -- }
	auto Bool_Loc

	Ch_1_Glob@ 'A' == Bool_Loc!
	Bool_Loc@ Bool_Glob |=
	'B' Ch_2_Glob!
end

fn Proc_5 { -- }
	'A' Ch_1_Glob!
	0 Bool_Glob!
end

fn Proc_6 { Enum_Val_Par Enum_Ref_Par -- }
	Enum_Val_Par@ Enum_Ref_Par@ si

	if (Enum_Val_Par@ Func_3 ~~)
		3 Enum_Ref_Par@ si
	end

	if (Enum_Val_Par@ 0 ==)
		0 Enum_Ref_Par@ si
	end elseif (Enum_Val_Par@ 1 ==)
		if (Int_Glob@ 100 >)
			0 Enum_Ref_Par@ si
		end else
			3 Enum_Ref_Par@ si
		end
	end elseif (Enum_Val_Par@ 2 ==)
		1 Enum_Ref_Par@ si
	end elseif (Enum_Val_Par@ 4 ==)
		2 Enum_Ref_Par@ si
	end
end

fn Proc_7 { Int_1_Par_Val Int_2_Par_Val Int_Par_Ref -- }
	auto Int_Loc

	Int_1_Par_Val@ 2 + Int_Loc!
	Int_2_Par_Val@ Int_Loc@ + Int_Par_Ref@ si
end

fn Proc_8 { Arr_1_Par_Ref Arr_2_Par_Ref Int_1_Par_Val Int_2_Par_Val -- }
	auto Int_Index
	auto Int_Loc

	Int_1_Par_Val@ 5 + Int_Loc!
	Int_2_Par_Val@ Arr_1_Par_Ref@ Int_Loc@ 1 << + si

	Arr_1_Par_Ref@ Int_Loc@ 1 << + gi Arr_1_Par_Ref@ Int_Loc@ 1 + 1 << + si
	Int_Loc@ Arr_1_Par_Ref@ Int_Loc@ 30 + 1 << + si

	Int_Loc@ Int_Index!

	auto ru1
	Int_Loc@ 1 + ru1!

	while (Int_Index@ ru1@ <=)
		Int_Loc@ Int_Loc@ ARRAYROW * Int_Index@ 1 << + Arr_2_Par_Ref@ + si

		1 Int_Index +=
	end

	auto ru2
	Int_Loc@ ARRAYROW * Int_Loc@ 1 - 1 << + Arr_2_Par_Ref@ + ru2!

	ru2@ gi 1 + ru2@ si

	Arr_1_Par_Ref@ Int_Loc@ 1 << + gi
	Int_Loc@ 20 + ARRAYROW * Int_Loc@ 1 << + Arr_2_Par_Ref@ + si

	5 Int_Glob!
end

fn Func_1 { Ch_1_Par_Val Ch_2_Par_Val -- Enum_Res }
	auto Ch_1_Loc
	auto Ch_2_Loc

	Ch_1_Par_Val@ Ch_1_Loc!
	Ch_1_Loc@ Ch_2_Loc!

	if (Ch_2_Loc@ Ch_2_Par_Val@ ~=)
		0 Enum_Res!
		return
	end else
		Ch_1_Loc@ Ch_1_Glob!
		1 Enum_Res!
		return
	end
end

fn Func_2 { Str_1_Par_Ref Str_2_Par_Ref -- Bool_Res }
	auto Int_Loc
	auto Ch_Loc

	2 Int_Loc!

	while (Int_Loc@ 2 <=)
		if (Str_1_Par_Ref@ Int_Loc@ + gb
			Str_2_Par_Ref@ Int_Loc@ 1 + + gb
			Func_1 0 ==)

			'A' Ch_Loc!
			1 Int_Loc +=
		end
	end

	if (Ch_Loc@ 'W' >=)
		if (Ch_Loc@ 'Z' <)
			7 Int_Loc!
		end
	end

	if (Ch_Loc@ 'R' ==)
		1 Bool_Res!
		return
	end else
		// XXX this is a hack that should be equivalent
		// to the original dhrystone. this is needed because
		// our strcmp doesn't return a numerical value!

		Str_1_Par_Ref@ Str_2_Par_Ref@ strcmp 0 > drop

		0 Bool_Res!
		return
	end
end

fn Func_3 { Enum_Par_Val -- Bool_Res }
	auto Enum_Loc
	Enum_Par_Val@ Enum_Loc!

	Enum_Loc@ 2 == Bool_Res!
end