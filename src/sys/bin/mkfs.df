#include "<df>/dragonfruit.h"
#include "<ll>/rtaisix/aisix.h"

struct Superblock
	4 Version
	4 Magic
	4 Dirty
	4 ReservedBlocks
	4 FATStart
	4 FATSize
	4 IStart
	4 ICount
	4 DataStart
	4 DataSize
	4 VolSize
endstruct

struct DirEnt
	4 INum
	60 name
endstruct

struct INode
	4 type
	4 permissions
	4 uid
	4 iparent
	4 timestamp
	4 startblock
	4 reserved2
	4 bytesize
endstruct

const BLOCKSZ 4096
const RESERVEDBLOCKS 15
const AFSMAGIC 0xAFBBAFBB
const AFSVER 0x6

const ROOTINO 1

var FSBlocks 0
var FATSize 0
var FATStart 0
var IStart 0
var ICount 0
var ISize 0
var DataStart 0

buffer ZeroBlock BLOCKSZ

buffer BlockBuf BLOCKSZ

buffer Prompt 256

var VFlag 0
var YFlag 0
var SFlag 0

fn private Usage { -- }
	"usage: mkfs -svy dev\n" STDERR FPrintf
end

fn Main { ... -- ret }
	auto i
	1 i!

	auto chk
	2 chk!

	auto flags
	0 flags!

	if (argc@ 2 >=)
		auto sw
		[1]argv@ sw!

		if (sw@ gb '-' ==)
			2 i!
			3 chk!

			1 sw +=

			while (sw@ gb 0 ~=)
				if (sw@ gb 'v' ==)
					1 VFlag!
				end elseif (sw@ gb 'y' ==)
					1 YFlag!
				end elseif (sw@ gb 's' ==)
					1 SFlag!
				end else
					Usage
					1 Exit
				end

				1 sw +=
			end
		end
	end

	if (argc@ chk@ ~=)
		Usage
		1 ret!
		return
	end

	auto rp
	[i@]argv@ RealPath rp!

	if (rp@ iserr)
		rp@ abs rp!
		[rp@]ErrorNames@ "mkfs: %s\n" Abort
	end

	auto fd
	rp@ GetParams fd!

	if (YFlag@ ~~)
		"mkfs: write [y]? " Printf
		Prompt 255 Gets

		if (Prompt gb 'n' ==)
			0 Exit
		end
	end

	fd@ WriteSuper
	fd@ InitializeFAT
	fd@ InitializeIList
	fd@ InitializeRootINode

	Sync ret!
	if (ret@ iserr)
		ret@ abs ret!
		[ret@]ErrorNames@ "mkfs: couldn't sync: %s\n" Abort
	end

	if (SFlag@ ~~)
		"mkfs: enjoy your new filesystem :)\n" Printf
	end
end

buffer StatB Stat_SIZEOF

fn GetParams { path -- fd }
	path@ O_RW Open fd!

	if (fd@ iserr)
		fd@ abs fd!
		[fd@]ErrorNames@ path@ "mkfs: %s: %s\n" Abort
	end

	auto ok
	StatB fd@ FStat ok!

	if (ok@ iserr)
		ok@ abs ok!
		[ok@]ErrorNames@ path@ "mkfs: couldn't stat %s: %s\n" Abort
	end

	auto sz
	StatB Stat_Size + @ sz!

	if (sz@ BLOCKSZ %)
		BLOCKSZ path@ "mkfs: %s: size is not multiple of block size (%d)\n" Abort
	end

	sz@ BLOCKSZ / FSBlocks!

	FSBlocks@ 4 * BLOCKSZ / FATSize!

	if (FSBlocks@ 4 * BLOCKSZ %)
		1 FATSize +=
	end

	RESERVEDBLOCKS 1 + FATStart!

	FATStart@ FATSize@ + IStart!
	FSBlocks@ 4 / ICount!
	ICount@ INode_SIZEOF * BLOCKSZ / ISize!

	if (ICount@ INode_SIZEOF * BLOCKSZ %)
		1 ISize +=
	end

	IStart@ ISize@ + DataStart!

	if (VFlag@ SFlag@ ~~ ||)
		path@ "mkfs: params for %s:\n" Printf
		BLOCKSZ    "  blocksz    %d bytes\n" Printf
		FSBlocks@  "  blocks     %d blocks\n" Printf
		FATSize@   "  fatsize    %d blocks\n" Printf
		ICount@    "  icount     %d inodes\n" Printf
		ISize@     "  isize      %d blocks\n" Printf
		FATStart@  "  fatstart   block %d\n" Printf
		IStart@    "  istart     block %d\n" Printf
		DataStart@ "  datastart  block %d\n" Printf
	end
end

buffer SuperblockB BLOCKSZ

fn WriteSuper { fd -- }
	if (VFlag@)
		"mkfs: writing superblock\n" Printf
	end

	AFSMAGIC SuperblockB Superblock_Magic + !
	AFSVER SuperblockB Superblock_Version + !
	RESERVEDBLOCKS SuperblockB Superblock_ReservedBlocks + !
	FATStart@ SuperblockB Superblock_FATStart + !
	FATSize@ SuperblockB Superblock_FATSize + !
	IStart@ SuperblockB Superblock_IStart + !
	ICount@ SuperblockB Superblock_ICount + !
	DataStart@ SuperblockB Superblock_DataStart + !
	FSBlocks@ SuperblockB Superblock_DataSize + !
	FSBlocks@ SuperblockB Superblock_VolSize + !

	0 SuperblockB fd@ bwrite
end

fn InitializeFAT { fd -- }
	if (VFlag@)
		"mkfs: initializing FAT\n" Printf
	end

	auto cantalloc
	1 RESERVEDBLOCKS + FATSize@ + ISize@ + cantalloc!

	auto buf
	BlockBuf buf!

	buf@ BLOCKSZ 0 memset

	auto i
	0 i!

	while (i@ cantalloc@ <)
		0xFFFFFFFF buf@ i@ 4 * + !

		1 i +=
	end

	FATStart@ buf@ fd@ bwrite

	FATStart@ 1 + i!

	auto max
	i@ FATSize@ + max!

	ZeroBlock buf!

	while (i@ max@ <)
		i@ buf@ fd@ bwrite

		1 i +=
	end
end

fn InitializeIList { fd -- }
	if (VFlag@)
		"mkfs: initializing ilist\n" Printf
	end

	auto buf
	ZeroBlock buf!

	auto i
	IStart@ i!

	auto max
	i@ ISize@ + max!

	while (i@ max@ <)
		i@ buf@ fd@ bwrite

		1 i +=
	end
end

fn InitializeRootINode { fd -- }
	if (VFlag@)
		"mkfs: initializing root inode\n" Printf
	end

	auto buf
	BlockBuf buf!

	buf@ BLOCKSZ 0 memset

	auto root
	buf@ ROOTINO INode_SIZEOF * + root!

	0 root@ INode_uid + !
	493 root@ INode_permissions + !
	ROOTINO root@ INode_iparent + !
	2 root@ INode_type + !
	0 root@ INode_bytesize + !
	0xFFFFFFFF root@ INode_startblock + !
	0 root@ INode_timestamp + !

	IStart@ buf@ fd@ bwrite
end

fn bread { blockno buf fd -- }
	auto ok
	fd@ blockno@ BLOCKSZ * SEEK_SET Seek ok!

	if (ok@ iserr)
		ok@ abs ok!
		[ok@]ErrorNames@ blockno@ "mkfs: couldn't seek to block %d: %s\n" Abort
	end

	buf@ BLOCKSZ fd@ Read ok!

	if (ok@ iserr)
		ok@ abs ok!
		[ok@]ErrorNames@ blockno@ "mkfs: couldn't read block %d: %s\n" Abort
	end
end

fn bwrite { blockno buf fd -- }
	auto ok
	fd@ blockno@ BLOCKSZ * SEEK_SET Seek ok!

	if (ok@ iserr)
		ok@ abs ok!
		[ok@]ErrorNames@ blockno@ "mkfs: couldn't seek to block %d: %s\n" Abort
	end

	buf@ BLOCKSZ fd@ Write ok!

	if (ok@ iserr)
		ok@ abs ok!
		[ok@]ErrorNames@ blockno@ "mkfs: couldn't write block %d: %s\n" Abort
	end
end