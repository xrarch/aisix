#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"
#include "<inc>/context.h"

var InterruptGet 0
public InterruptGet

var InterruptAck 0
public InterruptAck

var SavedEV 0

asm "

limn2500_exception:
	mtcr k0, t0 ; save t0 to free it as scratch
	mtcr k1, t1 ; ditto with t1
	mtcr k2, sp ; save stack pointer
	mtcr k3, sp ; save trace link

	mfcr t0, ers

	andi t1, t0, RS_USER
	beq  t1, zero, .waskernel

	la   t1, CurrentThread
	mov  t1, long [t1]

	mov  sp, long [t1 + Thread_KernelStackTop] ; load new sp from the current thread's structure

	mtcr k3, zero ; this was a usermode sp, zero out the trace link

.waskernel:
	subi sp, sp, Context_SIZEOF

	mfcr t1, k2
	mov  long [sp + Context_sp],  t1
	mov  long [sp + Context_ers], t0 ; ers was still in t0

	mfcr t0, epc
	mov  long [sp + Context_epc], t0

	mfcr t1, k0
	mov  long [sp + Context_t0],  t1

	mfcr t1, k1
	mov  long [sp + Context_t1],  t1

	mov  long [sp + Context_t2],  t2
	mov  long [sp + Context_t3],  t3
	mov  long [sp + Context_t4],  t4
	mov  long [sp + Context_t5],  t5
	mov  long [sp + Context_a0],  a0
	mov  long [sp + Context_a1],  a1
	mov  long [sp + Context_a2],  a2
	mov  long [sp + Context_a3],  a3
	mov  long [sp + Context_s0],  s0
	mov  long [sp + Context_s1],  s1
	mov  long [sp + Context_s2],  s2
	mov  long [sp + Context_s3],  s3
	mov  long [sp + Context_s4],  s4
	mov  long [sp + Context_s5],  s5
	mov  long [sp + Context_s6],  s6
	mov  long [sp + Context_s7],  s7
	mov  long [sp + Context_s8],  s8
	mov  long [sp + Context_s9],  s9
	mov  long [sp + Context_s10], s10
	mov  long [sp + Context_s11], s11
	mov  long [sp + Context_s12], s12
	mov  long [sp + Context_s13], s13
	mov  long [sp + Context_s14], s14
	mov  long [sp + Context_s15], s15
	mov  long [sp + Context_s16], s16
	mov  long [sp + Context_s17], s17
	mov  long [sp + Context_s18], s18
	mov  long [sp + Context_lr],  lr

	mfcr a1, ecause
	mfcr a2, ebadaddr
	mov  a0, sp

	; make a fake stackframe for this exception so that the
	; debugger can trace thru it as if it were a function call
	mfcr t1, k3            ; get trace link saved earlier
	subi sp, sp, 8
	mov  long [sp], t1
	mov  long [sp + 4], t0 ; t0 still has epc

	jal  Exception         ; call Exception, to handle the exception

	mtcr ebadaddr, zero

	; unwind fake stackframe
	addi sp, sp, 8

forkret:

	mov  t0, long [sp + Context_ers]
	mtcr ers, t0

	mov  t0, long [sp + Context_epc]
	mtcr epc, t0

	mov t0,  long [sp + Context_t0]
	mov t1,  long [sp + Context_t1]
	mov t2,  long [sp + Context_t2]
	mov t3,  long [sp + Context_t3]
	mov t4,  long [sp + Context_t4]
	mov t5,  long [sp + Context_t5]
	mov a0,  long [sp + Context_a0]
	mov a1,  long [sp + Context_a1]
	mov a2,  long [sp + Context_a2]
	mov a3,  long [sp + Context_a3]
	mov s0,  long [sp + Context_s0]
	mov s1,  long [sp + Context_s1]
	mov s2,  long [sp + Context_s2]
	mov s3,  long [sp + Context_s3]
	mov s4,  long [sp + Context_s4]
	mov s5,  long [sp + Context_s5]
	mov s6,  long [sp + Context_s6]
	mov s7,  long [sp + Context_s7]
	mov s8,  long [sp + Context_s8]
	mov s9,  long [sp + Context_s9]
	mov s10, long [sp + Context_s10]
	mov s11, long [sp + Context_s11]
	mov s12, long [sp + Context_s12]
	mov s13, long [sp + Context_s13]
	mov s14, long [sp + Context_s14]
	mov s15, long [sp + Context_s15]
	mov s16, long [sp + Context_s16]
	mov s17, long [sp + Context_s17]
	mov s18, long [sp + Context_s18]

	mov  lr, long [sp + Context_lr]
	mov  sp, long [sp + Context_sp]

	rfe

; old new -- 
cswtch:
.global cswtch
	subi sp, sp, Context_SIZEOF

	mov  long [sp + Context_sp],  sp
	mov  long [sp + Context_epc], lr
	mov  long [sp + Context_lr],  lr
	mfcr t0, rs
	mov  long [sp + Context_ers], t0

	mov  long [sp + Context_s0],  s0
	mov  long [sp + Context_s1],  s1
	mov  long [sp + Context_s2],  s2
	mov  long [sp + Context_s3],  s3
	mov  long [sp + Context_s4],  s4
	mov  long [sp + Context_s5],  s5
	mov  long [sp + Context_s6],  s6
	mov  long [sp + Context_s7],  s7
	mov  long [sp + Context_s8],  s8
	mov  long [sp + Context_s9],  s9
	mov  long [sp + Context_s10], s10
	mov  long [sp + Context_s11], s11
	mov  long [sp + Context_s12], s12
	mov  long [sp + Context_s13], s13
	mov  long [sp + Context_s14], s14
	mov  long [sp + Context_s15], s15
	mov  long [sp + Context_s16], s16
	mov  long [sp + Context_s17], s17
	mov  long [sp + Context_s18], s18

	mov  long [a1], sp
	mov  sp, a0

	mov  s0,  long [sp + Context_s0]
	mov  s1,  long [sp + Context_s1]
	mov  s2,  long [sp + Context_s2]
	mov  s3,  long [sp + Context_s3]
	mov  s4,  long [sp + Context_s4]
	mov  s5,  long [sp + Context_s5]
	mov  s6,  long [sp + Context_s6]
	mov  s7,  long [sp + Context_s7]
	mov  s8,  long [sp + Context_s8]
	mov  s9,  long [sp + Context_s9]
	mov  s10, long [sp + Context_s10]
	mov  s11, long [sp + Context_s11]
	mov  s12, long [sp + Context_s12]
	mov  s13, long [sp + Context_s13]
	mov  s14, long [sp + Context_s14]
	mov  s15, long [sp + Context_s15]
	mov  s16, long [sp + Context_s16]
	mov  s17, long [sp + Context_s17]
	mov  s18, long [sp + Context_s18]

	mov  lr, long [sp + Context_lr]
	mov  t0, long [sp + Context_ers]
	mtcr rs, t0

	addi sp, sp, Context_SIZEOF

	ret

CPUHlt:
.global CPUHlt
	hlt
	ret

CPUIdle:
.global CPUIdle 
	mfcr t0, rs
	ori  t1, t0, RS_INT
	mtcr rs, t1
	hlt
	mtcr rs, t0
	ret

ExceptionInit:
.global ExceptionInit
	la   t0, limn2500_exception
	mtcr evec, t0
	ret

SaveEV:
.global SaveEV
	mfcr t0, evec
	la   t1, SavedEV
	mov  long [t1], t0

	mfcr t0, rs
	ori  t0, t0, RS_LEGAC
	mtcr rs, t0

	ret

RestoreEV:
.global RestoreEV
	la   t1, SavedEV
	mov  t1, long [t1]
	mtcr evec, t1

	mtcr rs, zero

	ret

SwitchK3:
.global SwitchK3
	mtcr pgtb, a0
	mtcr asid, a1
	ret

FlushTLB:
.global FlushTLB
	ftlb a0, a1
	ret

InterruptEnable:
.global InterruptEnable
	mfcr t0, rs
	ori  t0, t0, RS_INT
	mtcr rs, t0
	ret

InterruptDisable:
.global InterruptDisable
	mfcr a0, rs
	andi t0, a0, RS_INTOFFMASK
	mtcr rs, t0
	ret

InterruptRestore:
.global InterruptRestore
	mtcr rs, a0
	ret


CPUKThreadEntry:
.global CPUKThreadEntry
	subi sp, sp, 4
	mov  long [sp], 0 ; put a zero link so that stacktraces dont freak out here

	mfcr t0, rs
	ori  t0, t0, RS_KTHREAD
	mtcr rs, t0

	jalr zero, s0, 0

	la   a1, pstring
	li   a0, 0
	jal  Panic

pstring:
	.ds \"kernel thread dropped off\\n\\0\"

.align 4

"

extern PlatformSetTimer { -- } (* it's actually in this file but this makes the df compiler happy *)

extern forkret { -- }

extern KDebug { -- }

externptr TraceTF

const EXCINTERRUPT 1
const EXCSYS       2
const EXCBREAK     6

externptr DebugNextSched

var ScaryTrapFrame 0
public ScaryTrapFrame

var Reschedule 0
public Reschedule

externptr InScheduler

fn Exception { badaddr ecause tf -- }
	auto wth
	CurrentThread@ 0 ~= wth!

	if (wth@)
		tf@ CurrentThread@ Thread_TrapFrame + !
	end else
		tf@ ScaryTrapFrame!
	end

	auto mode
	tf@ Context_ers + @ RS_USER & mode!

	if (ecause@ EXCINTERRUPT ==)
		if (InterruptGet@ 0 ==)
			"no interrupt controller\n" Panic
		end

		auto int
		while (InterruptGet@ InterruptGetter dup int!)
			int@ Interrupt
		end

		if (Reschedule@)
			0 Reschedule!

			if (InScheduler@ ~~)
				Yield
			end
		end
	end elseif (ecause@ EXCSYS ==)
		auto sys
		tf@ Context_a0 + @ sys!

		if (sys@ SYSMAX >)
			-EBADSYS tf@ Context_a0 + !
		end else
			[sys@]Syscalls@ sys!

			if (sys@ 0 ==)
				-EBADSYS tf@ Context_a0 + !
			end else
				1 CurrentThread@ Thread_InKernel + !

				if (LockMe ~~)
					InterruptEnable

					tf@ sys@ Syscall tf@ Context_a0 + !

					0 InterruptRestore

					UnlockMe
				end

				0 CurrentThread@ Thread_InKernel + !
			end
		end
	end elseif (ecause@ EXCBREAK ==)
		if (wth@)
			CurrentThread@ Thread_TID + @ "breakpoint (tid: %d)\n" Printf
		end

		1 DebugNextSched!
	end else
		if (mode@ 0 ==)
			// kernel mode exception, panic

			1 TraceTF!
			badaddr@ tf@ Context_ers + @ tf@ Context_epc + @ ecause@
			"unexpected kernel mode exception!\necause=%x\nepc=%x\ners=%x\nbadaddr=%x\n" Panic
		end else
			// user mode exception, terminate the thread

			CurrentThread@ Thread_Process + @ Process_Name + "killed: %s\n" Printf

			badaddr@ tf@ Context_ers + @ tf@ Context_epc + @ ecause@
			" %9xECAUSE\n %9xEPC\n %9xERS\n %9xBADADDR\n" Printf
		end

		139 CurrentThread@ Thread_Process + @ Process_ReturnValue + !

		1 CurrentThread@ Thread_Killed + !
	end

	if (wth@)
		if (mode@ CurrentThread@ Thread_Killed + @ &&)
			ThreadExit
		end
	end
end

extern CPUKThreadEntry { -- }

fn CPUContextPrepare { a0 a1 entry stack kern -- ctx }
	stack@ Context_SIZEOF - ctx!

	ctx@ Context_SIZEOF 0 memset

	if (kern@)
		entry@ ctx@ Context_s0 + !
		pointerof CPUKThreadEntry ctx@ Context_lr + !
	end else
		entry@ ctx@ Context_epc + !

		RS_USER RS_INT | RS_MMU | RS_LEGAC | ctx@ Context_ers + !

		a0@ ctx@ Context_a0 + !
		a1@ ctx@ Context_a1 + !

		Context_SIZEOF ctx -=

		ctx@ Context_SIZEOF 0 memset

		pointerof forkret ctx@ Context_lr + !
	end
end

table ContextNames
	"t0"    "t1"
	"t2"    "t3"
	"t4"    "t5"
	"a0"    "a1"
	"a2"    "a3"
	"s0"    "s1"
	"s2"    "s3"
	"s4"    "s5"
	"s6"    "s7"
	"s8"    "s9"
	"s10"   "s11"
	"s12"   "s13"
	"s14"   "s15"
	"s16"   "s17"
	"s18"

	"sp"
	"ers"
	"epc"
	"lr"
endtable

public ContextNames