#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/limnmmu.h"

extern AISIX { ksz args -- ret }

const CompatibleFirmware 30505

var SavedEV 0
var SavedTLBV 0

asm "

SaveEV:
	la t0, SavedEV
	s.l t0, zero, ev
	la t0, SavedTLBV
	s.l t0, zero, tlbv
	ret

RestoreEV:
	la t0, SavedEV
	l.l ev, t0, zero
	la t0, SavedTLBV
	l.l tlbv, t0, zero
	ret

"

extern SaveEV { -- }
extern RestoreEV { -- }

fn Main { ksz args -- ret }
	0 ret!

	InterruptDisable drop

	(* manually clear BSS section, because fileloader only loads flat files,
	and while the linker lets us spit out flat binary files with the BSS section
	trimmed out rather than converted to a massive block of zeroes on disk,
	it does mean we have to clear it ourselves. *)

	auto ptr
	pointerof _bss ptr!

	ptr@
	pointerof _bss_end ptr@ -
	0 memset

	SaveEV

	pointerof PlatformGetc pointerof PlatformPutc KLogAttach

	"\ninitial kernel log to a3x console\n" Printf

	auto vnum
	"/" a3xDeviceSelect
		"versionNum" a3xDGetProperty vnum!
	a3xDeviceExit

	if (vnum@ CompatibleFirmware <)
		"aisix requires newer firmware!\n" Printf
		0 a3xReturn
	end

	"/platform" a3xDeviceSelect
		"model" a3xDGetProperty MachineType!
	a3xDeviceExit

	"/cpu" a3xDeviceSelect
		"model" a3xDGetProperty MachineCPU!
	a3xDeviceExit

	"/bus" a3xDeviceSelect
		"model" a3xDGetProperty MachineBus!
	a3xDeviceExit

	auto tram

	"/memory" a3xDeviceSelect
		"totalRAM" a3xDGetProperty tram!
	a3xDeviceExit

	pointerof _bss_end MachineRAMBase!

	if (MachineRAMBase@ 0xFFF & 0 ~=)
		MachineRAMBase@ 0xFFFFF000 & 0x1000 + MachineRAMBase!
	end

	tram@ MachineRAMBase@ - MachineRAMSize!

	ksz@ args@ AISIX ret!
end

externptr LIMN2KTimeslice

extern DeviceTree { -- }
extern ExceptionInit { -- }
fn PlatformInit { -- }
	ExceptionInit

	auto ts
	"ts" ArgsValue ts!

	if (ts@)
		ts@ atoi LIMN2KTimeslice!
		ts@ Free
	end

	DeviceTree

	FlushTLBAll

	'\n' Putc
end

fn PlatformPutc { c -- }
	auto rs
	InterruptDisable rs!

	c@ a3xPutc

	rs@ InterruptRestore
end

fn PlatformGetc { -- c }
	auto rs
	InterruptDisable rs!

	a3xGetc c!

	rs@ InterruptRestore
end

fn PlatformAlertUser { early -- }
	pointerof PlatformGetc pointerof PlatformPutc KLogAttach

	auto gc
	"/gconsole" a3xDevTreeWalk gc!

	if (gc@ early@ ~~ &&)
		gc@ a3xDeviceSelectNode
			"nodraw" a3xDCallMethod drop drop drop drop
		a3xDeviceExit
	end

	a3xConsoleUserOut
end

fn PlatformUnalertUser { -- }
	(* nothing i guess *)
end

asm "

SwitchK3:
	mov k3, a0
	mov asid, a1
	ret

FlushTLB:
	ftlb a0, a1
	ret

"

extern FlushTLB { vpn asid -- }

fn FlushASID { asid -- }
	-1 asid@ FlushTLB
end

fn FlushTLBAll { -- }
	-1 -1 FlushTLB
end

fn PlatformInvalidatePage { vpn proc -- }
	auto asid
	proc@ Process_PID + @ 4095 & asid!

	vpn@ asid@ FlushTLB
end

extern SwitchK3 { asid newk3 -- }

table UsedASIDs[4096]

fn PlatformProcessExit { proc -- }
	if (proc@ Process_PQ + @)
		auto asid
		proc@ Process_PID + @ 4095 & asid!

		1 [asid@]UsedASIDs -=

		asid@ FlushASID
	end
end

fn PlatformSwitchSeg { proc -- }
	auto asid
	proc@ Process_PID + @ 4095 & asid!

	if (proc@ Process_PQ + @ ~~)
		1 proc@ Process_PQ + !

		1 [asid@]UsedASIDs +=
	end

	if ([asid@]UsedASIDs@ 1 >)
		asid@ FlushASID
	end

	asid@
	proc@ Process_Pagemap + @ Pagemap_Data + @
	SwitchK3
end

fn PlatformPrePanic { -- }
end

fn PlatformPanic { -- }
	-1 FWReturn
end

fn FWReturn { ret -- }
	RestoreEV
	ret@ a3xReturn
end

fn PlatformHalt { haltmode -- }
	InterruptDisable drop

	if (haltmode@ HALT_SHUTDOWN ==)
		1024 FWReturn
	end

	if (haltmode@ HALT_REBOOT ==)
		"/cpu" a3xDeviceSelect
			"reset" a3xDCallMethod drop drop drop drop
		a3xDeviceExit
	end
end