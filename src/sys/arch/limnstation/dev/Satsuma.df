#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/dev/citron.h"

(* TODO pull DKS port information from device tree *)

const DKSCmdPort 0x19
const DKSPortA 0x1A
const DKSPortB 0x1B

const DKSCmdSelect 0x1
const DKSCmdRead 0x2
const DKSCmdWrite 0x3
const DKSCmdInfo 0x4
const DKSCmdPoll 0x5
const DKSCmdIntr 0x6
const DKSCmdIntrOff 0x7

const DKSBuffer 0xF8020000

table DKSDriver
	"dks"
	DEV_BLOCK
	pointerof DKSOpen
	pointerof DKSClose
	pointerof DKSIOCtl
	pointerof DKSRead
	pointerof DKSWrite
	pointerof DKSSysctl
endtable

struct DKS
	4 Exists
	4 Unit
	4 Offset
	4 Blocks
	4 Name
endstruct

var DKSLastUnit 0

const DKSMAX 32

const DKSNAMEMAX 32

buffer DKSTable (DKSMAX DKS_SIZEOF *)

var FoundBus 0

fn DrvDKSFoundBus { node -- }
	if (FoundBus@)
		"DrvDKSFoundBus\n" Panic
	end

	auto intn
	"interrupt#" a3xDGetProperty intn!

	intn@ "irq:%d" BootPrintf

	pointerof DKSIntr intn@ InterruptRegister

	DKSIntrEnable

	1 FoundBus!
end

fn DrvDKSFoundNode { node -- }
	if (DKSLastUnit@ DKSMAX >=)
		return
	end

	auto dks
	DKSLastUnit@ DKS_SIZEOF * DKSTable + dks!

	auto unit

	1 dks@ DKS_Exists + !
	"satsuma,id" a3xDGetProperty unit!
	unit@ dks@ DKS_Unit + !
	"blocks" a3xDGetProperty dks@ DKS_Blocks + !

	auto offset
	"offset" a3xDGetProperty offset!
	offset@ dks@ DKS_Offset + !

	DKSLastUnit@ "aisix,unit" a3xDSetProperty

	auto name
	DKSNAMEMAX Calloc name!

	name@ dks@ DKS_Name + !

	name@ "dks" strcpy

	(* there can only be 8 disks, and only 8 partitions per disk, so assume itoa always puts 1 digit *)

	unit@ name@ 3 + itoa

	auto part
	0 part!

	if ("deviceType" a3xDGetProperty "disk-logical" strcmp)
		(* is a partition *)
		's' name@ 4 + sb
		"partition#" a3xDGetProperty name@ 5 + itoa

		1 part!
	end

	name@ "%s" BootPrintf

	auto devn

	OWNER_W OWNER_R | GROUP_W | GROUP_R | 0 0 name@ DKSDriver DKSLastUnit@ DeviceRegister devn!

	dks@ DKS_Blocks + @ 4096 * devn@ Device_Size + !

	devn@ "aisix,dev" a3xDSetProperty

	if (part@)
		a3xDeviceParent
			"aisix,dev" a3xDGetProperty part!
		a3xDeviceExit

		if (part@ ~~)
			"no aisix,dev property in parent node\n" Panic
		end

		offset@ devn@ Device_Offset + !
		part@ devn@ Device_RawDev + !
	end

	auto w

	a3xMyDevice@ a3xDeviceSelectNode
		"bootAlias" a3xDGetProperty w!
	a3xDeviceExit

	if (w@ ~~)
		a3xMyDevice@ w!
	end

	if (node@ w@ ==)
		" (boot device)" BootPrintf
		devn@ RootDevice!
	end

	1 DKSLastUnit +=
end

fn DrvDKSLogicalFoundNode { node -- }
	node@ DrvDKSFoundNode
end

fn (DevSysctl) DKSSysctl { op1 op2 op3 op4 unit -- ok }
	-ENOTBLK ok!
end

fn (DevOpen) DKSOpen { unit -- ok }
	0 ok!
end

fn (DevClose) DKSClose { unit -- ok }
	0 ok!
end

fn (DevIOCtl) DKSIOCtl { pm op1 op2 op3 op4 unit -- ok }
	-ENOTBLK ok!
end

buffer DKSLock Mutex_SIZEOF

fn private LockDKS { -- killed }
	DKSLock LockMutex killed!
end

fn private UnlockDKS { -- }
	DKSLock UnlockMutex
end

buffer DKSQueue EventQueue_SIZEOF

fn (BlockDevRead) DKSRead { buf len unit seek -- blocks }
	if (unit@ DKSMAX >=)
		unit@ "dksread: unit too big %x\n" Panic
	end

	auto dks
	unit@ DKS_SIZEOF * DKSTable + dks!

	if (dks@ DKS_Exists + @ ~~)
		unit@ "dksread: no such drive %x\n" Panic
	end

	if (seek@ dks@ DKS_Blocks + @ >=)
		dks@ DKS_Blocks + @ seek@ dks@ DKS_Name + @ "%s: seek=%d > size=%d\n" Panic
		-EIO blocks!
		return
	end

	dks@ DKS_Offset + @ seek +=

	auto i
	0 i!

	while (i@ len@ <)
		if (LockDKS)
			-EINTR blocks!
			return
		end

		(* it's possible for the transfer completion interrupt to occur before we even wait [COUGH emulation COUGH COUGH]
		so disable interrupts here just in case *)

		auto rs
		InterruptDisable rs!

		dks@ DKS_Unit + @ DKSPortA DCitronOutl
		DKSCmdSelect DKSCmdPort DCitronCommand

		seek@ DKSPortA DCitronOutl
		DKSCmdRead DKSCmdPort DCitronCommandASync

		DKSQueue WaitQueueUninterruptible

		rs@ InterruptRestore

		buf@ DKSBuffer 4096 memcpy

		UnlockDKS

		1 i +=
	end

	len@ blocks!
end

fn (BlockDevWrite) DKSWrite { buf len unit seek -- blocks }
	if (unit@ DKSMAX >=)
		unit@ "dkswrite: unit too big %x\n" Panic
	end

	auto dks
	unit@ DKS_SIZEOF * DKSTable + dks!

	if (dks@ DKS_Exists + @ ~~)
		unit@ "dkswrite: no such drive %x\n" Panic
	end
	
	if (seek@ dks@ DKS_Blocks + @ >=)
		dks@ DKS_Blocks + @ seek@ dks@ DKS_Name + @ "%s: seek=%d > size=%d\n" Panic
		-EIO blocks!
		return
	end

	dks@ DKS_Offset + @ seek +=

	auto i
	0 i!

	while (i@ len@ <)
		if (LockDKS)
			-EINTR blocks!
			return
		end

		DKSBuffer buf@ 4096 memcpy

		(* it's possible for the transfer completion interrupt to occur before we even wait [COUGH emulation COUGH COUGH]
		so disable interrupts here just in case *)

		auto rs
		InterruptDisable rs!

		dks@ DKS_Unit + @ DKSPortA DCitronOutl
		DKSCmdSelect DKSCmdPort DCitronCommand

		seek@ DKSPortA DCitronOutl
		DKSCmdWrite DKSCmdPort DCitronCommandASync

		if (DKSQueue WaitQueue)
			rs@ InterruptRestore
			UnlockDKS
			-EINTR blocks!
			return
		end

		rs@ InterruptRestore

		UnlockDKS

		1 i +=
	end

	len@ blocks!
end

const DKSBlockTransfer 0x0

fn (IntHandler) DKSIntr { intn -- }
	DKSIntrDisable

	intn@ InterruptAck@ InterruptAcker

	auto details
	auto event
	DKSInfo details! event!

	if (event@ DKSBlockTransfer ==)
		DKSQueue WakeQueue
	end

	DKSIntrEnable
end

fn DKSInfo { -- event details }
	auto rs
	InterruptDisable rs!

	DKSCmdInfo DKSCmdPort DCitronCommand
	DKSPortA DCitronInl event!
	DKSPortB DCitronInl details!

	rs@ InterruptRestore
end

fn DKSIntrEnable { -- }
	auto rs
	InterruptDisable rs!

	DKSCmdIntr DKSCmdPort DCitronCommand

	rs@ InterruptRestore
end

fn DKSIntrDisable { -- }
	auto rs
	InterruptDisable rs!

	DKSCmdIntrOff DKSCmdPort DCitronCommand

	rs@ InterruptRestore
end