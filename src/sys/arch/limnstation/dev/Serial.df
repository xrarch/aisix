#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/dev/citron.h"

struct SerialPort
	4 TTY
	4 DataPort
	4 CmdPort
	4 IBuffer
	4 OBuffer
endstruct

const SERIALMAX 2

buffer SerialPorts (SERIALMAX SerialPort_SIZEOF *)

const SerialCmdWrite 1
const SerialCmdRead 2
const SerialCmdIntr 3
const SerialCmdIntrOff 4

table SerialDriver
	"serial"
	DEV_CHAR
	pointerof SerialOpen
	pointerof SerialClose
	pointerof SerialIoctl
	pointerof SerialRead
	pointerof SerialWrite
	pointerof SerialSysctl
endtable

var SerialFound 0

var SerialKDebug 0

var SerialPortAIntr 0
var SerialPortBIntr 0

var SerialTTY 0
public SerialTTY

fn DrvSerialFoundNode { node -- }
	if (SerialFound@ SERIALMAX >=)
		return
	end

	auto sport
	SerialFound@ SerialPort_SIZEOF * SerialPorts + sport!

	auto cmd
	auto data

	"serial,cmdPort" a3xDGetProperty cmd!

	if (cmd@ 0 ==)
		return
	end

	"serial,dataPort" a3xDGetProperty data!

	cmd@ sport@ SerialPort_CmdPort + !
	data@ sport@ SerialPort_DataPort + !

	auto ibuffer
	1024 AllocIOBuf ibuffer!

	if (ibuffer@ iserr)
		"couldn't allocate SerialIBuffer\n" Panic
	end

	1 ibuffer@ IOBuffer_Overwrite + !

	auto obuffer
	0 AllocIOBuf obuffer!

	if (obuffer@ iserr)
		"couldn't allocate SerialOBuffer\n" Panic
	end

	sport@ obuffer@ IOBuffer_DevData0 + !

	pointerof SerialWriter obuffer@ IOBuffer_WriterF + !

	auto intn
	"interrupt#" a3xDGetProperty intn!

	if (SerialFound@ 0 ==)
		intn@ SerialPortAIntr!
	end elseif (SerialFound@ 1 ==)
		intn@ SerialPortBIntr!
	end

	intn@ data@ cmd@ "citron:%x,%x irq:%d" BootPrintf

	pointerof SerialIntr intn@ InterruptRegister

	auto tty
	ibuffer@ obuffer@ AllocTTY tty!

	if (tty@ iserr)
		tty@ abs tty!
		[tty@]ErrorNames@ "couldn't allocate SerialTTY: %s\n" Panic
	end

	if (node@ "/serial" a3xDevTreeWalk ==)
		tty@ SerialTTY!
	end

	tty@ sport@ SerialPort_TTY + !
	obuffer@ sport@ SerialPort_OBuffer + !
	ibuffer@ sport@ SerialPort_IBuffer + !

	sport@ SerialIntrEnable

	auto lilbuf
	16 Calloc lilbuf!

	if (lilbuf@ iserr)
		"couldn't allocate serial port name\n" Panic
	end

	lilbuf@ "ttyS" strcpy
	SerialFound@ lilbuf@ 4 + itoa

	auto sdev
	OWNER_W OWNER_R | GROUP_W | GROUP_R | 0 0 lilbuf@ SerialDriver SerialFound@ DeviceRegister sdev!

	tty@ sdev@ Device_TTY + !

	1 SerialFound +=
end

fn (DevSysctl) SerialSysctl { op1 op2 op3 op4 unit -- ok }
	-ENOTBLK ok!
end

fn (DevOpen) SerialOpen { unit -- ok }
	0 ok!
end

fn (DevClose) SerialClose { unit -- ok }
	0 ok!
end

fn (DevIoctl) SerialIoctl { op1 op2 op3 op4 unit -- ok }
	0 ok!
end

fn (DevRead) SerialRead { pm buf len unit seek -- bytes }
	pm@ buf@ len@
	unit@ SerialPort_SIZEOF * SerialPorts + SerialPort_TTY + @
	TTYRead bytes!
end

fn (DevWrite) SerialWrite { pm buf len unit seek -- bytes }
	pm@ buf@ len@
	unit@ SerialPort_SIZEOF * SerialPorts + SerialPort_TTY + @
	TTYWrite bytes!
end

fn (IntHandler) SerialIntr { intn -- }
	auto sport
	if (intn@ SerialPortAIntr@ ==)
		SerialPorts sport!
	end elseif (intn@ SerialPortBIntr@ ==)
		SerialPorts SerialPort_SIZEOF + sport!
	end else
		"SerialIntr\n" Panic
	end

	sport@ SerialIntrDisable

	intn@ InterruptAck@ InterruptAcker

	auto c

	auto ib
	auto ob

	sport@ SerialPort_IBuffer + @ ib!

	auto inputf
	ib@ IOBuffer_InputF + @ inputf!

	while (sport@ SerialGetc dup c! -1 ~=)
		if (inputf@)
			c@ ib@ inputf@ IOCharInput
		end else
			c@ ib@ 0 IOBufPutc drop
			c@ sport@ SerialPutc
		end
	end

	sport@ SerialIntrEnable
end

fn SerialIntrEnable { s -- }
	auto rs
	InterruptDisable rs!

	SerialCmdIntr s@ SerialPort_CmdPort + @ DCitronCommand

	rs@ InterruptRestore
end

fn SerialIntrDisable { s -- }
	auto rs
	InterruptDisable rs!

	SerialCmdIntrOff s@ SerialPort_CmdPort + @ DCitronCommand

	rs@ InterruptRestore
end

fn (IOBufWriter) SerialWriter { c buf -- written }
	c@ buf@ IOBuffer_DevData0 + @ SerialPutc

	1 written!
end

fn SerialPutc { c s -- }
	auto rs
	InterruptDisable rs!

	c@ s@ SerialPort_DataPort + @ DCitronOutb
	SerialCmdWrite s@ SerialPort_CmdPort + @ DCitronCommand

	rs@ InterruptRestore
end

fn SerialGetc { s -- c }
	auto rs
	InterruptDisable rs!

	SerialCmdRead s@ SerialPort_CmdPort + @ DCitronCommand
	s@ SerialPort_DataPort + @ DCitronIni c!

	rs@ InterruptRestore

	if (c@ 0xFFFF ==)
		ERR c! return
	end
end