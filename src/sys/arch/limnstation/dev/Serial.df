#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/dev/citron.h"

var SerialDataPort 0
var SerialCmdPort 0

const SerialCmdWrite 1
const SerialCmdRead 2
const SerialCmdIntr 3
const SerialCmdIntrOff 4

table SerialDriver
	"serial"
	DEV_CHAR
	pointerof SerialOpen
	pointerof SerialClose
	pointerof SerialIoctl
	pointerof SerialRead
	pointerof SerialWrite
	pointerof SerialSysctl
endtable

var SerialFound 0

var SerialKDebug 0

var SerialIBuffer 0

var SerialOBuffer 0

var SerialTTY 0
public SerialTTY

fn DrvSerialFoundNode { node -- }
	if (SerialFound@)
		return
	end

	1 SerialFound!

	"serial,cmdPort" a3xDGetProperty SerialCmdPort!

	if (SerialCmdPort@ 0 ==)
		return
	end

	"serial,dataPort" a3xDGetProperty SerialDataPort!

	1024 AllocIOBuf SerialIBuffer!

	if (SerialIBuffer@ iserr)
		"couldn't allocate SerialIBuffer\n" Panic
	end

	1 SerialIBuffer@ IOBuffer_Overwrite + !

	0 AllocIOBuf SerialOBuffer!

	if (SerialOBuffer@ iserr)
		"couldn't allocate SerialOBuffer\n" Panic
	end

	pointerof SerialWriter SerialOBuffer@ IOBuffer_WriterF + !

	auto intn
	"interrupt#" a3xDGetProperty intn!

	intn@ SerialDataPort@ SerialCmdPort@ "citron:%x,%x irq:%d" BootPrintf

	pointerof SerialIntr intn@ InterruptRegister

	SerialIBuffer@ SerialOBuffer@ AllocTTY SerialTTY!

	if (SerialTTY@ iserr)
		SerialTTY@ abs SerialTTY!
		[SerialTTY@]ErrorNames@ "couldn't allocate SerialTTY: %s\n" Panic
	end

	SerialIntrEnable

	auto sdev
	OWNER_W OWNER_R | GROUP_W | GROUP_R | 0 0 "ttyS0" SerialDriver 0 DeviceRegister sdev!

	SerialTTY@ sdev@ Device_TTY + !
end

fn (DevSysctl) SerialSysctl { op1 op2 op3 op4 unit -- ok }
	-ENOTBLK ok!
end

fn (DevOpen) SerialOpen { unit -- ok }
	0 ok!
end

fn (DevClose) SerialClose { unit -- ok }
	0 ok!
end

fn (DevIoctl) SerialIoctl { op1 op2 op3 op4 unit -- ok }
	0 ok!
end

fn (DevRead) SerialRead { pm buf len unit seek -- bytes }
	pm@ buf@ len@ SerialTTY@ TTYRead bytes!
end

fn (DevWrite) SerialWrite { pm buf len unit seek -- bytes }
	pm@ buf@ len@ SerialTTY@ TTYWrite bytes!
end

extern KDebug { -- }

fn (IntHandler) SerialIntr { intn -- }
	SerialIntrDisable

	intn@ InterruptAck@ InterruptAcker

	auto c

	if (SerialKDebug@)
		while (SerialGetc dup c! -1 ~=) end

		auto sw
		KLogWrite@ sw!

		auto sr
		KLogRead@ sr!

		pointerof SerialGetc pointerof SerialPutc KLogAttach

		KDebug

		sr@ sw@ KLogAttach
	end else
		auto inputf
		SerialIBuffer@ IOBuffer_InputF + @ inputf!

		while (SerialGetc dup c! -1 ~=)
			if (inputf@)
				c@ SerialIBuffer@ inputf@ IOCharInput
			end else
				c@ SerialIBuffer@ 0 IOBufPutc drop
				c@ SerialPutc
			end
		end
	end

	SerialIntrEnable
end

fn SerialIntrEnable { -- }
	auto rs
	InterruptDisable rs!

	SerialCmdIntr SerialCmdPort@ DCitronCommand

	rs@ InterruptRestore
end

fn SerialIntrDisable { -- }
	auto rs
	InterruptDisable rs!

	SerialCmdIntrOff SerialCmdPort@ DCitronCommand

	rs@ InterruptRestore
end

fn (IOBufWriter) SerialWriter { c buf -- written }
	c@ SerialPutc

	1 written!
end

fn SerialPutc { c -- }
	auto rs
	InterruptDisable rs!

	c@ SerialDataPort@ DCitronOutb
	SerialCmdWrite SerialCmdPort@ DCitronCommand

	rs@ InterruptRestore
end

fn SerialGetc { -- c }
	auto rs
	InterruptDisable rs!

	SerialCmdRead SerialCmdPort@ DCitronCommand
	SerialDataPort@ DCitronIni c!

	rs@ InterruptRestore

	if (c@ 0xFFFF ==)
		ERR c! return
	end
end