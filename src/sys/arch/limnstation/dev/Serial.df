#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/dev/citron.h"

var SerialDataPort 0
var SerialCmdPort 0

const SerialCmdWrite 1
const SerialCmdRead 2
const SerialCmdIntr 3
const SerialCmdIntrOff 4

externconst InterruptGet
externconst InterruptAck

table SerialDriver
	"serial"
	DEV_BLOCK
	pointerof SerialOpen
	pointerof SerialClose
	pointerof SerialIoctl
	pointerof SerialRead
	pointerof SerialWrite
	0
endtable

var SerialFound 0

var SerialKDebug 0

procedure DrvSerialFoundNode { node -- }
	if (SerialFound@)
		return
	end

	1 SerialFound!

	"serial,cmdPort" a3xDGetProperty SerialCmdPort!

	if (SerialCmdPort@ 0 ==)
		return
	end

	"serial,dataPort" a3xDGetProperty SerialDataPort!

	auto intn
	"interrupt#" a3xDGetProperty intn!

	intn@ SerialDataPort@ SerialCmdPort@ "  serial @ citron:%x,%x int:%d\n" Printf

	if ("-serialdebug" ArgsCheck)
		1 SerialKDebug!
		"  -serialdebug present\n" Printf
	end

	pointerof SerialIntr intn@ InterruptRegister

	SerialIntrEnable

	"serial0" SerialDriver 0 DeviceRegister drop
	"serial1" SerialDriver 0 DeviceRegister drop
	"serial2" SerialDriver 0 DeviceRegister drop
end

procedure SerialOpen { unit -- ok }
	0 ok!
end

procedure SerialClose { unit -- ok }
	0 ok!
end

procedure SerialIoctl { op1 op2 op3 op4 unit -- ok }
	0 ok!
end

procedure SerialRead { buf len unit seek -- ok }
	0 ok!
end

procedure SerialWrite { buf len unit seek -- ok }
	0 ok!
end

extern KDebug

externconst KLogWrite
externconst KLogRead

procedure SerialIntr { intn -- }
	SerialIntrDisable

	intn@ InterruptAck@ Call

	auto c

	if (SerialKDebug@)
		while (SerialGetc dup c! -1 ~=) end

		auto sw
		KLogWrite@ sw!

		auto sr
		KLogRead@ sr!

		pointerof SerialGetc pointerof SerialPutc KLogAttach

		KDebug

		sr@ sw@ KLogAttach
	end else
		while (SerialGetc dup c! -1 ~=)
			c@ SerialPutc
		end
	end

	SerialIntrEnable
end

procedure SerialIntrEnable { -- }
	auto rs
	InterruptDisable rs!

	SerialCmdIntr SerialCmdPort@ DCitronCommand

	rs@ InterruptRestore
end

procedure SerialIntrDisable { -- }
	auto rs
	InterruptDisable rs!

	SerialCmdIntrOff SerialCmdPort@ DCitronCommand

	rs@ InterruptRestore
end

procedure SerialPutc { c -- }
	auto rs
	InterruptDisable rs!

	c@ SerialDataPort@ DCitronOutb
	SerialCmdWrite SerialCmdPort@ DCitronCommand

	rs@ InterruptRestore
end

procedure SerialGetc { -- c }
	auto rs
	InterruptDisable rs!

	SerialCmdRead SerialCmdPort@ DCitronCommand
	SerialDataPort@ DCitronIni c!

	rs@ InterruptRestore

	if (c@ 0xFFFF ==)
		ERR c! return
	end
end