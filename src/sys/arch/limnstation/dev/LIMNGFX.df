#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/dev/dma.h"

const LGRegScreen 0x3000
const LGRegVRAM   0x3004
const LGRegRead   0x3008
const LGRegWrite  0x300C
const LGRegCursor 0x3010
const LGRegStatus 0x3014
const LGRegMode   0x3018
const LGRegCause  0x301C
const LGRegCurPos 0x3020

fn DrvLGFXFoundNode { node -- }
	auto gfx
	AllocGFX gfx!

	if (gfx@ iserr)
		return
	end

	"framebuffer" a3xDGetProperty gfx@ GFX_FBAddr + !

	auto w
	"width" a3xDGetProperty w!
	w@ gfx@ GFX_Width + !

	auto h
	"height" a3xDGetProperty h!
	h@ gfx@ GFX_Height + !

	gfx@ GFX_FBAddr + @ h@ w@ "%dx%d @ 0x%x" Printf

	w@ h@ * 2 * gfx@ GFX_FBSize + !

	"depth" a3xDGetProperty gfx@ GFX_Depth + !
	"vram" a3xDGetProperty gfx@ GFX_VRAM + !
	"vramSize" a3xDGetProperty gfx@ GFX_VRAMSize + !

	auto sbe
	"address" a3xDGetProperty sbe!
	sbe@ gfx@ GFX_UData + !

	pointerof LGFXRectangle gfx@ GFX_Rect + !
	pointerof LGFXBlitBits gfx@ GFX_BlitBits + !
	pointerof LGFXBlit gfx@ GFX_Blit + !
	pointerof LGFXScroll gfx@ GFX_Scroll + !
	pointerof LGFXInvert gfx@ GFX_Invert + !
	pointerof LGFXVBlit gfx@ GFX_VBlit + !

	0 sbe@ LGRegWrite + !
	0 sbe@ LGRegRead + !

	gfx@ GFXRegister
end

const LGCommandOffset 0x2000

const TEXSRCDIM   0x01
const TEXSRCVRAM  0x02
const TEXDESTDIM  0x03
const TEXDESTVRAM 0x04
const ORSRCDIM    0x05
const ORSRCPOS    0x06
const ORDESTDIM   0x07
const ORDESTPOS   0x08
const OPRECT      0x09
const BLITRECT    0x0A
const DRAWLINE    0x0E

const MODECOPY    0x100
const MODEOR      0x200
const MODEXOR     0x300
const MODEAND     0x400
const MODENOR     0x500
const MODENAND    0x600
const MODEXNOR    0x700

const MODECOMB50  0xB00
const MODECOMB20  0xC00
const MODECOMB40  0xD00
const MODECOMB60  0xE00
const MODECOMB80  0xF00

var WriteDelta 0

fn private Go { gfx -- }
	auto sbe
	gfx@ GFX_UData + @ sbe!

	auto readp
	sbe@ LGRegRead + readp!

	auto writep
	sbe@ LGRegWrite + writep!

	WriteDelta@ writep@ +=

	while (readp@@ writep@@ ~=) end

	0 WriteDelta!
end

fn private Put { cmd gfx -- }
	auto sbe
	gfx@ GFX_UData + @ sbe!

	auto readp
	sbe@ LGRegRead + readp!

	auto writep
	sbe@ LGRegWrite + writep!

	auto nwp
	writep@@ WriteDelta@ + nwp!

	(* wait until command buf isn't full *)
	while (nwp@ 64 % readp@@ 64 % 1 - ==) end

	cmd@ nwp@ 64 % 4 * sbe@ LGCommandOffset + + !

	1 WriteDelta +=
end

fn (GFXInvert) LGFXInvert { x y w h gfx -- }
	gfx@ GFX_Height + @ 20 << gfx@ GFX_Width + @ 8 << | TEXDESTDIM | gfx@ Put
	0 TEXDESTVRAM | gfx@ Put
	h@ 20 << w@ 8 << | ORDESTDIM | gfx@ Put
	y@ 20 << x@ 8 << | ORDESTPOS | gfx@ Put
	0x7FFF 12 << MODEXOR | OPRECT | gfx@ Put

	gfx@ Go
end

fn (GFXRect) LGFXRectangle { x y w h color gfx -- }
	gfx@ GFX_Height + @ 20 << gfx@ GFX_Width + @ 8 << | TEXDESTDIM | gfx@ Put
	0 TEXDESTVRAM | gfx@ Put
	h@ 20 << w@ 8 << | ORDESTDIM | gfx@ Put
	y@ 20 << x@ 8 << | ORDESTPOS | gfx@ Put
	color@ 12 << MODECOPY | OPRECT | gfx@ Put

	gfx@ Go
end


fn (GFXBlitBits) LGFXBlitBits { bpr fg bg bitd ptr x y w h gfx -- }
	auto dest
	y@ gfx@ GFX_Width + @ * 2 * x@ 2 * + gfx@ GFX_FBAddr + @ + dest!

	ptr@
	dest@
	1
	2 w@ *
	bpr@
	0
	h@
	gfx@ GFX_Width + @ w@ - 2 *
	0
	bitd@
	bg@
	fg@
	DMABitTransfer
end

fn (GFXBlit) LGFXBlit { x y w h ptr gfx -- }
	auto dest
	y@ gfx@ GFX_Width + @ * 2 * x@ 2 * + gfx@ GFX_FBAddr + @ + dest!

	ptr@ dest@
	1 2 w@ *
	w@ 2 *
	0
	h@
	gfx@ GFX_Width + @ w@ - 2 *
	0
	DMATransfer
end

fn LGFXVBlit { xd yd wd hd xs ys ws hs gfx -- }
	auto w
	gfx@ GFX_Width + @ w!

	auto h
	gfx@ GFX_Height + @ h!

	h@ 20 << w@ 8 << | TEXDESTDIM | gfx@ Put
	h@ 20 << w@ 8 << | TEXSRCDIM | gfx@ Put
	0 TEXDESTVRAM | gfx@ Put
	0 TEXSRCVRAM  | gfx@ Put
	hd@ 20 << wd@ 8 << | ORDESTDIM | gfx@ Put
	yd@ 20 << xd@ 8 << | ORDESTPOS | gfx@ Put
	hs@ 20 << ws@ 8 << | ORSRCDIM  | gfx@ Put
	ys@ 20 << xs@ 8 << | ORSRCPOS  | gfx@ Put
	MODECOPY BLITRECT | gfx@ Put

	gfx@ Go
end

fn (GFXScroll) LGFXScroll { x y w h color rows gfx -- }
	x@ y@ w@ h@ rows@ - 
	x@ y@ rows@ + w@ h@ rows@ -
	gfx@ LGFXVBlit

	if (color@ -1 ~=)
		x@ y@ h@ rows@ - + w@ rows@ color@ gfx@ LGFXRectangle
	end
end