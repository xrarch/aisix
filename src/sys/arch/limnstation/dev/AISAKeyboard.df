#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/dev/amtsu.h"

table KeybdDriver
	"kbd"
	DEV_CHAR
	pointerof KeybdOpen
	pointerof KeybdClose
	pointerof KeybdIOCtl
	pointerof KeybdRead
	pointerof KeybdWrite
	pointerof KeybdSysctl
endtable

var KeybdFound 0

var KeybdIBufferRaw 0

var KeybdIBuffer 0

var KeybdOBuffer 0

var KeybdID 0

fn DrvKeybdFoundNode { node -- }
	if (KeybdFound@)
		return
	end

	1 KeybdFound!

	1024 AllocIOBuf KeybdIBufferRaw!

	if (KeybdIBufferRaw@ iserr)
		"couldn't allocate KeybdIBufferRaw\n" Panic
	end

	1024 AllocIOBuf KeybdIBuffer!

	if (KeybdIBuffer@ iserr)
		"couldn't allocate KeybdIBuffer\n" Panic
	end

	1 KeybdIBuffer@ IOBuffer_Overwrite + !

	"amanatsu,unit" a3xDGetProperty KeybdID!

	auto intn
	"interrupt#" a3xDGetProperty intn!

	intn@ KeybdID@ "amtsu:%d irq:%d" BootPrintf

	pointerof KeybdIntr intn@ InterruptRegister

	KeybdID@ AmanatsuSetInterrupt

	OWNER_R GROUP_R | WORLD_R | KeybdIBuffer@ 0 "kbd0" KeybdDriver 0 DeviceRegister drop
end

fn (DevSysctl) KeybdSysctl { op1 op2 op3 op4 unit -- ok }
	-ENOTBLK ok!
end

fn (DevOpen) KeybdOpen { unit -- ok }
	0 ok!
end

fn (DevClose) KeybdClose { unit -- ok }
	0 ok!
end

fn (DevIOCtl) KeybdIOCtl { op1 op2 op3 op4 unit -- ok }
	-ENOTBLK ok!
end

fn (DevRead) KeybdRead { pm buf len unit seek -- bytes }
	auto i
	0 i!

	auto pa
	auto r
	if (buf@ 4095 &)
		pm@ buf@ 1 VMWalk pa! r!

		if (r@ iserr)
			r@ bytes!
			return
		end
	end

	while (i@ len@ <)
		auto c

		KeybdIBufferRaw@ 1 IOBufGetc c!

		if (c@ iserr)
			c@ bytes!
			return
		end

		if (buf@ 4095 & 0 ==)
			pm@ buf@ 1 VMWalk pa! r!

			if (r@ iserr)
				r@ bytes!
				return
			end
		end

		c@ pa@ sb

		1 pa +=
		1 buf +=
		1 i +=
	end

	len@ bytes!
end

fn (DevWrite) KeybdWrite { pm buf len unit seek -- bytes }
	-ENOTBLK bytes!
end

fn AKeyboardPopCode { id -- code }
	auto rs
	InterruptDisable rs!

	id@ AmanatsuSelectDev
	1 AmanatsuCommand
	AmanatsuReadA code!

	rs@ InterruptRestore
end

var Capslock 0

fn AKeyboardSpecial { code -- char }
	ERR char!

	if (code@ 50 ==)
		'\n' char!
	end elseif (code@ 51 ==)
		'\b' char!
	end
end

var Shift 0
var Ctrl 0

fn AKeyboardRead { -- mod scan c }
	auto id
	KeybdID@ id!

	0 mod!

	id@ AKeyboardPopCode scan!

	ERR c!

	if (scan@ 0xFFFF ==)
		ERR scan!
		return
	end

	if (scan@ 80 ==)
		1 Ctrl!
	end elseif (scan@ 82 ==)
		1 Shift!
	end elseif (scan@ 32848 ==)
		0 Ctrl!
	end elseif (scan@ 32850 ==)
		0 Shift!
	end elseif (scan@ 52 ==)
		1 Capslock!
		return
	end elseif (scan@ 32820 ==)
		0 Capslock!
	end

	if (scan@ 80 >=)
		return
	end

	if (scan@ 50 >=) scan@ AKeyboardSpecial c! return end

	if (Shift@)
		[scan@]AKeyboardLayoutShift@ c!
	end elseif (Ctrl@)
		[scan@]AKeyboardLayoutCtrl@ c!
	end elseif (Capslock@ scan@ 26 < &&)
		[scan@]AKeyboardLayoutShift@ c!
	end else
		[scan@]AKeyboardLayout@ c!
	end
end

fn (IntHandler) KeybdIntr { intn -- }
	KeybdID@ AmanatsuClearInterrupt

	intn@ InterruptAck@ InterruptAcker

	auto c
	auto scan
	auto mod

	auto inputf
	KeybdIBuffer@ IOBuffer_InputF + @ inputf!

	AKeyboardRead c! scan! mod!

	while (scan@ ERR ~=)
		if (c@ ERR ~=)
			if (inputf@)
				c@ KeybdIBuffer@ inputf@ IOCharInput
			end
		end

		scan@ 0xFF & KeybdIBufferRaw@ 0 IOBufPutc drop
		scan@ 8 >> 0xFF & KeybdIBufferRaw@ 0 IOBufPutc drop

		AKeyboardRead c! scan! mod!
	end

	KeybdID@ AmanatsuSetInterrupt
end

table AKeyboardLayout
	'a'
	'b' 'c' 'd'
	'e' 'f' 'g'
	'h' 'i' 'j'
	'k' 'l' 'm'
	'n' 'o' 'p'
	'q' 'r' 's'
	't' 'u' 'v'
	'w' 'x' 'y'
	'z'
	'0' '1' '2'
	'3' '4' '5'
	'6' '7' '8'
	'9'
	';'
	' '
	' '
	'-'
	'='
	'['
	']'
	'\\'
	0
	'/'
	'.'
	'\''
	','
	'`'
endtable

table AKeyboardLayoutCtrl
	1
	2 3 4
	5 6 7
	8 9 10
	11 12 13
	14 15 16
	17 18 19
	20 21 22
	23 24 25
	26
	-1 -1 0
	-1 -1 -1
	30 -1 -1
	-1
	-1
	-1
	-1
	31
	-1
	27
	29
	28
	-1
	-1
	-1
	-1
	-1
	-1
endtable

table AKeyboardLayoutShift
	'A'
	'B' 'C' 'D'
	'E' 'F' 'G'
	'H' 'I' 'J'
	'K' 'L' 'M'
	'N' 'O' 'P'
	'Q' 'R' 'S'
	'T' 'U' 'V'
	'W' 'X' 'Y'
	'Z'
	')' '!' '@'
	'#' '$' '%'
	'^' '&' '*'
	'('
	':'
	' '
	' '
	'_'
	'+'
	'{'
	'}'
	'|'
	0
	'?'
	'>'
	'"'
	'<'
	'~'
endtable