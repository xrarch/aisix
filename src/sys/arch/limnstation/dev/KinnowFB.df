#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"

const LGRegScreen 0x3000
const LGRegVRAM   0x3004
const LGRegRead   0x3008
const LGRegWrite  0x300C
const LGRegCursor 0x3010
const LGRegStatus 0x3014
const LGRegMode   0x3018
const LGRegCause  0x301C
const LGRegCurPos 0x3020

fn DrvLGFXFoundNode { node -- }
	auto gfx
	AllocGFX gfx!

	if (gfx@ iserr)
		return
	end

	"framebuffer" a3xDGetProperty gfx@ GFX_FBAddr + !

	auto w
	"width" a3xDGetProperty w!
	w@ gfx@ GFX_Width + !

	auto h
	"height" a3xDGetProperty h!
	h@ gfx@ GFX_Height + !

	gfx@ GFX_FBAddr + @ h@ w@ "%dx%d @ 0x%x" BootPrintf

	w@ h@ * gfx@ GFX_FBSize + !

	"depth" a3xDGetProperty gfx@ GFX_Depth + !
	"vram" a3xDGetProperty gfx@ GFX_VRAM + !
	"vramSize" a3xDGetProperty gfx@ GFX_VRAMSize + !

	auto sbe
	"address" a3xDGetProperty sbe!
	sbe@ gfx@ GFX_UData + !

	pointerof LGFXRectangle gfx@ GFX_Rect + !
	pointerof LGFXBlitBits gfx@ GFX_BlitBits + !
	pointerof LGFXBlit gfx@ GFX_Blit + !
	pointerof LGFXScroll gfx@ GFX_Scroll + !
	pointerof LGFXInvert gfx@ GFX_Invert + !

	gfx@ GFXRegister
end

fn (GFXInvert) LGFXInvert { x y w h gfx -- }
	auto gw
	gfx@ GFX_Width + @ gw!

	auto fb
	gfx@ GFX_FBAddr + @ fb!

	auto dest
	y@ gw@ * x@ + fb@ + dest!

	auto mod
	gw@ mod!

	while (h@)
		dest@ @ ~ dest@ !
		dest@ 4 + @ ~ dest@ 4 + !

		mod@ dest +=
		1 h -=
	end
end

fn (GFXRect) LGFXRectangle { x y w h color gfx -- }
	auto row
	0 row!

	auto v
	color@ color@ 8 << | color@ 16 << | color@ 24 << | v!

	auto gw
	gfx@ GFX_Width + @ gw!

	auto fb
	gfx@ GFX_FBAddr + @ fb!

	auto ptr
	y@ gw@ * x@ + fb@ + ptr!

	auto mod
	gw@ mod!

	auto rowsz
	w@ rowsz!

	while (row@ h@ <)
		ptr@ rowsz@ v@ memset

		1 row +=
		mod@ ptr +=
	end
end

// mountains of redundant functions for various bit blit ops

fn LGFXBlitBitsFastFG { fg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@)
				if (byte@ 128 &)
					fg@ dest@ 7 + sb
				end

				if (byte@ 64 &)
					fg@ dest@ 6 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 5 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 4 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 3 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 2 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 1 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end

				1 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn LGFXBlitBitsFastBG { bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 & ~~)
					bg@ dest@ 7 + sb
				end

				if (byte@ 64 & ~~)
					bg@ dest@ 6 + sb
				end

				if (byte@ 32 & ~~)
					bg@ dest@ 5 + sb
				end

				if (byte@ 16 & ~~)
					bg@ dest@ 4 + sb
				end

				if (byte@ 8 & ~~)
					bg@ dest@ 3 + sb
				end

				if (byte@ 4 & ~~)
					bg@ dest@ 2 + sb
				end

				if (byte@ 2 & ~~)
					bg@ dest@ 1 + sb
				end

				if (byte@ 1 & ~~)
					bg@ dest@ sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ & ~~)
					bg@ dest@ sb
				end

				1 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn LGFXBlitBitsFastFGBG { fg bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 &)
					fg@ dest@ 7 + sb
				end else
					bg@ dest@ 7 + sb
				end

				if (byte@ 64 &)
					fg@ dest@ 6 + sb
				end else
					bg@ dest@ 6 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 5 + sb
				end else
					bg@ dest@ 5 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 4 + sb
				end else
					bg@ dest@ 4 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 3 + sb
				end else
					bg@ dest@ 3 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 2 + sb
				end else
					bg@ dest@ 2 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 1 + sb
				end else
					bg@ dest@ 1 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end

				1 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

// reversed ones

fn LGFXBlitBitsFastBackwardsFG { fg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@)
				if (byte@ 128 &)
					fg@ dest@ sb
				end

				if (byte@ 64 &)
					fg@ dest@ 1 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 2 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 3 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 4 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 5 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 6 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ 7 + sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end

				1 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn LGFXBlitBitsFastBackwardsBG { bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 & ~~)
					bg@ dest@ sb
				end

				if (byte@ 64 & ~~)
					bg@ dest@ 1 + sb
				end

				if (byte@ 32 & ~~)
					bg@ dest@ 2 + sb
				end

				if (byte@ 16 & ~~)
					bg@ dest@ 3 + sb
				end

				if (byte@ 8 & ~~)
					bg@ dest@ 4 + sb
				end

				if (byte@ 4 & ~~)
					bg@ dest@ 5 + sb
				end

				if (byte@ 2 & ~~)
					bg@ dest@ 6 + sb
				end

				if (byte@ 1 & ~~)
					bg@ dest@ 7 + sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ & ~~)
					bg@ dest@ sb
				end

				1 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn LGFXBlitBitsFastBackwardsFGBG { fg bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end

				if (byte@ 64 &)
					fg@ dest@ 1 + sb
				end else
					bg@ dest@ 1 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 2 + sb
				end else
					bg@ dest@ 2 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 3 + sb
				end else
					bg@ dest@ 3 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 4 + sb
				end else
					bg@ dest@ 4 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 5 + sb
				end else
					bg@ dest@ 5 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 6 + sb
				end else
					bg@ dest@ 6 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ 7 + sb
				end else
					bg@ dest@ 7 + sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end

				1 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn (GFXBlitBits) LGFXBlitBits { fg bg bitd ptr x y w h gfx -- }
	auto gw
	gfx@ GFX_Width + @ gw!

	auto fb
	gfx@ GFX_FBAddr + @ fb!

	auto dest
	y@ gw@ * x@ + fb@ + dest!

	auto mod
	gw@ w@ - mod!

	if (fg@ -1 ==)
		if (bg@ -1 ==)
			return
		end

		if (bitd@)
			bg@ ptr@ dest@ mod@ w@ h@ LGFXBlitBitsFastBackwardsBG
		end else
			bg@ ptr@ dest@ mod@ w@ h@ LGFXBlitBitsFastBG
		end
	end elseif (bg@ -1 ==)
		if (bitd@)
			fg@ ptr@ dest@ mod@ w@ h@ LGFXBlitBitsFastBackwardsFG
		end else
			fg@ ptr@ dest@ mod@ w@ h@ LGFXBlitBitsFastFG
		end
	end else
		if (bitd@)
			fg@ bg@ ptr@ dest@ mod@ w@ h@ LGFXBlitBitsFastBackwardsFGBG
		end else
			fg@ bg@ ptr@ dest@ mod@ w@ h@ LGFXBlitBitsFastFGBG
		end
	end
end

fn (GFXBlit) LGFXBlit { x y w h ptr gfx -- }
	auto dest
	y@ gfx@ GFX_Width + @ * x@ + gfx@ GFX_FBAddr + @ + dest!

	auto mod
	gfx@ GFX_Width + @ mod!

	auto pmod
	w@ pmod!

	while (h@)
		dest@ ptr@ pmod@ memcpy

		pmod@ ptr +=
		mod@ dest +=
		1 h -=
	end
end

fn (GFXScroll) LGFXScroll { x y w h color rows gfx -- }
	auto row
	0 row!

	auto gw
	gfx@ GFX_Width + @ gw!

	auto gh
	gfx@ GFX_Height + @ gh!

	auto fb
	gfx@ GFX_FBAddr + @ fb!

	auto dest
	y@ gw@ * x@ + fb@ + dest!

	auto src
	y@ rows@ + gw@ * x@ + fb@ + src!

	auto mod
	gw@ mod!

	auto rowsz
	w@ rowsz!

	auto rh
	h@ rows@ - rh!

	while (row@ rh@ <)
		dest@ src@ rowsz@ memcpy

		1 row +=
		mod@ src +=
		mod@ dest +=
	end

	if (color@ -1 ~=)
		x@ y@ h@ + rows@ - w@ rows@ color@ gfx@ LGFXRectangle
	end
end