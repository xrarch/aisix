#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"
#include "<inc>/kernel.h"
#include "<inc>/dev/amtsu.h"

table MouseDriver
	"mouse"
	DEV_CHAR
	pointerof MouseOpen
	pointerof MouseClose
	pointerof MouseIoctl
	pointerof MouseRead
	pointerof MouseWrite
	pointerof MouseSysctl
endtable

var MouseFound 0

var MouseID 0

struct MousePacket
	4 Event
	4 Info1
	4 Info2
endstruct

const MOUSEPRESS 1
const MOUSERELEASE 2
const MOUSEMOVE 3

const MOUSEBUFSZ 8

buffer MouseIBuffer (MousePacket_SIZEOF MOUSEBUFSZ *)

var WriteP 0
var ReadP 0

fn DrvMouseFoundNode { node -- }
	if (MouseFound@)
		return
	end

	1 MouseFound!

	"amanatsu,unit" a3xDGetProperty MouseID!

	auto intn
	"interrupt#" a3xDGetProperty intn!

	intn@ MouseID@ "amtsu:%d irq:%d" Printf

	pointerof MouseIntr intn@ InterruptRegister

	MouseID@ AmanatsuSetInterrupt

	OWNER_R GROUP_R | WORLD_R | 0 0 "mouse0" MouseDriver 0 DeviceRegister drop
end

fn (DevSysctl) MouseSysctl { op1 op2 op3 op4 unit -- ok }
	-ENOTBLK ok!
end

fn (DevOpen) MouseOpen { unit -- ok }
	0 ok!
end

fn (DevClose) MouseClose { unit -- ok }
	0 ok!
end

fn (DevIoctl) MouseIoctl { op1 op2 op3 op4 unit -- ok }
	0 ok!
end

buffer MouseEvQ EventQueue_SIZEOF

fn (DevRead) MouseRead { buf len unit seek -- bytes }
	auto i
	0 i!

	if (len@ MousePacket_SIZEOF %)
		-EINVAL bytes!
		return
	end

	len@ bytes!

	MousePacket_SIZEOF len /=

	while (i@ len@ <)
		auto rs
		InterruptDisable rs!

		if (ReadP@ WriteP@ ==)
			0 ReadP!
			0 WriteP!

			if (MouseEvQ WaitQueue)
				rs@ InterruptRestore
				-EINTR bytes!
				return
			end
		end

		rs@ InterruptRestore

		buf@
		ReadP@ MOUSEBUFSZ % MousePacket_SIZEOF * MouseIBuffer +
		MousePacket_SIZEOF memcpy

		InterruptDisable rs!
		1 ReadP +=
		rs@ InterruptRestore

		MousePacket_SIZEOF buf +=
		1 i +=
	end
end

fn (DevWrite) MouseWrite { buf len unit seek -- bytes }
	-ENOTBLK bytes!
end

fn AMouseEvent { -- detail event }
	MouseID@ AmanatsuSelectDev
	1 AmanatsuCommand
	AmanatsuReadB detail!
	AmanatsuReadA event!
end

buffer MousePacketBuf MousePacket_SIZEOF

fn AMousePushEvent { -- }
	auto i
	0 i!

	if (WriteP@ ReadP@ - MOUSEBUFSZ >=)
		1 ReadP +=
	end

	WriteP@ MOUSEBUFSZ % MousePacket_SIZEOF * MouseIBuffer +
	MousePacketBuf
	MousePacket_SIZEOF memcpy

	1 WriteP +=

	MouseEvQ WakeQueue
end

fn (IntHandler) MouseIntr { intn -- }
	MouseID@ AmanatsuClearInterrupt

	intn@ InterruptAck@ InterruptAcker

	while (1)
		auto detail
		auto event
		AMouseEvent event! detail!

		if (event@ 0 ==)
			break
		end

		auto buf
		MousePacketBuf buf!

		event@ buf@ MousePacket_Event + !

		if (event@ MOUSEMOVE ==)
			(* info 1 is delta x, info 2 is delta y *)
			auto dx
			detail@ 16 >> dx!

			auto dy
			detail@ 0xFFFF & dy!

			if (dx@ 0x8000 &)
				0xFFFF0000 dx |=
			end

			if (dy@ 0x8000 &)
				0xFFFF0000 dy |=
			end

			dx@ buf@ MousePacket_Info1 + !
			dy@ buf@ MousePacket_Info2 + !
		end else
			detail@ buf@ MousePacket_Info1 + !
		end

		AMousePushEvent
	end

	MouseID@ AmanatsuSetInterrupt
end