#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"

externconst AFSErrors
extern ArgsInit
extern AFSInit
extern IDiskInit
extern ArgsValue
extern ArgsCheck
extern AFSLoadFile
extern AFSPrintList

var TotalRAM 0
public TotalRAM

var bootargs 0

const LoadBase 0x80000

procedure Main { args -- ret }
	0 ret!

	args@ bootargs!

	args@ ArgsInit

	'\n' Putc

	"/memory" a3xDeviceSelect
		"totalRAM" a3xDGetProperty TotalRAM!
	a3xDeviceExit

	if (TotalRAM@ LoadBase <)
		LoadBase 1024 / "aisixboot: I refuse to run with less than %dKB of RAM.\n" Printf
		-1 a3xReturn
	end

	a3xMyDevice@ IDiskInit
	AFSInit

	if ("-p" ArgsCheck ~~)
		"/nvram" a3xDeviceSelect
			auto ab
			"aisix,bootfile" "getVar" a3xDCallMethod drop ab!

			if (ab@ 0 ==)
				"/aisix" "aisix,bootfile" "setVar" a3xDCallMethod drop

				"/aisix" ab!
			end
		a3xDeviceExit

		if (ab@ 0 ~=)
			auto c
			0 c!

			auto vs
			0 vs!
			while (c@ -1 ~=)
				Getc c!

				if (c@ 0x02 ==) (* ctrl-B over serial *)
					1 vs!

					(* don't break, keep eating buffer *)
				end
			end

			if (vs@ ~~)
				ab@ "aisix,bootfile = %s\n" Printf

				args@ ab@ DoFile
			end
		end else
			"aisix,bootfile not specified
Please use the command 'setenv aisix,bootfile /aisix' and try again.
Alternatively, use the '-p' argument to enter the bootloader prompt.\n" Panic
		end
	end

	Prompt
end

procedure DoFile { arg buf -- ret }
	auto sz

	auto r
	buf@ LoadBase AFSLoadFile r! sz!

	if (r@ 1 ~=)
		[r@]AFSErrors@ buf@ "failed to load %s: %s\n" Printf
	end elseif (LoadBase@ 0x45544E41 ~=)
		buf@ "%s is not a standalone program\n" Printf
	end else
		(* this bootloader uses the same protocol as a3x but just with file size added *)
		(* also the base is 0x80000 instead of 0x40000 *)

		asm "pusha"

		sz@ a3xCIPtr@ a3xMyDevice@ arg@ LoadBase 4 + @ Call "DoFile (%d)\n" Printf

		asm "popa"
	end
end

procedure Prompt (* -- *)
	auto Go
	1 Go!

	auto buf
	256 Calloc buf!

	auto word
	256 Calloc word!

	"/" AFSPrintList

	"Type name of standalone program, 'exit' to return, or 'ls' to list files.\nPress return to boot the kernel with normal args.\n" Printf

	while (Go@)
		"\t>> " Printf
		buf@ 255 Gets

		auto nw
		buf@ word@ ' ' 255 strntok nw!

		if (word@ strlen 0 >)
			if (word@ "exit" strcmp)
				0 Go!
			end elseif (word@ "ls" strcmp)
				if (nw@ 0 ~=)
					1 nw +=
				end
				nw@ AFSPrintList
			end else
				if (nw@ 0 ~=)
					1 nw +=
				end

				nw@ word@ DoFile
			end
		end else
			bootargs@ "aisix" DoFile
		end
	end

	word@ Free
	buf@ Free
end

procedure Panic (* errorstr -- *)
	"panic: " Printf

	Printf

	-1 a3xReturn
end