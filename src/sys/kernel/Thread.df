#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"
#include "<inc>/context.h"

table Threads[THREADMAX]
public Threads

table Processes[PROCMAX]
public Processes

var CurrentThread 0
public CurrentThread

var KernelProcess 0
public KernelProcess

var InitProcess 0
public InitProcess

var IdleThread 0
public IdleThread

const KERNELPID 1

extern AISIXInitialThread { -- }

fn ThreadInit { -- }
	auto process
	0 ProcessNew process!

	if (process@ iserr)
		process@ abs process!
		[process@]ErrorNames@ "couldn't set up kernel process: %s\n" Panic
	end

	if (KernelProcess@ process@ ~=)
		"couldn't set up kernel process\n" Panic
	end

	auto ok
	pointerof AISIXInitialThread 0 0 process@ 1 ProcessAddMainThread ok!

	if (ok@ iserr)
		ok@ abs ok!
		[ok@]ErrorNames@ "couldn't set up initial kernel thread: %s\n" Panic
	end

	process@ Process_MainThread + @ ThreadReady
end

fn ThreadAllocate { -- thread }
	auto tid
	0 tid!

	-ENOMEM thread!

	while (tid@ THREADMAX <)
		auto rs
		InterruptDisable rs!

		if ([tid@]Threads@ 0 ==)
			auto ts
			Thread_SIZEOF Calloc ts!

			if (ts@ iserr)
				rs@ InterruptRestore
				return
			end

			TS_NOTREADY ts@ Thread_Status + !

			tid@ ts@ Thread_TID + !

			ts@ [tid@]Threads!

			rs@ InterruptRestore
			ts@ thread!
			return
		end

		rs@ InterruptRestore

		1 tid +=
	end
end

fn ThreadFreeSlot { thread -- }
	auto tid
	thread@ Thread_TID + @ tid!

	0 [tid@]Threads!

	thread@ Free
end

fn ThreadFree { thread -- }
	thread@ Thread_KernelStack + @ PMMFasterSinglePageFree

	thread@ ThreadFreeSlot
end

(* if the thread is in the kernel,
wake it up and let it finish up whatever it's doing,
and maybe find out it was killed and do something special.
it will eventually call ThreadExit when it returns to
the exception vectoring code.
this prevents locks from being held forever, buffers never being
freed, etc.
however, user threads can just be killed, and their
resources immediately freed.
if the process has no more threads left, kill it too, unless
it already exited. *)

fn ThreadKill { thread -- }
	if (thread@ Thread_Process + @ KernelProcess@ ==)
		"tried to kill a kernel thread!\n" Panic
	end

	if (thread@ Thread_Killed + @)
		return
	end

	auto rs
	InterruptDisable rs!

	auto thst
	thread@ Thread_Status + @ thst!

	auto killnow
	thread@ Thread_InKernel + @ ~~ killnow!

	if (killnow@)
		thread@ ThreadFree

		auto process
		thread@ Thread_Process + @ process!

		1 process@ Process_Threads + -=

		if (process@ Process_MainThread + @ thread@ ==)
			0 process@ Process_MainThread + !
			0 process@ ProcessKill
		end
	end else
		if (thst@ TS_EVENT ==)
			(* remove from whatever EventQueue its waiting in *)
			auto eq
			thread@ Thread_EvQ + @ eq!

			auto pw
			thread@ Thread_PrevWaiter + @ pw!

			auto nw
			thread@ Thread_NextWaiter + @ nw!

			if (pw@)
				nw@ pw@ Thread_NextWaiter + !
			end

			if (nw@)
				pw@ nw@ Thread_PrevWaiter + !
			end

			if (eq@ EventQueue_FirstWaiter + @ thread@ ==)
				nw@ eq@ EventQueue_FirstWaiter + !
			end

			if (eq@ EventQueue_LastWaiter + @ thread@ ==)
				pw@ eq@ EventQueue_LastWaiter + !
			end
		end

		1 thread@ Thread_Killed + !

		if (thread@ CurrentThread@ ~=)
			if (thread@ Thread_Status + @ TS_EVENT_UNINTERRUPTIBLE ~=)
				TS_READY thread@ Thread_Status + !
			end
		end
	end

	rs@ InterruptRestore
end

fn ThreadExit { -- }
	auto rs
	InterruptDisable rs!

	auto thread
	CurrentThread@ thread!

	auto process
	thread@ Thread_Process + @ process!

	1 process@ Process_Threads + -=
	
	if (process@ Process_MainThread + @ thread@ ==)
		0 process@ Process_MainThread + !
		process@ Process_ReturnValue + @ ProcessExit
	end

	0 thread@ Thread_Status + !

	thread@ ThreadFree

	JumpIntoScheduler

	"exit returned\n" Panic
end

fn ThreadNew { process entry name kern pass0 pass1 -- thread }
	ThreadAllocate thread!

	if (thread@ iserr)
		return
	end

	process@ thread@ Thread_Process + !

	auto stack
	PMMFasterSinglePageAlloc stack!

	if (stack@ iserr)
		thread@ ThreadFreeSlot
		stack@ thread!
		return
	end

	stack@ thread@ Thread_KernelStack + !

	auto uc

	auto vst

	4096 stack@ + dup thread@ Thread_KernelStackTop + ! uc!

	pass0@ pass1@ entry@ uc@ kern@ CPUContextPrepare thread@ Thread_Context + !

	thread@ Thread_Name + name@ THREADNAMELEN 1 - strncpy

	1 process@ Process_Threads + +=
end

fn ThreadReady { thread -- }
	TS_READY thread@ Thread_Status + !
end

fn KernelThreadNew { entry name -- thread }
	KernelProcess@ entry@ name@ 1 0 0 ThreadNew thread!
end

extern CPUIdle { -- }

var SchedulerContext 0

externptr TTYKill

var DebugNextSched 0
public DebugNextSched

var InScheduler 0
public InScheduler

asm "

CPUHlt:
	.dl 0x10000029

"

extern CPUHlt { -- }

fn Scheduler { -- }
	auto thread

	auto rs

	auto lastproc
	-1 lastproc!

	auto found

	RS_KTHREAD rs!

	while (1)
		if (DebugNextSched@)
			0 DebugNextSched!
			KDebug
		end

		auto i
		0 i!

		auto fc
		0 fc!

		while (i@ THREADMAX <)
			[i@]Threads@ thread!

			if (thread@ 0 ==)
				1 i +=
				continue
			end

			if (thread@ Thread_Status + @ TS_READY ~=)
				1 i +=
				continue
			end

			if (thread@ IdleThread@ ==)
				if (found@ TTYKill@ ~~ &&)
					1 i +=
					continue
				end
			end else
				if (found@ ~~)
					1 found!
				end
			end

			1 fc!

			thread@ CurrentThread!

			TS_RUNNING thread@ Thread_Status + !

			auto proc
			thread@ Thread_Process + @ proc!

			if (proc@ lastproc@ ~=)
				if (proc@ Process_Pagemap + @)
					proc@ PlatformSwitchSeg

					proc@ lastproc!
				end
			end

			SchedulerContext thread@ Thread_Context + @ cswtch

			0 CurrentThread!

			1 i +=
		end

		fc@ found!

		1 InScheduler!

		rs@ InterruptRestore
		InterruptDisable rs!

		0 InScheduler!
	end
end

fn JumpIntoScheduler { -- }
	if (CurrentThread@ Thread_Status + @ TS_RUNNING ==)
		"JumpIntoScheduler: thread is running\n" Panic
	end

	CurrentThread@ Thread_Context + SchedulerContext@ cswtch
end

fn Yield { -- }
	auto rs
	InterruptDisable rs!

	TS_READY CurrentThread@ Thread_Status + !

	JumpIntoScheduler

	rs@ InterruptRestore
end

fn SleepFor { ms -- killed }
	auto rs
	InterruptDisable rs!

	TimerUptime ms@ + CurrentThread@ Thread_WaitChan + !

	TS_TIMER CurrentThread@ Thread_Status + !

	JumpIntoScheduler

	rs@ InterruptRestore

	CurrentThread@ Thread_Killed + @ killed!
end

fn WakeupTimer { uptime -- }
	auto i
	0 i!

	while (i@ THREADMAX <)
		auto rs
		InterruptDisable rs!

		auto thr
		[i@]Threads@ thr!

		if (thr@)
			if (thr@ Thread_Status + @ TS_TIMER ==)
				if (uptime@ thr@ Thread_WaitChan + @ >=)
					0 thr@ Thread_WaitChan + !

					if (thr@ Thread_Status + @ TS_SUSPEND ~= )
						TS_READY thr@ Thread_Status + !
					end
				end
			end
		end

		rs@ InterruptRestore

		1 i +=
	end
end

extern KDebug { -- }

fn WaitQueue1 { evq status -- killed }
	auto rs
	InterruptDisable rs!

	if (CurrentThread@ Thread_CleaningUp + @)
		TS_EVENT_UNINTERRUPTIBLE status!
	end elseif (CurrentThread@ Thread_Killed + @)
		if (status@ TS_EVENT_UNINTERRUPTIBLE ~=)
			rs@ InterruptRestore
			1 killed!
			return
		end
	end

	auto lw
	evq@ EventQueue_LastWaiter + @ lw!

	if (lw@)
		CurrentThread@ lw@ Thread_NextWaiter + !
		lw@ CurrentThread@ Thread_PrevWaiter + !
	end else
		(* no last waiter means no first waiter, set myself as first waiter *)
		CurrentThread@ evq@ EventQueue_FirstWaiter + !
	end

	CurrentThread@ evq@ EventQueue_LastWaiter + !

	status@ CurrentThread@ Thread_Status + !

	evq@ CurrentThread@ Thread_EvQ + !

	JumpIntoScheduler

	0 CurrentThread@ Thread_EvQ + !

	CurrentThread@ Thread_Killed + @ killed!

	if (CurrentThread@ Thread_CleaningUp + @)
		0 killed!
	end

	rs@ InterruptRestore
end

fn WaitQueue { evq -- killed }
	evq@ TS_EVENT WaitQueue1 killed!
end

fn WaitQueueUninterruptible { evq -- }
	evq@ TS_EVENT_UNINTERRUPTIBLE WaitQueue1 drop
end

fn WakeQueue { evq -- }
	auto rs
	InterruptDisable rs!

	auto w
	evq@ EventQueue_FirstWaiter + @ w!

	if (w@ ~~)
		rs@ InterruptRestore
		return
	end

	if (w@ Thread_Status + @ TS_SUSPEND ~=)
		TS_READY w@ Thread_Status + !
	end

	auto nw
	w@ Thread_NextWaiter + @ nw!

	nw@ evq@ EventQueue_FirstWaiter + !

	if (nw@ 0 ==)
		0 evq@ EventQueue_LastWaiter + !
	end else
		0 nw@ Thread_PrevWaiter + !
	end

	if (evq@ EventQueue_LastWaiter + @ w@ ==)
		0 evq@ EventQueue_LastWaiter + !
	end

	0 w@ Thread_NextWaiter + !
	0 w@ Thread_PrevWaiter + !

	rs@ InterruptRestore
end

(* =========== process management =========== *)

fn ProcLock { proc -- killed }
	proc@ Process_Mutex + LockMutex killed!
end

fn ProcUnlock { proc -- }
	proc@ Process_Mutex + UnlockMutex
end

fn LockMe { -- killed }
	CurrentThread@ Thread_Process + @ ProcLock killed!
end

fn UnlockMe { -- }
	CurrentThread@ Thread_Process + @ ProcUnlock
end

fn ProcessByPID { pid parent -- process }
	auto i
	0 i!

	auto su
	parent@ Process_EUID + @ 0 == su!

	auto uid
	parent@ Process_UID + @ uid!

	while (i@ PROCMAX <)
		auto rs
		InterruptDisable rs!

		[i@]Processes@ process!

		if (process@)
			if (process@ Process_PID + @ pid@ ==)
				if (process@ Process_UID + @ uid@ == su@ ||)
					rs@ InterruptRestore
					return
				end else
					-EPERM process!
					rs@ InterruptRestore
					return
				end
			end
		end

		rs@ InterruptRestore

		1 i +=
	end

	-ESRCH process!
end

var NextPID 1

fn ProcessAllocate { -- process }
	auto i
	0 i!

	if (NextPID@ 0xFFFFFFFF ==)
		"ProcessAllocate: ran out of PIDs, somebody redo this algorithm\n" Panic
	end

	-ENOMEM process!

	while (i@ PROCMAX <)
		auto rs
		InterruptDisable rs!

		if ([i@]Processes@ 0 ==)
			auto ps
			Process_SIZEOF Calloc ps!

			if (ps@ iserr)
				rs@ InterruptRestore
				return
			end

			i@ ps@ Process_Index + !

			NextPID@ ps@ Process_PID + !

			1 NextPID +=

			ps@ [i@]Processes!

			rs@ InterruptRestore
			ps@ process!
			return
		end

		rs@ InterruptRestore

		1 i +=
	end
end

fn ProcessFreeSlot { process -- }
	auto index
	process@ Process_Index + @ index!

	0 [index@]Processes!

	process@ Free
end

fn ProcessNew { name -- process }
	auto canon
	if (name@ 0 ==)
		0 canon!
		"(kernel)" name!
	end else
		1 canon!
		name@ VFSCanonicalizePath name!
		if (name@ iserr)
			name@ process!
			return
		end
	end

	ProcessAllocate process!

	if (process@ iserr)
		if (canon@)
			name@ Free
		end
		return
	end

	process@ Process_Name + name@ PROCNAMELEN 1 - strncpy

	if (canon@)
		name@ Free
	end

	auto kernel
	0 kernel!

	if (process@ Process_PID + @ KERNELPID ==)
		1 kernel!
	end

	"process" process@ Process_Mutex + InitMutex

	"proc parent" process@ Process_ParentLock + InitMutex

	if (kernel@)
		process@ KernelProcess!
	end
end

fn ProcessAddMainThread { entry udata udatasz process kernel -- ok }
	auto mthread

	process@ entry@ "main" kernel@ udata@ udatasz@ ThreadNew mthread!

	if (mthread@ iserr)
		mthread@ ok!
		return
	end

	mthread@ process@ Process_MainThread + !

	0 ok!
end

fn KillTTY { tty -- }
	auto i
	0 i!

	while (i@ PROCMAX <)
		auto proc
		[i@]Processes@ proc!

		if (proc@)
			if (proc@ Process_IgnoreTTY + @ 0xFF & 0 ==)
				if (proc@ Process_TTY + @ tty@ ==)
					if (proc@ Process_Zombie + @ ~~)
						130 proc@ ProcessKill
					end
				end
			end
		end

		1 i +=
	end
end

fn ProcessExit { ret -- }
	auto process
	CurrentThread@ Thread_Process + @ process!

	ret@ process@ ProcessKill
end

fn ParentLock { proc -- }
	proc@ Process_ParentLock + LockMutexUninterruptible
end

fn ParentUnlock { proc -- }
	proc@ Process_ParentLock + UnlockMutex
end

fn ReparentChildren { process -- }
	auto i
	0 i!

	auto gotone
	0 gotone!

	process@ ParentLock

	while (i@ PROCMAX <)
		auto rs
		InterruptDisable rs!

		auto child
		[i@]Processes@ child!

		if (child@ 0 ~=)
			if (child@ Process_Parent + @ process@ ==)
				InitProcess@ child@ Process_Parent + !

				if (child@ Process_Zombie + @)
					1 gotone!
				end
			end
		end

		rs@ InterruptRestore

		1 i +=
	end

	process@ ParentUnlock

	if (gotone@)
		InitProcess@ Process_WaitQ + WakeQueue
	end
end

extern PlatformProcessExit { proc -- }

fn ProcessKill { ret process -- }
	if (process@ KernelProcess@ ==)
		"kernel process killed!\n" Panic
	end

	if (process@ InitProcess@ ==)
		"init process killed!\n" Panic
	end

	auto rs
	InterruptDisable rs!

	auto i
	0 i!

	auto zomb
	process@ Process_Zombie + @ zomb!

	if (zomb@)
		process@ Process_Name + "%s already zombie\n" Panic
	end

	if (process@ Process_Exited + @ ~~)
		ret@ process@ Process_ReturnValue + !

		1 process@ Process_Exited + !

		while (i@ THREADMAX <)
			auto thread
			[i@]Threads@ thread!

			if (thread@)
				if (thread@ Thread_Process + @ process@ ==)
					thread@ ThreadKill
				end
			end

			1 i +=
		end

		process@ PlatformProcessExit
	end

	if (process@ Process_Zombie + @)
		rs@ InterruptRestore
		return
	end

	auto thleft
	process@ Process_Threads + @ thleft!

	(* do the stuff the last kernel thread would have done if there were any left, which there aren't *)
	if (thleft@ 0 ==)
		1 process@ Process_Zombie + !

		auto parent

		while (1)
			process@ Process_Parent + @ parent!

			parent@ ParentLock

			if (process@ Process_Parent + @ parent@ ==)
				(* we finally didn't get reparented and know for sure who our dad is *)
				break
			end

			parent@ ParentUnlock
		end

		rs@ InterruptRestore

		(* allows us to lock mutexes and stuff even if we are dead, for the purpose of cleanup *)
		1 CurrentThread@ Thread_CleaningUp + !

		process@ ReparentChildren

		process@ Process_CWDVNode + @ VNodeUnref

		auto ofile
		process@ Process_OFiles + ofile!

		0 i!

		while (i@ OFILEMAX <)
			if (ofile@@)
				ofile@@ CloseP drop
				0 ofile@!
			end

			4 ofile +=
			1 i +=
		end

		process@ Process_OSegs + ofile!

		0 i!

		while (i@ OSEGMAX <)
			if (ofile@ OSeg_Segment + @)
				ofile@ ClosePSegment drop
				0 ofile@ OSeg_Segment + !
			end

			OSeg_SIZEOF ofile +=
			1 i +=
		end

		if (process@ Process_Pagemap + @)
			process@ Process_Pagemap + @ VMPagemapFree
		end

		parent@ Process_WaitQ + WakeQueue

		parent@ ParentUnlock

		0 CurrentThread@ Thread_CleaningUp + !
	end else
		rs@ InterruptRestore
	end
end

fn Wait { -- pid ret }
	auto p
	CurrentThread@ Thread_Process + @ p!

	auto rs

	while (1)
		auto i
		0 i!

		auto havechild
		0 havechild!

		p@ ParentLock

		while (i@ PROCMAX <)
			InterruptDisable rs!

			auto child
			[i@]Processes@ child!

			if (child@ 0 ~=)
				if (child@ Process_Parent + @ p@ ==)
					if (child@ Process_Zombie + @)
						p@ ParentUnlock
						rs@ InterruptRestore
						child@ Process_PID + @ pid!
						child@ Process_ReturnValue + @ ret!
						child@ ProcessFreeSlot
						return
					end

					1 havechild!
				end
			end

			rs@ InterruptRestore

			1 i +=
		end

		if (havechild@ ~~)
			p@ ParentUnlock
			-ESRCH pid!
			return
		end

		InterruptDisable rs!

		p@ ParentUnlock

		if (p@ Process_WaitQ + WaitQueue)
			rs@ InterruptRestore
			-EINTR pid!
			return
		end

		rs@ InterruptRestore
	end
end