#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"
#include "<inc>/context.h"

table Threads[THREADMAX]
public Threads

table Processes[PROCMAX]
public Processes

var CurrentThread 0
public CurrentThread

var KernelProcess 0
public KernelProcess

var InitProcess 0

const KERNELPID 1

extern AISIXInitialThread { -- }

fn ThreadInit { -- }
	PROCMAX THREADMAX "max %d threads, %d processes\n" Printf

	auto process
	pointerof AISIXInitialThread "kernel" ProcessNew process!

	if (process@ iserr KernelProcess@ process@ ~= ||)
		"couldn't set up kernel process\n" Panic
	end

	process@ Process_MainThread + @ ThreadReady
end

fn private ThreadAllocate { -- thread }
	auto tid
	0 tid!

	-ENOMEM thread!

	while (tid@ THREADMAX <)
		auto rs
		InterruptDisable rs!

		if ([tid@]Threads@ 0 ==)
			auto ts
			Thread_SIZEOF Calloc ts!

			if (ts@ iserr)
				rs@ InterruptRestore
				ts@ thread!
				return
			end

			TS_NOTREADY ts@ Thread_Status + !

			tid@ ts@ Thread_TID + !

			ts@ [tid@]Threads!

			rs@ InterruptRestore
			ts@ thread!
			return
		end

		rs@ InterruptRestore

		1 tid +=
	end
end

fn private ThreadFreeSlot { thread -- }
	auto tid
	thread@ Thread_TID + @ tid!

	0 [tid@]Threads!

	thread@ Free
end

fn ThreadFree { thread -- }
	KERNELSTACKPAGES thread@ Thread_KernelStack + @ PMMFree

	thread@ ThreadFreeSlot
end

fn ThreadKill { thread -- }
	auto thst
	thread@ Thread_Status + @ thst!

	auto asleep
	0 asleep!

	if (thst@ TS_SLEEPING ==)
		1 asleep!
	end elseif (thst@ TS_TIMER ==)
		1 asleep!
	end

	if (asleep@ ~~)
		thread@ ThreadFree
	end else
		0 thread@ Thread_WaitChan + !

		1 thread@ Thread_Killed + !
		TS_READY thread@ Thread_Status + !
	end
end

fn ThreadExit { -- }
	auto rs
	InterruptDisable rs!

	auto thread
	CurrentThread@ thread!

	auto process
	thread@ Thread_Process + @ process!

	if (process@ Process_Threads + @ 1 ==)
		0 ProcessExit
	end else
		1 process@ Process_Threads + -=

		thread@ ThreadKill
	end

	0 thread@ Thread_Status + !

	JumpIntoScheduler

	"exit returned\n" Panic
end

fn ThreadNew { process entry name -- thread }
	ThreadAllocate thread!

	if (thread@ iserr)
		return
	end

	process@ thread@ Thread_Process + !

	auto stack
	KERNELSTACKPAGES PMMCalloc stack!

	if (stack@ iserr)
		thread@ ThreadFreeSlot
		stack@ thread!
		return
	end

	stack@ thread@ Thread_KernelStack + !

	auto uc

	auto vst

	KERNELSTACKPAGES 4096 * stack@ + dup thread@ Thread_KernelStackTop + ! uc!

	entry@ uc@ CPUContextPrepare thread@ Thread_Context + !

	thread@ Thread_Name + name@ THREADNAMELEN 1 - strncpy

	1 process@ Process_Threads + +=
end

fn ThreadReady { thread -- }
	TS_READY thread@ Thread_Status + !
end

fn KernelThreadNew { entry name -- thread }
	KernelProcess@ entry@ name@ ThreadNew thread!
end

extern CPUIdle { -- }

var SchedulerContext 0

(* scheduler *)
fn Scheduler { -- }
	"entering scheduler loop\n" Printf

	auto rs
	auto thread

	while (1)
		auto i
		0 i!

		InterruptDisable rs!

		while (i@ THREADMAX <)
			[i@]Threads@ thread!

			if (thread@ 0 ==)
				1 i +=
				continue
			end

			if (thread@ Thread_Status + @ TS_READY ~=)
				1 i +=
				continue
			end

			thread@ CurrentThread!

			TS_RUNNING thread@ Thread_Status + !

			SchedulerContext thread@ Thread_Context + @ cswtch

			0 CurrentThread!

			1 i +=
		end

		rs@ InterruptRestore
	end
end

fn JumpIntoScheduler { -- }
	if (CurrentThread@ Thread_Status + @ TS_RUNNING ==)
		"JumpIntoScheduler: thread is running\n" Panic
	end

	CurrentThread@ Thread_Context + SchedulerContext@ cswtch
end

fn Yield { -- }
	auto rs
	InterruptDisable rs!

	TS_READY CurrentThread@ Thread_Status + !

	JumpIntoScheduler

	rs@ InterruptRestore
end

fn SleepFor { ms -- killed }
	auto rs
	InterruptDisable rs!

	TimerUptime ms@ + CurrentThread@ Thread_WaitChan + !

	TS_TIMER CurrentThread@ Thread_Status + !

	JumpIntoScheduler

	rs@ InterruptRestore

	CurrentThread@ Thread_Killed + @ killed!
end

fn WakeupTimer { uptime -- }
	auto i
	0 i!

	while (i@ THREADMAX <)
		auto rs
		InterruptDisable rs!

		auto thr
		[i@]Threads@ thr!

		if (thr@)
			if (thr@ Thread_Status + @ TS_TIMER ==)
				if (uptime@ thr@ Thread_WaitChan + @ >=)
					0 thr@ Thread_WaitChan + !
					TS_READY thr@ Thread_Status + !
				end
			end
		end

		rs@ InterruptRestore

		1 i +=
	end
end

extern KDebug { -- }

fn Sleep { channel -- killed }
	auto rs
	InterruptDisable rs!

	channel@ CurrentThread@ Thread_WaitChan + !

	TS_SLEEPING CurrentThread@ Thread_Status + !

	JumpIntoScheduler

	rs@ InterruptRestore

	CurrentThread@ Thread_Killed + @ killed!
end

fn Wakeup { channel -- }
	auto i
	0 i!

	auto rs
	InterruptDisable rs!

	while (i@ THREADMAX <)
		auto thr
		[i@]Threads@ thr!

		if (thr@)
			if (thr@ Thread_Status + @ TS_SLEEPING ==)
				if (thr@ Thread_WaitChan + @ channel@ ==)
					0 thr@ Thread_WaitChan + !
					TS_READY thr@ Thread_Status + !
				end
			end
		end

		1 i +=
	end

	rs@ InterruptRestore
end

(* =========== process management =========== *)

var NextPID 1

fn private ProcessAllocate { -- process }
	auto i
	0 i!

	if (NextPID@ 0xFFFFFFFF ==)
		"ProcessAllocate: ran out of PIDs, somebody redo this algorithm\n" Panic
	end

	-ENOMEM process!

	while (i@ PROCMAX <)
		auto rs
		InterruptDisable rs!

		if ([i@]Processes@ 0 ==)
			auto ps
			Process_SIZEOF Calloc ps!

			if (ps@ iserr)
				rs@ InterruptRestore
				ps@ process!
				return
			end

			i@ ps@ Process_Index + !

			NextPID@ ps@ Process_PID + !

			1 NextPID +=

			ps@ [i@]Processes!

			rs@ InterruptRestore
			ps@ process!
			return
		end

		rs@ InterruptRestore

		1 i +=
	end
end

fn private ProcessFreeSlot { process -- }
	auto index
	process@ Process_Index + @ index!

	0 [index@]Processes!

	[index@]Processes@ Free
end

fn ProcessNew { entry name -- process }
	ProcessAllocate process!

	if (process@ iserr)
		return
	end

	process@ Process_Name + name@ PROCNAMELEN 1 - strncpy

	auto kernel
	0 kernel!

	if (process@ Process_PID + @ KERNELPID ==)
		1 kernel!
	end

	if (CurrentThread@)
		auto parent
		CurrentThread@ Thread_Process + @ parent!

		parent@ process@ Process_Parent + !

		parent@ Process_UserID + @ dup
		process@ Process_UserID + !
		process@ Process_EUserID + !
	end

	auto mthread

	process@ entry@ "main" ThreadNew mthread!

	mthread@ process@ Process_MainThread + !

	if (mthread@ iserr)
		process@ ProcessFreeSlot
		mthread@ process!
		return
	end

	if (kernel@)
		process@ KernelProcess!
		1 kernel!
	end
end

fn ProcessDestroyThreads { process -- }
	auto i
	0 i!

	while (i@ THREADMAX <)
		auto thread
		[i@]Threads@ thread!

		if (thread@)
			if (thread@ Thread_Process + @ process@ ==)
				thread@ ThreadKill

				1 process@ Process_Threads + -=
			end
		end

		1 i +=
	end

	if (process@ Process_Threads + @ 0 ~=)
		"ProcessDestroyThreads: process wasn't murdered hard enough\n" Panic
	end
end

fn ProcessFreeResources { process -- }
	if (process@ Process_Threads + @ 0 >)
		"ProcessFreeResources: process still had extant threads\n" Panic
	end

	if (process@ Process_Mapped + @)
		process@ Process_TextPages + @ process@ Process_TextPhysical + @ PMMFree
		process@ Process_DataPages + @ process@ Process_DataPhysical + @ PMMFree
		process@ Process_BSSPages + @ process@ Process_BSSPhysical + @ PMMFree
	end

	(* don't free slot now, will be needed later *)
end

fn ProcessExit { ret -- }
	auto process
	CurrentThread@ Thread_Process + @ process!

	ret@ process@ ProcessKill
end

fn ProcessKill { ret process -- }
	if (process@ KernelProcess@ ==)
		"kernel process killed!\n" Panic
	end

	auto rs
	InterruptDisable rs!

	ret@ process@ Process_ReturnValue + !

	process@ ProcessDestroyThreads

	process@ ProcessFreeResources

	(* do wait syscall stuff here *)

	auto i
	0 i!

	while (i@ PROCMAX <)
		auto child
		[i@]Processes@ child!

		if (child@ 0 ~=)
			if (child@ Process_Parent + @ process@ ==)
				InitProcess@ child@ Process_Parent + !

				(* additional bookkeeping is probably required *)
			end
		end

		1 i +=
	end

	rs@ InterruptRestore
end