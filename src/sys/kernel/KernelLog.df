#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"
#include "<inc>/context.h"

var KLogWrite 0
public KLogWrite

var KLogRead 0
public KLogRead

var Panicked 0
public Panicked

var EarlyLog 1
public EarlyLog

var ConsTTY 0

var ConsUseVid 0

var EarlyLogBuf 0

fn KLogInit { -- }
	4096 AllocIOBuf EarlyLogBuf!

	if (EarlyLogBuf@ iserr)
		"couldn't allocate EarlyLogBuf\n" Panic
	end

	1 EarlyLogBuf@ IOBuffer_Overwrite + !

	if ("-t" ArgsCheck)
		1 TriviaSwitch!
	end
end

fn KLogAttach { read write -- }
	read@ KLogRead!
	write@ KLogWrite!
end

externptr VConsTTY
externptr SerialTTY

fn SelectConsole { -- }
	if ("-novcons" ArgsCheck)
		SerialTTY@ ConsTTY!
		return
	end

	if (VConsTTY@)
		1 ConsUseVid!
		VConsTTY@ ConsTTY!
		KLogDumpEarly
		0 EarlyLog!
	end else
		SerialTTY@ ConsTTY!
	end
end

externptr VConsOBuffer

fn Putc { c -- }
	if (EarlyLog@ EarlyLogBuf@ 0 ~= &&)
		c@ EarlyLogBuf@ 0 IOBufPutc drop
	end

	if (Panicked@ ~~ ConsUseVid@ &&) (* write to vidcons output buf for synchronization *)
		c@ VConsOBuffer@ 0 IOBufPutc drop
	end elseif (KLogWrite@)
		c@ KLogWrite@ KLogWriter
	end
end

extern VConsPump { sleep buffer -- ok }

fn KLogDumpEarly { -- }
	0 EarlyLogBuf@ VConsPump drop
end

fn Getc { -- c }
	if (KLogRead@)
		KLogRead@ KLogReader c!
	end else
		ERR c!
	end
end

fn PolledGets { s max -- }
	auto len
	0 len!

	while (1)
		auto c
		ERR c!
		while (c@ ERR ==)
			Getc c!
		end

		if (c@ '\n' ==)
			'\n' Putc
			break
		end

		if (c@ '\b' ==)
			if (len@ 0 >)
				1 len -=
				0 s@ len@ + sb
				'\b' Putc
				' ' Putc
				'\b' Putc
			end
		end elseif (len@ max@ <)
			c@ s@ len@ + sb

			1 len +=
			c@ Putc
		end
	end

	0 s@ len@ + sb
end

fn Readline { s max -- }
	auto bytes
	0 bytes!

	while (bytes@ 0 ==)
		0 s@ max@ ConsTTY@ TTYRead bytes!
	end

	if (s@ bytes@ 1 - + gb '\n' ~=)
		0 s@ sb
		return
	end

	0 s@ bytes@ 1 - + sb
end

fn Gets { s max -- }
	if (ConsTTY@ ~~ Panicked@ ||)
		s@ max@ PolledGets
	end else
		s@ max@ Readline
	end
end

fn Puts { s -- }
	while (s@ gb 0 ~=)
		s@ gb Putc
		1 s +=
	end
end

fn FPuts { fd s -- }
	s@ Puts
end

fn FPutc { fd c -- }
	c@ Putc
end

fn BootPrintf { ... fmt -- }
	if (TriviaSwitch@)
		argv argc@ fmt@ VPrintf
	end
end

extern PlatformAlertUser { early -- }
extern PlatformUnalertUser { -- }

fn AskUser { ... fmt anslen -- answer }
	1 PlatformAlertUser

	argv argc@ fmt@ VPrintf

	anslen@ 1 + Calloc answer!

	answer@ anslen@ Gets

	PlatformUnalertUser
end

extern PlatformPanic { -- }

extern PlatformPrePanic { -- }

extern Trace { pc link -- }

var PanicLink 0

asm "

GetLink:
	la t0, PanicLink
	mov long [t0], sp
	ret

"

extern GetLink { -- }

extern KDebug { -- }

fn LogPump { -- }
	if (ConsUseVid@)
		0 VConsOBuffer@ VConsPump drop
	end
end

var TraceTF 0
public TraceTF

externptr ScaryTrapFrame

fn Panic { ... fmt -- }
	InterruptDisable drop

	LogPump

	GetLink

	1 Panicked!

	PlatformPrePanic

	auto procn

	if (CurrentThread@ 0 ==)
		"no process" procn!
	end else
		CurrentThread@ Thread_Process + @ Process_Name + procn!
	end

	auto thn

	if (CurrentThread@ 0 ==)
		"no thread" thn!
	end else
		CurrentThread@ Thread_Name + thn!
	end

	0 PlatformAlertUser

	if (ConsUseVid@)
		"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\[[41m\[c" Puts
	end

	"!!! AISIX PANIC !!!\n" Printf

	if (TraceTF@ ~~)
		pointerof Panic PanicLink@ Trace
	end else
		auto tf

		if (CurrentThread@)
			CurrentThread@ Thread_TrapFrame + @ tf!
		end else
			ScaryTrapFrame@ tf!
		end

		tf@ Context_epc + @ tf@ Context_sp + @ Trace
	end

	CurrentThread@ thn@ procn@ "running process: %s (thread: %s [%x])\n" Printf

	"panic: " Printf
	argv argc@ fmt@ VPrintf

	"\npress any key to enter kernel debugger\n" Printf

	while (Getc ERR ==) end

	KDebug

	PlatformPanic
end