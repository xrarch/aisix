#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

var KLogWrite 0
public KLogWrite

var KLogRead 0
public KLogRead

var Panicked 0
public Panicked

var EarlyLog 1
public EarlyLog

var EarlyLogBuf 0

fn KLogInit { -- }
	4096 AllocIOBuf EarlyLogBuf!

	if (EarlyLogBuf@ iserr)
		"couldn't allocate EarlyLogBuf\n" Panic
	end

	1 EarlyLogBuf@ IOBuffer_Overwrite + !
end

fn KLogAttach { read write -- }
	read@ KLogRead!
	write@ KLogWrite!
end

externptr ConsUseVid

externptr VConsOBuffer

fn Putc { c -- }
	if (EarlyLog@ EarlyLogBuf@ 0 ~= &&)
		c@ EarlyLogBuf@ 0 IOBufPutc drop
	end

	if (Panicked@ ~~ ConsUseVid@ &&) (* write to vidcons output buf for synchronization *)
		c@ VConsOBuffer@ 0 IOBufPutc drop
	end elseif (KLogWrite@)
		c@ KLogWrite@ KLogWriter
	end
end

fn KLogDumpEarly { -- }
	auto c
	EarlyLogBuf@ 0 IOBufGetc c!

	while (c@ IOBUFEMPTY ~=)
		c@ Putc

		EarlyLogBuf@ 0 IOBufGetc c!
	end
end

fn Getc { -- c }
	if (KLogRead@)
		KLogRead@ KLogReader c!
	end
end

fn PolledGets { s max -- }
	auto len
	0 len!

	while (1)
		auto c
		ERR c!
		while (c@ ERR ==)
			Getc c!
		end

		if (c@ '\n' ==)
			'\n' Putc
			break
		end

		if (c@ '\b' ==)
			if (len@ 0 >)
				1 len -=
				0 s@ len@ + sb
				'\b' Putc
				' ' Putc
				'\b' Putc
			end
		end elseif (len@ max@ <)
			c@ s@ len@ + sb

			1 len +=
			c@ Putc
		end
	end

	0 s@ len@ + sb
end

extern ConsRead { buf len unit seek -- bytes }

fn Readline { s max -- }
	auto bytes
	0 bytes!

	while (bytes@ 0 ==)
		s@ max@ 0 0 ConsRead bytes!
	end

	if (s@ bytes@ 1 - + gb '\n' ~=)
		0 s@ sb
		return
	end

	0 s@ bytes@ 1 - + sb
end

fn Gets { s max -- }
	if (ConsIBuf@ ~~)
		s@ max@ PolledGets
	end else
		s@ max@ Readline
	end
end

fn Puts { s -- }
	while (s@ gb 0 ~=)
		s@ gb Putc
		1 s +=
	end
end

extern PlatformAlertUser { -- }

fn AskUser { ... fmt anslen -- answer }
	PlatformAlertUser

	argv argc@ fmt@ VPrintf

	anslen@ 1 + Calloc answer!

	answer@ anslen@ Gets
end

extern PlatformPanic { -- }

extern PlatformPrePanic { -- }

fn Panic { ... fmt -- }
	InterruptDisable drop

	1 Panicked!

	PlatformPrePanic

	auto procn

	if (CurrentThread@ 0 ==)
		"none yet" procn!
	end else
		CurrentThread@ Thread_Process + @ Process_Name + procn!
	end

	auto thn

	if (CurrentThread@ 0 ==)
		"none yet" thn!
	end else
		CurrentThread@ Thread_Name + thn!
	end

	PlatformAlertUser

	CurrentThread@ thn@ procn@ "running process: %s (thread: %s [%x])\n" Printf

	"panic: " Printf
	argv argc@ fmt@ VPrintf

	PlatformPanic
end