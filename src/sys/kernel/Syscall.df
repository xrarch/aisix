#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"
#include "<inc>/context.h"

table Syscalls
	0
	pointerof SysOpen
	pointerof SysWrite
	pointerof SysClose
	pointerof SysRead
	pointerof SysNewProcess
	pointerof SysExit
	pointerof SysDup
	pointerof SysSetTTYIgnore
endtable
public Syscalls

fn private GetString { user len -- str }
	auto r
	len@ user@ 0 PlatformUserToPhys r! user!

	if (r@ ~~)
		-EINVAL str!
		return
	end

	len@ 1 + Calloc str!

	if (str@ iserr)
		return
	end

	str@ user@ len@ strncpy
end

fn (Syscall) SysOpen { tf -- ok }
	auto path
	tf@ Context_a1 + @ path!

	auto pathlen
	tf@ Context_a2 + @ pathlen!

	auto mode
	tf@ Context_a3 + @ mode!

	path@ pathlen@ GetString path!

	if (path@ iserr)
		path@ ok!
		return
	end

	path@ mode@ Open ok!

	path@ Free
end

fn (Syscall) SysWrite { tf -- ok }
	auto buf
	tf@ Context_a3 + @ buf!

	auto len
	tf@ Context_a2 + @ len!

	auto fd
	tf@ Context_a1 + @ fd!

	auto r
	len@ buf@ 0 PlatformUserToPhys r! buf!

	if (r@ ~~)
		-EINVAL ok!
		return
	end

	buf@ len@ fd@ Write ok!
end

fn (Syscall) SysClose { tf -- ok }
	auto fd
	tf@ Context_a1 + @ fd!

	fd@ Close ok!
end

fn (Syscall) SysRead { tf -- ok }
	auto buf
	tf@ Context_a3 + @ buf!

	auto len
	tf@ Context_a2 + @ len!

	auto fd
	tf@ Context_a1 + @ fd!

	auto r
	len@ buf@ 1 PlatformUserToPhys r! buf!

	if (r@ ~~)
		-EINVAL ok!
		return
	end

	buf@ len@ fd@ Read ok!
end

fn private GetKVec { udc udv -- kdv }
	0 kdv!

	auto p1
	auto p2
	auto r

	if (udc@)
		udc@ UDVec_SIZEOF * udv@ 1 PlatformUserToPhys r! udv!

		if (r@ ~~)
			-EINVAL kdv!
			return
		end

		udc@ UDVec_SIZEOF * Malloc kdv!

		if (kdv@ iserr)
			-ENOMEM kdv!
			return
		end

		auto i
		0 i!

		kdv@ p1!

		while (i@ udc@ <)
			if (udv@ UDVec_Size + @ 0 ==)
				0 p1@ UDVec_Size + !
				0 p1@ UDVec_Ptr + !

				1 i +=
				UDVec_SIZEOF p1 +=
				UDVec_SIZEOF udv +=
				continue
			end

			udv@ UDVec_Size + @ udv@ UDVec_Ptr + @ 0 PlatformUserToPhys r! p2!

			if (r@ ~~)
				kdv@ Free
				-EINVAL kdv!
				return
			end

			udv@ UDVec_Size + @ p1@ UDVec_Size + !
			p2@ p1@ UDVec_Ptr + !

			UDVec_SIZEOF p1 +=
			UDVec_SIZEOF udv +=
			1 i +=
		end
	end
end

fn (Syscall) SysNewProcess { tf -- ok }
	auto udc
	tf@ Context_a1 + @ udc!

	auto udv
	tf@ Context_a2 + @ udv!

	auto mode
	tf@ Context_a3 + @ mode!

	auto fd2
	tf@ Context_v0 + @ fd2!

	auto fd1
	tf@ Context_v1 + @ fd1!

	auto fd0
	tf@ Context_t0 + @ fd0!

	auto path
	tf@ Context_t1 + @ path!

	if (mode@ NP_SPECIFY >)
		-EINVAL ok!
		return
	end

	if (udv@ 3 &)
		-EINVAL ok!
		return
	end

	auto kdv
	udc@ udv@ GetKVec kdv!

	if (kdv@ iserr)
		kdv@ ok!
		return
	end

	path@ tf@ Context_t2 + @ GetString path!

	if (path@ iserr)
		path@ ok!
		if (kdv@)
			kdv@ Free
		end
		return
	end

	auto vnode
	path@ VFSPath vnode!

	if (vnode@ iserr)
		path@ Free
		if (kdv@)
			kdv@ Free
		end
		vnode@ ok!
		return
	end

	if (mode@ NP_SPECIFY ==)
		if (fd0@ -1 ==)
			0 fd0!
		end else
			fd0@ GetFilp fd0!
			if (fd0@ iserr)
				fd0@ ok!
				path@ Free
				vnode@ VNodePut
				if (kdv@)
					kdv@ Free
				end
				return
			end
		end

		if (fd1@ -1 ==)
			0 fd1!
		end else
			fd1@ GetFilp fd1!
			if (fd1@ iserr)
				fd1@ ok!
				path@ Free
				vnode@ VNodePut
				if (kdv@)
					kdv@ Free
				end
				return
			end
		end

		if (fd2@ -1 ==)
			0 fd2!
		end else
			fd2@ GetFilp fd2!
			if (fd2@ iserr)
				fd2@ ok!
				path@ Free
				vnode@ VNodePut
				if (kdv@)
					kdv@ Free
				end
				return
			end
		end
	end

	auto proc

	vnode@ VNodeUnlock

	vnode@ path@ fd0@ fd1@ fd2@ mode@ kdv@ udc@ VNewProcess proc!

	vnode@ VNodeUnref

	path@ Free

	if (kdv@)
		kdv@ Free
	end

	if (proc@ iserr)
		proc@ ok!
		return
	end

	proc@ Process_PID + @ ok!
end

fn (Syscall) SysExit { tf -- ok }
	auto ret
	tf@ Context_a1 + @ ret!

	ret@ ProcessExit

	0 ok!
end

fn (Syscall) SysDup { tf -- ok }
	auto fd
	tf@ Context_a1 + @ fd!

	fd@ FilDup ok!
end

fn (Syscall) SysSetTTYIgnore { tf -- ok }
	auto ttyign
	tf@ Context_a1 + @ ttyign!

	if (ttyign@ 0xFF & 1 >)
		-EINVAL ok!
		return
	end

	if (ttyign@ 8 >> 3 >=)
		-EINVAL ok!
		return
	end

	ttyign@ CurrentThread@ Thread_Process + @ Process_IgnoreTTY + !
end