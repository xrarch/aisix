#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

table VNodeCache[VNCACHESIZE]

buffer VNodeCacheMutex Mutex_SIZEOF

fn LockVCache { -- killed }
	VNodeCacheMutex LockMutex killed!
end

fn UnlockVCache { -- }
	VNodeCacheMutex UnlockMutex
end

var LastIndex 0

fn VNodeRef { vnode -- }
	auto rs
	InterruptDisable rs!

	1 vnode@ VNode_Refs + +=

	1 vnode@ VNode_Mount + @ Mount_VRefs + +=

	rs@ InterruptRestore
end

fn VNodeUnref { vnode -- }
	auto rs
	InterruptDisable rs!

	if (vnode@ VNode_Refs + @ 0 ==)
		vnode@ "VNodeUnref %x\n" Panic
	end

	1 vnode@ VNode_Refs + -=

	1 vnode@ VNode_Mount + @ Mount_VRefs + -=

	rs@ InterruptRestore
end

fn VNodeRemove { vnode -- res }
	if (vnode@ VNode_Refs + @)
		"tried to remove vnode with hanging references!\n" Panic
	end

	auto mount
	vnode@ VNode_Mount + @ mount!

	vnode@ mount@ Mount_Filesystem + @ Filesystem_PutNode + @ FSPutNode res!
end

fn VNodeNew { vnid mount -- vnode }
	auto i
	0 i!

	if (LastIndex@ VNCACHESIZE >=)
		0 LastIndex!
	end

	auto li
	LastIndex@ li!

	-ENOMEM vnode!

	auto ln

	auto vn
	
	auto rs

	if (LockVCache)
		-EINTR vnode!
		return
	end

	while (i@ VNCACHESIZE <)
		li@ i@ + VNCACHESIZE % ln!

		[ln@]VNodeCache@ vn!

		if (vn@ 0 ==)
			ln@ 1 + LastIndex!
			vn@ vnode!
			break
		end

		if (vn@ VNode_Refs + @ 0 ==)
			ln@ 1 + LastIndex!
			vn@ vnode!
			break
		end

		1 i +=
	end

	(* no free vnode thingies, return error *)
	if (vnode@ iserr)
		UnlockVCache
		return
	end

	if (vnode@ 0 ==)
		VNode_SIZEOF Calloc vnode!

		if (vnode@ iserr)
			UnlockVCache
			return
		end

		vnode@ [ln@]VNodeCache!

		ln@ vnode@ VNode_Index + !

		"vnode" vnode@ VNode_Mutex + InitMutex
	end else
		(* make sure nobody else is using the vnode before we trash it.
		   though that shouldn't be possible because the refcount must be
		   zero, but this way an innocent thread might sleep forever
		   instead of crashing the entire system, so for stability reasons
		   here we go *)
		if (vnode@ VNodeLock)
			UnlockVCache
			-EINTR vnode!
			return
		end

		if (vnode@ VNode_Refs + @ 0 ~=)
			"VNodeNew: Refs\n" Panic
		end

		if (vnode@ VNodeRemove iserr)
			"VNodeNew: VNodeRemove\n" Panic
		end

		vnode@ VNode_SIZEOF 0 memset

		"vnode" vnode@ VNode_Mutex + InitMutex
	end

	vnid@ vnode@ VNode_VNID + !

	mount@ vnode@ VNode_Mount + !

	vnode@ VNodeRef

	if (vnode@ VNodeLock)
		vnode@ Free
		0 [ln@]VNodeCache!

		UnlockVCache
		-EINTR vnode!
		return
	end

	auto r

	vnode@ vnode@ VNode_Mount + @ Mount_Filesystem + @ Filesystem_GetNode + @ FSGetNode r!

	if (r@ iserr)
		vnode@ Free
		0 [ln@]VNodeCache!
		r@ vnode!
	end

	UnlockVCache
end

fn VNodeLock { vnode -- killed }
	auto rs
	InterruptDisable rs!

	vnode@ VNode_Mutex + LockMutex killed!

	rs@ InterruptRestore
end

fn VNodeUnlock { vnode -- }
	auto rs
	InterruptDisable rs!

	vnode@ VNode_Mutex + UnlockMutex

	rs@ InterruptRestore
end

fn VNodePut { vnode -- }
	vnode@ VNodeUnref

	vnode@ VNodeUnlock
end

fn VNodeGet { vnid mount -- vnode }
	auto i
	0 i!

	auto rs
	InterruptDisable rs!

	if (mount@ Mount_Busy + @)
		-EBUSY vnode!
		rs@ InterruptRestore
		return
	end

	if (LockVCache)
		-EINTR vnode!
		rs@ InterruptRestore
		return
	end

	mount@ MountRef

	rs@ InterruptRestore

	while (i@ VNCACHESIZE <)
		[i@]VNodeCache@ vnode!

		if (vnode@)
			if (vnode@ VNode_VNID + @ vnid@ ==)
				if (vnode@ VNode_Mount + @ mount@ ==)
					if (vnode@ VNodeLock)
						UnlockVCache
						-EINTR vnode!
						mount@ MountUnref
						return
					end

					break
				end
			end
		end

		0 vnode!

		1 i +=
	end

	UnlockVCache

	if (vnode@ 0 ==)
		vnid@ mount@ VNodeNew vnode!

		if (vnode@ iserr)
			mount@ MountUnref
			return
		end
	end else
		vnode@ VNodeRef
	end

	mount@ MountUnref
end

fn SyncVNodes { mount remove -- res }
	auto i
	0 i!

	0 res!

	auto rs
	InterruptDisable rs!

	if (mount@ Mount_Busy + @)
		if (remove@ ~~) (* this exception is made because this is also called by VFSUnmount which sets the busy flag *)
			rs@ InterruptRestore
			-EBUSY res!
			return
		end
	end

	if (LockVCache)
		rs@ InterruptRestore
		-EINTR res!
		return
	end

	mount@ MountRef

	rs@ InterruptRestore

	auto fs
	mount@ Mount_Filesystem + @ fs!

	while (i@ VNCACHESIZE <)
		auto vnode
		[i@]VNodeCache@ vnode!

		if (vnode@ 0 ==)
			1 i +=
			continue
		end

		if (vnode@ VNode_Mount + @ mount@ ==)
			if (vnode@ VNodeLock)
				-EINTR res!
				mount@ MountUnref
				UnlockVCache
				return
			end

			if (remove@)
				if (vnode@ VNodeRemove iserr)
					"SyncVNodes: VNodeRemove\n" Panic
				end

				0 [vnode@ VNode_Index + @]VNodeCache!
				vnode@ Free
			end else
				vnode@ fs@ Filesystem_Sync + @ FSSync res! (* ignore the result, just keep syncing *)

				if (res@ iserr)
					res@ abs res!
					[res@]ErrorNames@ vnode@ "(%x) sync error: %s\n" Printf
				end

				vnode@ VNodeUnlock
			end

			1 i +=
			continue
		end

		1 i +=
	end

	mount@ MountUnref

	UnlockVCache

	0 res!
end