#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

externconst Pages

(* ported from ancient AISIX *)

var KHeapStart 0x22000
var KHeapSize 0x1DFFF
var KHeapLast 0x22000

const MAGIC 0xCAFEBABE

const FRACTION 8

struct KHeapHeader
	4 magic
	4 size
	4 last
	4 next
	4 allocated
endstruct

procedure HeapInit (* -- *)
	auto heapsizep
	Pages@ FRACTION / 32 max heapsizep!

	heapsizep@ PMMAlloc dup KHeapStart! KHeapLast!

	heapsizep@ 4096 * KHeapSize!

	if (KHeapStart@ ERR ==)
		"couldn't allocate heap!\n" Panic
	end

	KHeapStart@ heapsizep@ 4096 * "heap is %d bytes at 0x%x\n" Printf

	KHeapSize@ KHeapStart@ KHeapHeader_size + !
	0 KHeapStart@ KHeapHeader_last + !
	0 KHeapStart@ KHeapHeader_allocated + !

	MAGIC KHeapStart@ KHeapHeader_magic + !
end

procedure HeapDump (* -- *)
	auto ept
	KHeapStart@ ept!

	auto max
	KHeapStart@ KHeapSize@ + max!

	auto tfree
	0 tfree!

	auto talloc
	0 talloc!

	auto i
	0 i!

	auto stotal
	0 stotal!

	while (ept@ max@ <)
		auto size
		ept@ KHeapHeader_size + @ size!

		auto asz
		size@ KHeapHeader_SIZEOF - asz!

		auto alloc
		ept@ KHeapHeader_allocated + @ alloc!

		auto last
		ept@ KHeapHeader_last + @ last!

		auto magic
		ept@ KHeapHeader_magic + @ magic!

		i@ "block %d:\n" Printf
		ept@ "	ptr: 0x%x\n" Printf
		size@ "	size: %d bytes\n" Printf
		asz@ "	real size: %d bytes\n" Printf
		last@ "	last: 0x%x\n" Printf
		alloc@ "	allocated: %d\n" Printf
		magic@ "	magic: %x\n" Printf

		if (alloc@ 1 ==)
			talloc@ size@ + talloc!
		end else
			tfree@ size@ + tfree!
		end

		if (size@ 0 ==)
			"size 0, very weird, breaking\n" Printf
			break
		end

		if (magic@ MAGIC ~=)
			magic@ "bad magic %x, very weird, breaking\n" Printf
			break
		end

		stotal@ size@ + stotal!
		ept@ size@ + ept!
		1 i +=
	end

	tfree@ talloc@ stotal@ "heap size: 0x%x bytes.\n%d bytes taken, %d bytes free.\n" Printf
end

(* first-fit *)

procedure private Malloc1 { max last sz } (* -- ptr *)
	auto rs
	InterruptDisable rs!

	if (sz@ 0 ==)
		ERR rs@ InterruptRestore return
	end

	auto big
	sz@ KHeapHeader_SIZEOF + 1 - big!

	auto ept
	if (last@ 0 ~=)
		last@ ept!
	end else
		KHeapStart@ ept!
	end

	if (max@ 0 ==)
		KHeapStart@ KHeapSize@ + max!
	end

	while (ept@ max@ <)
		if (ept@ KHeapHeader_magic + @ MAGIC ~=)
			ept@ "Malloc: bad magic on block %x\n" Panic
		end

		auto size
		ept@ KHeapHeader_size + @ size!

		if (ept@ KHeapHeader_allocated + @ 0 ==)
			if (size@ big@ >) (* fit *)

				(*
				  do we need to split this block?
				  or is it just the right size?
				  if we need to split, but there's only enough room
				  for the header or less, then
				  don't even bother splitting.
				*)

				if (big@ 1 + size@ ==) (* just the right size *)
					1 ept@ KHeapHeader_allocated + !
					ept@ KHeapHeader_SIZEOF +

					ept@ KHeapLast!

					rs@ InterruptRestore

					return
				end

				(*
				  we gotta split.
				  is it worth it?
				*)

				auto nsize
				size@ sz@ KHeapHeader_SIZEOF + - nsize!

				if (nsize@ KHeapHeader_SIZEOF >) (* worth *)
					auto nept
					sz@ KHeapHeader_SIZEOF + ept@ + nept!

					nsize@ nept@ KHeapHeader_size + !
					ept@ nept@ KHeapHeader_last + !
					0 nept@ KHeapHeader_allocated + !

					MAGIC nept@ KHeapHeader_magic + !

					sz@ KHeapHeader_SIZEOF + ept@ KHeapHeader_size + !
				end

				1 ept@ KHeapHeader_allocated + !
				ept@ KHeapHeader_SIZEOF +

				ept@ KHeapLast!

				rs@ InterruptRestore

				return
			end
		end

		size@ ept +=
	end

	rs@ InterruptRestore

	ERR return (* no space big enough *)
end

procedure Malloc { sz -- ptr }
	while (sz@ 4 % 0 ~=)
		1 sz +=
	end

	0 KHeapLast@ sz@ Malloc1 ptr!

	if (ptr@ ERR ~=)
		return
	end

	KHeapLast@ 0 sz@ Malloc1 ptr!

	if (ptr@ ERR ~=)
		return
	end

	ERR ptr! return
end

procedure Calloc { sz -- ptr }
	sz@ Malloc ptr!

	if (ptr@ ERR ==)
		ERR ptr!
		return
	end

	ptr@ sz@ 0 memset
end

procedure private HeapMerge { ptr msize -- }
	auto rs
	InterruptDisable rs!

	auto last
	auto next
	auto ns
	auto lsize

	(* check if there are adjacent free blocks to merge into this one *)

	(* check to the left *)

	ptr@ KHeapHeader_last + @ last!

	if (last@ 0 ~=) (* we're not the first block *)
		if (last@ KHeapHeader_magic + @ MAGIC ~=)
			last@ ptr@ "%x: heapmerge left: bad magic on block 0x%x\n" Panic
		end

		if (last@ KHeapHeader_allocated + @ 0 ==) (* free, merge the boyo *)
			if (ptr@ KHeapLast@ ==)
				last@ KHeapLast!
			end

			last@ KHeapHeader_size + @ lsize!

			lsize@ msize@ + ns!

			ns@ last@ KHeapHeader_size + ! (* easy as 1, 2, 3 *)

			last@ ns@ + next!
			if (next@ KHeapStart@ KHeapSize@ + <)
				last@ next@ KHeapHeader_last + ! (* next block points to last *)
			end

			last@ ptr!

			ns@ msize!
		end
	end

	(* check to the right *)

	ptr@ msize@ + next!

	if (next@ KHeapStart@ KHeapSize@ + <) (* we aren't the last block *)
		if (next@ KHeapHeader_magic + @ MAGIC ~=)
			next@ ptr@ "%x: heapmerge right: bad magic on block 0x%x\n" Panic
		end

		if (next@ KHeapHeader_allocated + @ 0 ==) (* free, merge the boyo *)
			if (next@ KHeapLast@ ==)
				ptr@ KHeapLast!
			end

			next@ KHeapHeader_size + @ lsize!

			lsize@ msize@ + ns!

			ptr@ ns@ + next!
			if (next@ KHeapStart@ KHeapSize@ + <) (* next next points to us *)
				ptr@ next@ KHeapHeader_last + !
			end

			ns@ ptr@ KHeapHeader_size + ! (* set OUR size to the combined size *)
		end
	end

	rs@ InterruptRestore
end

procedure Free { ptr -- }
	auto rs
	InterruptDisable rs!

	if (ptr@ 0 == ptr@ ERR == ||)
		ptr@ "tried to free 0x%x!\n" Panic
	end

	auto nptr
	ptr@ KHeapHeader_SIZEOF - nptr!

	if (nptr@ KHeapHeader_magic + @ MAGIC ~=)
		ptr@ "Free: bad magic on block 0x%x\n" Panic
	end

	0 nptr@ KHeapHeader_allocated + !

	auto msize
	nptr@ KHeapHeader_size + @ msize!

	nptr@ msize@ HeapMerge

	rs@ InterruptRestore
end