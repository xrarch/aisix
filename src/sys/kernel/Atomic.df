#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

procedure InitMutex { name mutex -- }
	0 mutex@ Mutex_Locked + !
	0 mutex@ Mutex_OwnerThread + !
	name@ mutex@ Mutex_Name + !
end

procedure LockMutex { mutex -- killed }
	auto rs
	InterruptDisable rs!

	0 killed!

	while (mutex@ Mutex_Locked + @)
		if (CurrentThread@ 0 ==)
			"LockMutex: if we aren't in thread context, we can lock a mutex, but we can't wait on one!\n" Panic
		end

		if (mutex@ Mutex_OwnerThread + @ CurrentThread@ ==)
			auto mn

			"none" mn!

			if (mutex@ Mutex_Name + @)
				mutex@ Mutex_Name + @ mn!
			end

			mn@ "LockMutex: '%s' already owned\n" Panic
		end

		mutex@ Sleep killed!

		if (killed@)
			rs@ InterruptRestore

			return
		end
	end

	1 mutex@ Mutex_Locked + !
	CurrentThread@ mutex@ Mutex_OwnerThread + !

	rs@ InterruptRestore
end

procedure UnlockMutex { mutex -- }
	auto rs
	InterruptDisable rs!

	if (mutex@ Mutex_OwnerThread + @ CurrentThread@ ~=)
		auto mn

		"none" mn!

		if (mutex@ Mutex_Name + @)
			mutex@ Mutex_Name + @ mn!
		end

		mn@ "UnlockMutex: never owned '%s'\n" Panic
	end

	0 mutex@ Mutex_Locked + !
	0 mutex@ Mutex_OwnerThread + !

	mutex@ Wakeup

	rs@ InterruptRestore
end