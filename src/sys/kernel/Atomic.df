#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

fn InitMutex { name mutex -- }
	0 mutex@ Mutex_Locked + !
	0 mutex@ Mutex_OwnerThread + !
	name@ mutex@ Mutex_Name + !
	mutex@ mutex@ Mutex_LockQ + EventQueue_Mutex + !
end

fn MutexOwned { mutex -- owned }
	auto rs
	InterruptDisable rs!

	0 owned!

	if (mutex@ Mutex_Locked + @)
		if (mutex@ Mutex_OwnerThread + @ CurrentThread@ ==)
			1 owned!
		end
	end

	rs@ InterruptRestore
end

extern GetSym { pc -- symbase symname }

fn private LockMutex1 { mutex uninterruptible caller -- killed }
	if (CurrentThread@ Thread_Killed + @)
		if (uninterruptible@ ~~)
			1 killed!
			return
		end
	end

	auto rs
	InterruptDisable rs!

	0 killed!

	while (mutex@ Mutex_Locked + @)
		if (CurrentThread@ 0 ==)
			"LockMutex: if we aren't in thread context, we can lock a mutex, but we can't wait on one!\n" Panic
		end

		if (mutex@ Mutex_OwnerThread + @ CurrentThread@ ==)
			auto mn

			"unknown" mn!

			if (mutex@ Mutex_Name + @)
				mutex@ Mutex_Name + @ mn!
			end

			auto syname

			mutex@ Mutex_Caller + @ GetSym syname! drop

			syname@ mn@ "LockMutex: '%s' already owned, locked at <%s>\n" Panic
		end

		if (uninterruptible@)
			mutex@ Mutex_LockQ + WaitQueueUninterruptible
		end else
			if (mutex@ Mutex_LockQ + WaitQueue)
				1 killed!
				rs@ InterruptRestore
				return
			end
		end
	end

	1 mutex@ Mutex_Locked + !
	CurrentThread@ mutex@ Mutex_OwnerThread + !
	caller@ mutex@ Mutex_Caller + !

	rs@ InterruptRestore
end

asm "

GetCaller:
	lio.l v0, sp, 4
	ret

"

extern GetCaller { -- pc }

fn LockMutex { mutex -- killed }
	mutex@ 0 GetCaller LockMutex1 killed!
end

fn LockMutexUninterruptible { mutex -- }
	mutex@ 1 GetCaller LockMutex1 drop
end

fn UnlockMutex { mutex -- }
	auto rs
	InterruptDisable rs!

	if (mutex@ Mutex_OwnerThread + @ CurrentThread@ ~=)
		auto mn

		"unknown" mn!

		if (mutex@ Mutex_Name + @)
			mutex@ Mutex_Name + @ mn!
		end

		mutex@ Mutex_OwnerThread + @ mn@ "UnlockMutex: never owned '%s', was owned by %x\n" Panic
	end

	0 mutex@ Mutex_Locked + !
	0 mutex@ Mutex_OwnerThread + !

	mutex@ Mutex_LockQ + WakeQueue

	rs@ InterruptRestore
end