#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

extern PMMInit { -- }
extern HeapInit { -- }
extern PlatformInit { -- }
extern ThreadInit { -- }
extern BlockInit { -- }

extern HeapDump { -- }

extern Scheduler { -- }

fn AISIX { ksz args -- ret }
	0 ret!

	"aisix coming up\n" Printf
	ksz@ "kernel image ~%d bytes\n" Printf

	MachineInfo

	PMMInit

	HeapInit

	args@ ArgsInit

	PlatformInit

	BlockInit

	ThreadInit

	Scheduler

	(* the scheduler loop shouldn't return, but if it does, drop back out here *)
end

extern VFSInit { -- }

var Done 0

fn AISIXInitialThread { -- }
	"initial thread was switched to successfully\n" Printf

	VFSInit

	auto buf
	256 Malloc buf!

	auto ret

	auto dev
	"dks1" DevByName dev!

	3 dev@ bread ret!

	if (ret@ iserr)
		ret@ abs ret!
		[ret@]ErrorNames@ "%s\n" Printf
	end else
		ret@ "buf: %x\n" Printf

		ret@ Buffer_Data + @ 255 Gets

		auto ok

		ret@ bwrite ok!

		if (ok@ iserr)
			ok@ abs ok!
			[ok@]ErrorNames@ "%s\n" Printf
		end

		ret@ brelse drop
	end

	3 dev@ bread ret!

	if (ret@ iserr)
		ret@ abs ret!
		[ret@]ErrorNames@ "%s\n" Printf
	end else
		ret@ "buf: %x\n" Printf

		ret@ Buffer_Data + @ 255 Gets

		ret@ bwrite ok!

		if (ok@ iserr)
			ok@ abs ok!
			[ok@]ErrorNames@ "%s\n" Printf
		end

		ret@ brelse drop
	end

	auto bytes

	auto seek

	while (1)
		"bytes to write: " Printf
		buf@ 255 Gets
		buf@ atoi bytes!

		"seek: " Printf
		buf@ 255 Gets
		buf@ atoi seek!

		"path: " Printf
		buf@ 255 Gets

		auto nbuf
		bytes@ Malloc nbuf!

		"write wot: " Printf
		nbuf@ bytes@ 1 - Gets

		buf@ VFSPath ret!

		if (ret@ iserr)
			ret@ abs ret!
			[ret@]ErrorNames@ "%s\n" Printf
		end else
			nbuf@ bytes@ seek@ ret@ VWrite bytes!

			if (bytes@ iserr)
				bytes@ abs bytes!
				[bytes@]ErrorNames@ "%s\n" Printf
			end else
				nbuf@ "%s\n" Printf
			end

			ret@ VNodePut
		end 

		nbuf@ Free
	end
end