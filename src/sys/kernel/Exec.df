#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"
#include "<inc>/loff.h"
#include "<inc>/limnmmu.h"

fn private GetEntry { header vnode -- entry }
	auto entrysym
	header@ LOFFHeader_EntrySymbol + @ entrysym!

	if (entrysym@ 0xFFFFFFFF ==)
		-ENOEXEC entry!
		return
	end

	auto symoff
	header@ LOFFHeader_SymbolTableOffset + @ symoff!

	auto sym
	LOFFSymbol_SIZEOF Malloc sym!

	if (sym@ iserr)
		-ENOMEM entry!
		return
	end

	entrysym@ LOFFSymbol_SIZEOF * symoff +=

	auto bytes

	sym@ LOFFSymbol_SIZEOF symoff@ vnode@ VRead bytes!

	if (bytes@ LOFFSymbol_SIZEOF <)
		if (bytes@ iserr)
			bytes@ entry!
		end else
			-ENOEXEC entry!
		end
		sym@ Free
		return
	end

	sym@ LOFFSymbol_Value + @ entry!

	if (sym@ LOFFSymbol_Type + @ LOFFGLOBAL ~=)
		-ENOEXEC entry!
		sym@ Free
		return
	end

	sym@ Free
end

fn private ParseLOFF { vnode -- textsize textoff datasize dataoff bsssize entry }
	auto header
	LOFFHeader_SIZEOF Malloc header!

	if (header@ iserr)
		-ENOMEM textsize!
		return
	end

	auto bytes

	header@ LOFFHeader_SIZEOF 0 vnode@ VRead bytes!

	if (bytes@ LOFFHeader_SIZEOF <)
		if (bytes@ iserr)
			bytes@ textsize!
		end else
			-ENOEXEC textsize!
		end
		header@ Free
		return
	end

	if (header@ LOFFHeader_Magic + @ LOFFMagic ~=)
		-ENOEXEC textsize!
		header@ Free
		return
	end

	if (header@ LOFFHeader_TargetArchitecture + @ LOFFArch ~=)
		-ENOEXEC textsize!
		header@ Free
		return
	end

	header@ vnode@ GetEntry entry!
	if (entry@ iserr)
		entry@ textsize!
		header@ Free
		return
	end

	auto th
	header@ LOFFHeader_TextHeader + @ th!

	auto dh
	header@ LOFFHeader_DataHeader + @ dh!

	auto bh
	header@ LOFFHeader_BSSHeader + @ bh!

	header@ Free

	LOFFSectionHeader_SIZEOF Malloc header!

	if (header@ iserr)
		-ENOMEM textsize!
		return
	end

	header@ LOFFSectionHeader_SIZEOF th@ vnode@ VRead bytes!

	if (bytes@ LOFFSectionHeader_SIZEOF <)
		if (bytes@ iserr)
			bytes@ textsize!
		end else
			-ENOEXEC textsize!
		end
		header@ Free
		return
	end

	if (header@ LOFFSectionHeader_LinkedAddress + @ TEXT ~=)
		-ENOEXEC textsize!
		header@ Free
		return
	end

	header@ LOFFSectionHeader_SectionOffset + @ textoff!
	header@ LOFFSectionHeader_SectionSize + @ textsize!

	header@ LOFFSectionHeader_SIZEOF dh@ vnode@ VRead bytes!

	if (bytes@ LOFFSectionHeader_SIZEOF <)
		if (bytes@ iserr)
			bytes@ textsize!
		end else
			-ENOEXEC textsize!
		end
		header@ Free
		return
	end

	if (header@ LOFFSectionHeader_LinkedAddress + @ DATA ~=)
		-ENOEXEC textsize!
		header@ Free
		return
	end

	header@ LOFFSectionHeader_SectionOffset + @ dataoff!
	header@ LOFFSectionHeader_SectionSize + @ datasize!

	header@ LOFFSectionHeader_SIZEOF bh@ vnode@ VRead bytes!

	if (bytes@ LOFFSectionHeader_SIZEOF <)
		if (bytes@ iserr)
			bytes@ textsize!
		end else
			-ENOEXEC textsize!
		end
		header@ Free
		return
	end

	(* BSS must be contiguous with DATA *)
	if (header@ LOFFSectionHeader_LinkedAddress + @ datasize@ DATA + ~=)
		-ENOEXEC textsize!
		header@ Free
		return
	end

	header@ LOFFSectionHeader_SectionSize + @ bsssize!

	header@ Free

	if (textsize@ 3 &)
		-ENOEXEC textsize!
		return
	end

	if (datasize@ 3 &)
		-ENOEXEC textsize!
		return
	end

	if (bsssize@ 3 &)
		-ENOEXEC textsize!
		return
	end
end

(* look through udvec and calculate how much memory needs to be appended to the end of
the process's data section in order to accomodate the udata *)
fn private VecSize { udvec udcnt -- bytes }
	udcnt@ UDVec_SIZEOF * bytes! (* make room for table *)

	auto i
	0 i!

	while (i@ udcnt@ <)
		udvec@ UDVec_Size + @ bytes +=

		UDVec_SIZEOF udvec +=
		1 i +=
	end
end

fn private VecCopy { udvec udcnt base ubase -- }
	auto i
	0 i!

	auto data
	udcnt@ UDVec_SIZEOF * base@ + data!

	auto udata
	udcnt@ UDVec_SIZEOF * ubase@ + udata!

	auto sz

	while (i@ udcnt@ <)
		udvec@ UDVec_Size + @ sz!

		sz@ base@ UDVec_Size + !
		udata@ base@ UDVec_Ptr + !

		if (sz@ 0 ~=)
			data@ udvec@ UDVec_Ptr + @ sz@ memcpy
		end

		sz@ data +=
		sz@ udata +=
		UDVec_SIZEOF base +=
		UDVec_SIZEOF udvec +=
		1 i +=
	end
end

fn private LoadLOFF { vnode udvec udcnt -- text udata data textpages datapages entry }
	auto textsize
	auto textoff

	auto datasize
	auto dataoff

	auto bsssize

	vnode@ ParseLOFF entry! bsssize! dataoff! datasize! textoff! textsize!

	if (textsize@ iserr)
		textsize@ text!
	end

	(* start trying to copy sections in and zero BSS *)

	textsize@ textpages!

	if (textpages@ 0xFFF &)
		0x1000 textpages +=
	end

	if (textpages@ 4096 / 0 ==)
		0x1000 textpages!
	end

	textpages@ 4096 / PMMAlloc text!

	if (text@ iserr)
		return
	end

	datasize@ bsssize@ + datapages!

	udvec@ udcnt@ VecSize datapages +=

	if (datapages@ 0xFFF &)
		0x1000 datapages +=
	end

	if (datapages@ 4096 / 0 ==)
		0x1000 datapages!
	end

	datapages@ 4096 / PMMAlloc data!

	if (data@ iserr)
		textpages@ 4096 / text@ PMMFree
		data@ text!
		return
	end

	auto bytes

	text@ textsize@ textoff@ vnode@ VRead bytes!

	if (bytes@ textsize@ <)
		textpages@ 4096 / text@ PMMFree
		datapages@ 4096 / data@ PMMFree
		-ENOEXEC text!
		return
	end

	data@ datasize@ dataoff@ vnode@ VRead bytes!

	if (bytes@ datasize@ <)
		textpages@ 4096 / text@ PMMFree
		datapages@ 4096 / data@ PMMFree
		-ENOEXEC text!
		return
	end

	datasize@ bsssize@ + bytes!

	while (datasize@ bytes@ <)
		0 data@ datasize@ + !

		4 datasize +=
	end

	if (udcnt@)
		bytes@ DATA + udata!

		udvec@ udcnt@ data@ datasize@ + udata@ VecCopy
	end else
		0 udata!
	end
end

fn private VNewProcess1 { vnode name udvec udcnt -- process }
	auto text
	auto data
	auto textpages
	auto datapages
	auto entry

	vnode@ udvec@ udcnt@ LoadLOFF entry! datapages! textpages! data! udvec! text!

	if (text@ iserr)
		text@ process!
		return
	end

	entry@ name@ udvec@ udcnt@ ProcessNew process!

	if (process@ iserr)
		textpages@ 4096 / text@ PMMFree
		datapages@ 4096 / data@ PMMFree
		return
	end

	text@ process@ Process_TextPhysical + !
	textpages@ 4096 / process@ Process_TextPages + !

	data@ process@ Process_DataPhysical + !
	datapages@ 4096 / process@ Process_DataPages + !

	1 process@ Process_Mapped + !

	auto p
	CurrentThread@ Thread_Process + @ p!

	p@ Process_TTY + @ process@ Process_TTY + !

	p@ Process_UID + @ process@ Process_UID + !

	if (vnode@ VNode_Permissions + @ SUID &)
		vnode@ VNode_UID + @ process@ Process_EUID + !
	end else
		p@ Process_UID + @ process@ Process_EUID + !
	end

	p@ process@ Process_Parent + !

	auto cwd

	p@ Process_CWDVNode + @ cwd!

	cwd@ VNodeRef

	cwd@ process@ Process_CWDVNode + !

	process@ Process_CWDPathString + p@ Process_CWDPathString + CWDPATHLEN 1 - strncpy
end

fn VNewProcess { vnode name filp0 filp1 filp2 mode udvec udcnt -- process }
	if (vnode@ VNode_Type + @ VNODE_DIR ==)
		-EISDIR process!
		return
	end

	vnode@ WORLD_X CurrentThread@ Thread_Process + @ Process_UID + @ VForbidden process!

	if (process@ iserr)
		return
	end

	vnode@ name@ udvec@ udcnt@ VNewProcess1 process!

	if (process@ iserr)
		return
	end

	auto p
	CurrentThread@ Thread_Process + @ p!

	auto ofilen
	process@ Process_OFiles + ofilen!

	if (mode@ NP_INHERIT ==)
		auto i
		0 i!

		auto ofile
		p@ Process_OFiles + ofile!

		while (i@ OFILEMAX <)
			if (ofile@@)
				if (ofile@@ FileP_Flags + @ O_CLOEXEC & ~~)
					ofile@@ FDup
					ofile@@ ofilen@!
				end
			end

			4 ofile +=
			4 ofilen +=
			1 i +=
		end
	end elseif (mode@ NP_SPECIFY ==)
		if (filp0@)
			filp0@ FDup
			filp0@ ofilen@ 0 + !
		end

		if (filp1@)
			filp1@ FDup
			filp1@ ofilen@ 4 + !
		end

		if (filp2@)
			filp2@ FDup
			filp2@ ofilen@ 8 + !
		end
	end

	auto ity
	p@ Process_IgnoreTTY + @ ity!

	if (ity@ TTYI_CHILD_ALL &)
		TTYI_ALL process@ Process_IgnoreTTY + !
	end elseif (ity@ TTYI_CHILD_IGN &)
		TTYI_IGN process@ Process_IgnoreTTY + !
	end else
		ity@ process@ Process_IgnoreTTY + !
	end

	p@ Process_UMask + @ process@ Process_UMask + !

	process@ Process_MainThread + @ ThreadReady
end