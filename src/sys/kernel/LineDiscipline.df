(* generic code for tty, ptty, syscon, etc; anything that wants line discipline *)

#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

fn AllocTTY { dev ibuf obuf -- tty }
	TTY_SIZEOF Calloc tty!

	if (tty@ iserr)
		-ENOMEM tty!
		return
	end

	ibuf@ tty@ TTY_IBuffer + !

	pointerof TTYInput ibuf@ IOBuffer_InputF + !

	tty@ ibuf@ IOBuffer_TTY + !

	obuf@ tty@ TTY_OBuffer + !

	dev@ tty@ TTY_Device + !
end

const MAXPRINT 0x7E

table TTYCtrl
	'@'
	'A' 'B' 'C'
	'D' 'E' 'F'
	'G' 'H' 'I'
	'J' 'K' 'L'
	'M' 'N' 'O'
	'P' 'Q' 'R'
	'S' 'T' 'U'
	'V' 'W' 'X'
	'Y' 'Z'
	'['
	'\\'
	']'
	'^'
	'_'
	' '
endtable

fn TTYRubout { ib ob echo -- ro }
	auto c
	ib@ IOBufRubout c!

	if (c@ ERR ==)
		0 ro!
		return
	end

	if (c@ '\n' ==)
		0 ro!
		c@ ib@ 0 IOBufPutc drop
		return
	end

	if (c@ 4 == c@ 3 == ||)
		0 ro!
		c@ ib@ 0 IOBufPutc drop
		return
	end

	1 ro!

	if (echo@)
		if (c@ MAXPRINT >)
			return
		end

		auto rt
		1 rt!

		if (c@ 0x20 <)
			2 rt!
		end

		while (rt@)
			'\b' ob@ 0 IOBufPutc drop
			' ' ob@ 0 IOBufPutc drop
			'\b' ob@ 0 IOBufPutc drop

			1 rt -=
		end
	end
end

externptr TTYKill

(* this is often called from interrupt context,
so NEVER sleep on any IOBufPutc's *)
fn (IOCharInput) TTYInput { c buf -- }
	auto tty
	buf@ IOBuffer_TTY + @ tty!

	auto ob
	tty@ TTY_OBuffer + @ ob!

	auto mode
	tty@ TTY_Mode + @ mode!

	auto noecho
	mode@ TTY_MODE_NOECHO & noecho!

	if (ob@ 0 ==)
		return
	end

	if (c@ '\b' ==)
		buf@ ob@ noecho@ ~~ TTYRubout drop
	end elseif (c@ 21 ==) (* ^U *)
		while (buf@ ob@ noecho@ ~~ TTYRubout) end
	end else
		if (c@ buf@ 0 IOBufPutc 1 ==)
			if (c@ MAXPRINT >)
				return
			end

			if (c@ 0x20 <)
				if (noecho@ ~~)
					if (c@ '\n' ==)
						c@ ob@ 0 IOBufPutc drop
						return
					end

					'^' ob@ 0 IOBufPutc drop
					[c@]TTYCtrl@ ob@ 0 IOBufPutc drop
				end

				if (c@ 3 ==)
					(* defer to scheduler to avoid killing the process we might have interrupted *)
					(* this should work because a human probably wont be typing ^C faster than the
					scheduling frequency but you never know i guess *)
					tty@ TTYKill!
				end
			end elseif (noecho@ ~~)
				c@ ob@ 0 IOBufPutc drop
			end
		end
	end
end

fn TTYRead { pm buf len tty -- bytes }
	auto ib
	tty@ TTY_IBuffer + @ ib!

	if (ib@ ~~)
		-ENOTBLK bytes!
		return
	end

	auto pa
	auto r
	if (buf@ 4095 &)
		pm@ buf@ 1 VMWalk pa! r!

		if (r@ iserr)
			r@ bytes!
			return
		end
	end

	auto rs

	0 bytes!

	while (bytes@ len@ <)
		InterruptDisable rs!

		auto c
		ib@ 1 IOBufGetc c!

		if (c@ iserr)
			rs@ InterruptRestore
			c@ bytes!
			return
		end

		if (c@ 4 ==) (* ^D *)
			if (bytes@ 0 ==)
				rs@ InterruptRestore
				return
			end

			4 ib@ IOBufPutBack

			rs@ InterruptRestore
			return
		end

		rs@ InterruptRestore

		if (c@ 3 ==) (* ^C *)
			continue
		end

		if (buf@ 4095 & 0 ==)
			pm@ buf@ 1 VMWalk pa! r!

			if (r@ iserr)
				r@ bytes!
				return
			end
		end

		c@ pa@ sb
		1 pa +=
		1 buf +=
		1 bytes +=

		if (c@ '\n' ==)
			return
		end
	end
end

fn TTYWrite { pm buf len tty -- bytes }
	auto ob
	tty@ TTY_OBuffer + @ ob!

	if (ob@ ~~)
		-ENOTBLK bytes!
		return
	end

	0 bytes!

	auto pa
	auto r
	if (buf@ 4095 &)
		pm@ buf@ 0 VMWalk pa! r!

		if (r@ iserr)
			r@ bytes!
			return
		end
	end

	while (bytes@ len@ <)
		if (buf@ 4095 & 0 ==)
			pm@ buf@ 0 VMWalk pa! r!

			if (r@ iserr)
				r@ bytes!
				return
			end
		end

		pa@ gb ob@ 1 IOBufPutc r!

		if (r@ iserr)
			r@ bytes!
			return
		end

		1 pa +=
		1 buf +=
		1 bytes +=
	end
end

fn TTYIOCtl { pm op1 op2 op3 op4 tty -- ok }
	auto kinfo

	if (op1@ TTY_IOCTL_INFO ==)
		TTYInfo_SIZEOF Calloc kinfo!

		if (kinfo@ iserr)
			kinfo@ ok!
			return
		end

		tty@ TTY_Width + @ kinfo@ TTYInfo_Width + !
		tty@ TTY_Height + @ kinfo@ TTYInfo_Height + !
		tty@ TTY_Mode + @ kinfo@ TTYInfo_Mode + !

		pm@ op2@ kinfo@ TTYInfo_SIZEOF VMCopyout ok!

		kinfo@ Free
	end elseif (op1@ TTY_IOCTL_SET ==)
		TTYInfo_SIZEOF Calloc kinfo!

		if (kinfo@ iserr)
			kinfo@ ok!
			return
		end

		pm@ kinfo@ op2@ TTYInfo_SIZEOF VMCopyin ok!

		if (ok@ iserr)
			return
		end

		kinfo@ TTYInfo_Mode + @ tty@ TTY_Mode + !

		kinfo@ Free
	end else
		-ENOTBLK ok!
	end
end