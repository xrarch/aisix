#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

table AISIXFSTab
	"aisixfs"
	pointerof AISIXFSMount
	pointerof AISIXFSGetNode
	pointerof AISIXFSPutNode
	pointerof AISIXFSSync
	pointerof AISIXFSRewindDir
	pointerof AISIXFSReadDir
	pointerof AISIXFSUnmount
	pointerof AISIXFSRead
	pointerof AISIXFSWrite
	pointerof AISIXFSCreate
	pointerof AISIXFSRename
	pointerof AISIXFSUnlink
	pointerof AISIXFSTrunc
	pointerof AISIXFSDelete
endtable
public AISIXFSTab

const SuperblockNo 0x0
const SuperblockMagic 0xAFBBAFBB
const SuperblockVersion 0x6

struct AFSData
	4 FATStart
	4 FATSize
	4 IStart
	4 ICount
	4 VolSize
	4 LastFreeBlock
endstruct

struct AVData
	4 Entry
	4 BNCache
	4 FirstBN
	4 NextBN
endstruct

struct Superblock
	4 Version
	4 Magic
	4 Dirty
	4 NumReservedBlocks
	4 FATStart
	4 FATSize
	4 IStart
	4 ICount
	4 DataStart
	4 DataSize
	4 VolSize
endstruct

struct DirEnt
	4 INum
	60 name
endstruct

struct INode
	4 type
	4 permissions
	4 uid
	4 iparent
	4 timestamp
	4 startblock
	4 reserved2
	4 bytesize
endstruct

fn private BAlloc { link mount prefatbuf -- buf }
	auto fsd
	mount@ Mount_FSData + @ fsd!

	auto lfb
	fsd@ AFSData_LastFreeBlock + @ lfb!

	auto i
	lfb@ i!

	auto top
	fsd@ AFSData_VolSize + @ top!

	auto bn

	auto prefatbn

	if (prefatbuf@)
		prefatbuf@ Buffer_BlockNum + @ prefatbn!
	end else
		-1 prefatbn!
	end

	auto fatb

	lfb@ 1024 / mount@ Mount_FSData + @ AFSData_FATStart + @ + fatb!

	0 buf!

	if (lfb@ 1024 %)
		if (fatb@ prefatbn@ ~=)
			fatb@ mount@ Mount_Device + @ bread buf!

			if (buf@ iserr)
				return
			end
		end else
			prefatbuf@ buf!
		end
	end

	auto search
	0 search!

	while (1)
		if (i@ top@ ==)
			if (search@)
				break
			end else
				1 search!
				mount@ Mount_FSData + @ AFSData_FATStart + @ fatb!
				lfb@ 1 + top!
				0 i!
			end
		end

		if (i@ 1024 % 0 ==)
			if (buf@)
				if (buf@ prefatbuf@ ~=)
					buf@ brelse
				end
			end

			i@ 1024 / mount@ Mount_FSData + @ AFSData_FATStart + @ + fatb!

			if (fatb@ prefatbn@ ~=)
				fatb@ mount@ Mount_Device + @ bread buf!

				if (buf@ iserr)
					return
				end
			end else
				prefatbuf@ buf!
			end
		end

		buf@ Buffer_Data + @ i@ 4 * 4096 % + @ bn!

		auto rq

		if (bn@ 0 ==)
			i@ mount@ Mount_Device + @ bread rq!

			if (rq@ iserr)
				if (buf@ prefatbuf@ ~=)
					buf@ brelse
				end

				rq@ buf!
				return
			end

			(* allocate *)
			link@ buf@ Buffer_Data + @ i@ 4 * 4096 % + !

			buf@ bwrite

			if (buf@ prefatbuf@ ~=)
				buf@ brelse
			end

			rq@ buf!

			buf@ Buffer_Data + @ 4096 0 memset

			buf@ bwrite

			i@ fsd@ AFSData_LastFreeBlock + !

			return
		end

		1 i +=
	end

	if (buf@)
		if (buf@ prefatbuf@ ~=)
			buf@ brelse
		end
	end

	-ENOSPC buf!
end

fn private UpdateNode { vnode -- ok }
	0 ok!

	auto vd
	vnode@ VNode_FSData + @ vd!

	if (vnode@ VNode_Dirty + @ ~~)
		return
	end

	auto vnid

	vnode@ VNode_VNID + @ vnid!

	(* vnid@ vnode@ "afs: update ptr=0x%x vnid=0x%x\n" Printf *)

	auto block
	auto off

	auto inode

	vnid@ INode_SIZEOF * off!

	auto mount
	vnode@ VNode_Mount + @ mount!

	mount@ Mount_FSData + @ AFSData_IStart + @ off@ 4096 / + block!

	auto buf
	block@ mount@ Mount_Device + @ bread buf!

	if (buf@ iserr)
		buf@ ok!
		return
	end

	buf@ Buffer_Data + @ off@ 4096 % + inode!

	vnode@ VNode_Size + @ inode@ INode_bytesize + !
	vd@ AVData_Entry + @ inode@ INode_startblock + !
	vnode@ VNode_DirParentVNID + @ inode@ INode_iparent + !
	vnode@ VNode_Permissions + @ inode@ INode_permissions + !
	vnode@ VNode_UID + @ inode@ INode_uid + !
	vnode@ VNode_Timestamp + @ inode@ INode_timestamp + !

	buf@ bwrite

	0 vnode@ VNode_Dirty + !

	buf@ brelse
end

fn private WalkFAT { ent count reading vnode cache -- b }
	auto mount
	vnode@ VNode_Mount + @ mount!

	auto vd
	vnode@ VNode_FSData + @ vd!

	auto fb
	vd@ AVData_FirstBN + @ fb!

	auto bm
	vd@ AVData_BNCache + @ vd@ AVData_NextBN + @ fb@ - 4 * + bm!

	auto buf

	auto dev
	mount@ Mount_Device + @ dev!

	if (ent@ 0xFFFFFFFF ==)
		if (reading@)
			"balloc entry on read\n" Panic
		end

		0xFFFFFFFF mount@ 0 BAlloc b!

		if (b@ iserr)
			return
		end

		b@ Buffer_BlockNum + @ ent! 

		b@ brelse

		ent@ vnode@ VNode_FSData + @ AVData_Entry + !

		if (cache@)
			if (fb@ 0 ==)
				ent@ bm@ !
				4 bm +=
			end else
				"balloc fb != 0\n" Panic
			end
		end
	end

	ent@ b!

	auto fatb
	b@ 1024 / fatb!

	auto fatbuf
	fatb@ mount@ Mount_FSData + @ AFSData_FATStart + @ + mount@ Mount_Device + @ bread fatbuf!

	if (fatbuf@ iserr)
		fatbuf@ b!
		return
	end

	auto i
	0 i!

	while (i@ count@ <)
		if (b@ 1024 / fatb@ ~=)
			fatbuf@ brelse

			b@ 1024 / fatb!

			fatb@ mount@ Mount_FSData + @ AFSData_FATStart + @ + mount@ Mount_Device + @ bread fatbuf!

			if (fatbuf@ iserr)
				fatbuf@ b!
				return
			end
		end

		fatbuf@ Buffer_Data + @ b@ 4 * 4096 % + @ ent!

		if (ent@ 0xFFFFFFFF ==)
			if (reading@)
				i@ "balloc on read: %d\n" Panic
			end

			0xFFFFFFFF mount@ fatbuf@ BAlloc buf!

			if (buf@ iserr)
				fatbuf@ brelse
				buf@ b!
				return
			end

			buf@ Buffer_BlockNum + @ ent!

			buf@ brelse

			ent@ fatbuf@ Buffer_Data + @ b@ 4 * 4096 % + !

			fatbuf@ bwrite
		end

		if (cache@)
			ent@ bm@ !
			4 bm +=
		end

		ent@ b!

		1 i +=
	end

	fatbuf@ brelse
end

fn private BMap { bn reading vnode -- buf }
	auto vd
	vnode@ VNode_FSData + @ vd!

	auto fb
	vd@ AVData_FirstBN + @ fb!

	auto nb
	vd@ AVData_NextBN + @ nb!

	auto bm
	vd@ AVData_BNCache + @ bm!

	if (bm@ 0 ==)
		1 PMMAlloc bm!

		if (bm@ iserr)
			bm@ buf!
			return
		end

		vd@ AVData_Entry + @ bm@ !

		bm@ vd@ AVData_BNCache + !
	end

	auto bno
	auto cnt
	auto cache

	if (bn@ fb@ >= bn@ nb@ < &&)
		bn@ fb@ - 4 * bm@ + @ bno!
	end else
		if (bn@ fb@ < nb@ 0 == ||)
			vd@ AVData_Entry + @ bno!
			bn@ cnt!
			0 cache!
		end elseif (bn@ nb@ >=)
			nb@ 1 - fb@ - 4 * bm@ + @ bno!
			bn@ nb@ - 1 + cnt!

			if (bn@ fb@ - 1024 <)
				bn@ 1 + nb!
				1 cache!
			end else
				0 cache!
			end
		end else
			"BMap: im bad at math\n" Panic
		end

		bno@ cnt@ reading@ vnode@ cache@ WalkFAT bno!

		if (bno@ iserr)
			0 vd@ AVData_FirstBN + !
			0 vd@ AVData_NextBN + !

			bno@ buf!
			return
		end

		if (cache@)
			nb@ vd@ AVData_NextBN + !
		end else
			bn@ fb!
			bn@ 1 + nb!
			fb@ vd@ AVData_FirstBN + !
			nb@ vd@ AVData_NextBN + !

			bno@ bm@ !
		end
	end

	bno@ vnode@ VNode_Mount + @ Mount_Device + @ bread buf!
end

fn private TruncNode { vnode -- ok }
	auto vd
	vnode@ VNode_FSData + @ vd!

	auto ent
	vd@ AVData_Entry + @ ent!

	auto mount
	vnode@ VNode_Mount + @ mount!

	0 vd@ AVData_FirstBN + !
	0 vd@ AVData_NextBN + !

	0 vnode@ VNode_Size + !
	0xFFFFFFFF vd@ AVData_Entry + !
	1 vnode@ VNode_Dirty + !

	auto fatbuf
	0 fatbuf!

	auto fatbn
	-1 fatbn!

	auto le

	while (ent@ 0xFFFFFFFF ~=)
		ent@ le!

		if (ent@ 1024 / fatbn@ ~=)
			if (fatbuf@)
				fatbuf@ brelse
			end

			ent@ 1024 / fatbn!

			fatbn@ mount@ Mount_FSData + @ AFSData_FATStart + @ + mount@ Mount_Device + @ bread fatbuf!

			if (fatbuf@ iserr)
				fatbuf@ ok!
				return
			end
		end

		fatbuf@ Buffer_Data + @ ent@ 4 * 4096 % + @ ent!

		0 fatbuf@ Buffer_Data + @ le@ 4 * 4096 % + !

		fatbuf@ bwrite
	end

	if (fatbuf@)
		fatbuf@ brelse
	end

	0 ok!
end

fn (FSTrunc) AISIXFSTrunc { vnode -- ok }
	if (vnode@ VNode_Type + @ VNODE_DIR ==)
		-EISDIR ok!
		return
	end

	vnode@ TruncNode ok!
end

fn (FSRead) AISIXFSRead { buf len seek vnode -- bytes }
	if (vnode@ VNode_Type + @ VNODE_DIR ==)
		-EISDIR bytes!
		return
	end

	if (seek@ 0 s<)
		0 bytes!
		return
	end

	if (len@ 0 s<=)
		0 bytes!
		return
	end

	if (vnode@ VNodeLock)
		-EINTR bytes!
		return
	end

	if (seek@ vnode@ VNode_Size + @ >=)
		vnode@ VNodeUnlock
		0 bytes!
		return
	end

	if (seek@ len@ + vnode@ VNode_Size + @ >)
		vnode@ VNode_Size + @ seek@ - len!
	end

	auto tot
	0 tot!

	while (tot@ len@ <)
		auto bbuf
		seek@ 4096 / 1 vnode@ BMap bbuf!

		if (bbuf@ iserr)
			bbuf@ bytes!
			vnode@ VNodeUnlock
			return
		end

		auto m
		len@ tot@ -
		4096 seek@ 4096 % -
		min m!

		buf@
		bbuf@ Buffer_Data + @ seek@ 4096 % +
		m@ memcpy

		bbuf@ brelse

		m@ buf +=
		m@ seek +=
		m@ tot +=
	end

	vnode@ VNodeUnlock

	len@ bytes!
end

fn (FSWrite) AISIXFSWrite { buf len seek vnode -- bytes }
	if (seek@ 0 s<)
		0 bytes!
		return
	end

	if (len@ 0 s<=)
		0 bytes!
		return
	end

	if (vnode@ VNodeLock)
		-EINTR bytes!
		return
	end

	if (seek@ vnode@ VNode_Size + @ >)
		vnode@ VNodeUnlock
		0 bytes!
		return
	end

	auto tot
	0 tot!

	auto r

	while (tot@ len@ <)
		auto bbuf
		seek@ 4096 / 0 vnode@ BMap bbuf!

		if (bbuf@ iserr)
			bbuf@ bytes!
			vnode@ VNodeUnlock
			return
		end

		auto m
		len@ tot@ -
		4096 seek@ 4096 % -
		min m!

		bbuf@ Buffer_Data + @ seek@ 4096 % +
		buf@
		m@ memcpy

		bbuf@ bwrite

		bbuf@ brelse

		m@ buf +=
		m@ seek +=
		m@ tot +=
	end

	if (seek@ vnode@ VNode_Size + @ >)
		seek@ vnode@ VNode_Size + !
		1 vnode@ VNode_Dirty + !
	end

	len@ bytes!

	vnode@ VNodeUnlock
end

fn private IAlloc { mount -- inum ino buf }
	auto istart
	mount@ Mount_FSData + @ AFSData_IStart + @ istart!

	auto icount
	mount@ Mount_FSData + @ AFSData_ICount + @ icount!

	if (icount@ 1 <=)
		"afs: icount<=1\n" Panic
	end

	auto dev
	mount@ Mount_Device + @ dev!

	auto p
	0 p!

	0 buf!

	0 inum!

	while (inum@ icount@ <)
		if (p@ 4096 % ~~)
			if (buf@)
				buf@ brelse
			end

			p@ 4096 / istart@ + dev@ bread buf!

			if (buf@ iserr)
				return
			end
		end

		(* never allocate inode 0 *)
		if (inum@ 0 ==)
			INode_SIZEOF p +=
			1 inum +=
			continue
		end

		buf@ Buffer_Data + @ p@ 4096 % + ino!

		if (ino@ INode_type + @ 0 ==)
			(* unused inode *)
			return
		end

		INode_SIZEOF p +=
		1 inum +=
	end

	if (buf@)
		buf@ brelse
	end

	-ENOSPC buf!
end

fn private DirentAlloc { vnode -- dirent buf }
	auto sz
	vnode@ VNode_Size + @ sz!

	auto p
	0 p!

	0 buf!

	while (1)
		if (p@ 4096 % ~~)
			if (buf@)
				buf@ brelse
			end

			p@ 4096 / 0 vnode@ BMap buf!

			if (buf@ iserr)
				return
			end
		end

		if (p@ DirEnt_SIZEOF + sz@ >)
			p@ DirEnt_SIZEOF + sz!
			sz@ vnode@ VNode_Size + !
			1 vnode@ VNode_Dirty + !
		end

		buf@ Buffer_Data + @ p@ 4096 % + dirent!

		if (dirent@ DirEnt_INum + @ ~~)
			(* unused directory entry *)
			return
		end

		DirEnt_SIZEOF p +=
	end

	if (buf@)
		buf@ brelse
	end
end

fn (FSCreate) AISIXFSCreate { dirvnode name type uid permissions -- vnid }
	if (name@ "." strcmp)
		-EEXIST vnid!
		return
	end

	if (name@ ".." strcmp)
		-EEXIST vnid!
		return
	end

	auto dirent
	auto ino

	auto debuf
	dirvnode@ DirentAlloc debuf! dirent!

	if (debuf@ 0 ==)
		"AFSCreate: DirentAlloc\n" Panic
	end

	if (debuf@ iserr)
		debuf@ vnid!
		return
	end

	auto ibuf
	dirvnode@ VNode_Mount + @ IAlloc ibuf! ino! vnid!

	if (ibuf@ 0 ==)
		"AFSCreate: IAlloc\n" Panic
	end

	if (ibuf@ iserr)
		debuf@ brelse
		ibuf@ vnid!
		return
	end

	dirent@ DirEnt_name + name@ 59 strncpy
	vnid@ dirent@ DirEnt_INum + !

	if (type@ VNODE_DIR ==)
		2 ino@ INode_type + !
	end else
		1 ino@ INode_type + !
	end

	dirvnode@ VNode_VNID + @ ino@ INode_iparent + !

	uid@ ino@ INode_uid + !
	permissions@ ino@ INode_permissions + !
	0 ino@ INode_timestamp + !
	0 ino@ INode_bytesize + !
	0xFFFFFFFF ino@ INode_startblock + !

	ibuf@ bwrite
	debuf@ bwrite

	ibuf@ brelse
	debuf@ brelse
end

fn (FSRename) AISIXFSRename { srcdirvnode srcname destdirvnode destname -- ok }
	-EPERM ok!
end

fn private HasEntries { vnode -- has }
	0 has!

	auto sz
	vnode@ VNode_Size + @ sz!

	auto p
	0 p!

	auto buf
	0 buf!

	auto dirent

	while (p@ sz@ <)
		if (p@ 4096 % ~~)
			if (buf@)
				buf@ brelse
			end

			p@ 4096 / 1 vnode@ BMap buf!

			if (buf@ iserr)
				buf@ has!
				return
			end
		end

		buf@ Buffer_Data + @ p@ 4096 % + dirent!

		if (dirent@ DirEnt_INum + @)
			buf@ brelse
			-EISDIR has!
			return
		end

		DirEnt_SIZEOF p +=
	end

	if (buf@)
		buf@ brelse
	end
end

fn (FSUnlink) AISIXFSUnlink { dirvnode vnode name -- ok }
	if (name@ "." strcmp)
		-EINVAL ok!
		return
	end

	if (name@ ".." strcmp)
		-EINVAL ok!
		return
	end

	if (name@ gb 0 ==)
		-EINVAL ok!
		return
	end

	if (vnode@ VNode_Type + @ VNODE_DIR ==)
		vnode@ HasEntries ok!

		if (ok@ iserr)
			return
		end
	end

	0 ok!

	auto sz
	dirvnode@ VNode_Size + @ sz!

	auto p
	0 p!

	auto buf
	0 buf!

	auto dirent

	auto found
	0 found!

	while (p@ sz@ <)
		if (p@ 4096 % ~~)
			if (buf@)
				buf@ brelse
			end

			p@ 4096 / 1 dirvnode@ BMap buf!

			if (buf@ iserr)
				buf@ ok!
				return
			end
		end

		buf@ Buffer_Data + @ p@ 4096 % + dirent!

		if (dirent@ DirEnt_INum + @)
			if (dirent@ DirEnt_name + name@ strcmp)
				1 found!
				break
			end
		end

		DirEnt_SIZEOF p +=
	end

	if (found@ ~~) (* then how did we get here at all??? *)
		"afs: unlink\n" Panic
	end

	0 dirent@ DirEnt_INum + !

	0 ok!

	buf@ bwrite

	buf@ brelse

	1 vnode@ VNode_DeleteLastRef + !
end

fn (FSDelete) AISIXFSDelete { vnode -- ok }
	vnode@ TruncNode ok!

	auto vnid

	vnode@ VNode_VNID + @ vnid!

	(* vnid@ vnode@ "afs: kill ptr=0x%x vnid=0x%x\n" Printf *)

	auto block
	auto off

	auto inode

	vnid@ INode_SIZEOF * off!

	auto mount
	vnode@ VNode_Mount + @ mount!

	mount@ Mount_FSData + @ AFSData_IStart + @ off@ 4096 / + block!

	auto buf
	block@ mount@ Mount_Device + @ bread buf!

	if (buf@ iserr)
		buf@ ok!
		return
	end

	buf@ Buffer_Data + @ off@ 4096 % + inode!

	0 inode@ INode_type + !

	0 ok!

	buf@ bwrite

	buf@ brelse
end

fn (FSMount) AISIXFSMount { mount -- root }
	auto dev
	mount@ Mount_Device + @ dev!

	if (dev@ ~~)
		-ENODEV root!
		return
	end

	auto buf

	SuperblockNo dev@ bread buf!

	if (buf@ iserr)
		buf@ root!
		return
	end

	auto sblock
	buf@ Buffer_Data + @ sblock!

	if (sblock@ Superblock_Magic + @ SuperblockMagic ~=)
		buf@ brelse
		-EPERM root!
		return
	end

	if (sblock@ Superblock_Version + @ SuperblockVersion ~=)
		buf@ brelse
		-EPERM root!
		return
	end

	auto fsdata
	AFSData_SIZEOF Malloc fsdata!

	if (fsdata@ iserr)
		buf@ brelse
		-ENOMEM root!
		return
	end

	sblock@ Superblock_FATStart + @ fsdata@ AFSData_FATStart + !
	sblock@ Superblock_FATSize + @ fsdata@ AFSData_FATSize + !
	sblock@ Superblock_IStart + @ fsdata@ AFSData_IStart + !
	sblock@ Superblock_ICount + @ fsdata@ AFSData_ICount + !
	sblock@ Superblock_VolSize + @ fsdata@ AFSData_VolSize + !
	0 fsdata@ AFSData_LastFreeBlock + !

	buf@ brelse

	fsdata@ mount@ Mount_FSData + !

	1 mount@ VNodeNew root!

	if (root@ iserr)
		fsdata@ Free
		return
	end

	root@ AISIXFSGetNode buf!

	if (buf@ iserr)
		root@ VNodePut
		fsdata@ Free
		buf@ root!
		return
	end
end

fn (FSUnmount) AISIXFSUnmount { mount -- ok }
	mount@ Mount_FSData + @ Free

	0 ok!
end

fn (FSGetNode) AISIXFSGetNode { vnode -- ok }
	auto vnid
	vnode@ VNode_VNID + @ vnid!

	auto mount
	vnode@ VNode_Mount + @ mount!

	auto fsd
	mount@ Mount_FSData + @ fsd!

	auto vd
	AVData_SIZEOF Calloc vd!

	if (vd@ iserr)
		-ENOMEM ok!

		return
	end

	vd@ vnode@ VNode_FSData + !

	0 vnode@ VNode_Dirty + !

	auto block
	auto off

	auto inode

	vnid@ INode_SIZEOF * off!

	mount@ Mount_FSData + @ AFSData_IStart + @ off@ 4096 / + block!

	auto buf
	block@ mount@ Mount_Device + @ bread buf!

	if (buf@ iserr)
		vd@ Free
		buf@ ok!
		return
	end

	buf@ Buffer_Data + @ off@ 4096 % + inode!

	if (inode@ INode_type + @ 1 ==)
		VNODE_FILE vnode@ VNode_Type + !
	end elseif (inode@ INode_type + @ 2 ==)
		VNODE_DIR vnode@ VNode_Type + !
	end else
		"afs: bad inode type\n" Panic
		(* scared !! *)
		VNODE_FILE vnode@ VNode_Type + !
		0 vnode@ VNode_Size + !
		return
	end

	inode@ INode_bytesize + @ vnode@ VNode_Size + !
	inode@ INode_startblock + @ vd@ AVData_Entry + !
	inode@ INode_iparent + @ vnode@ VNode_DirParentVNID + !
	inode@ INode_permissions + @ vnode@ VNode_Permissions + !
	inode@ INode_uid + @ vnode@ VNode_UID + !
	0 vnode@ VNode_GID + !
	inode@ INode_timestamp + @ vnode@ VNode_Timestamp + !

	buf@ brelse

	0 vd@ AVData_BNCache + !
	0 vd@ AVData_FirstBN + !
	0 vd@ AVData_NextBN + !

	0 ok!
end

fn (FSPutNode) AISIXFSPutNode { vnode -- ok }
	vnode@ UpdateNode ok!

	if (vnode@ VNode_FSData + @ AVData_BNCache + @)
		1 vnode@ VNode_FSData + @ AVData_BNCache + @ PMMFree
	end

	vnode@ VNode_FSData + @ Free
end

fn (FSRewindDir) AISIXFSRewindDir { dirent -- ok }
	0 ok!

	0 dirent@ VDirent_Index + !
end

fn (FSReadDir) AISIXFSReadDir { dirent -- ok }
	auto dirvn
	dirent@ VDirent_DirVNode + @ dirvn!

	auto sz
	dirvn@ VNode_Size + @ sz!

	auto index
	dirent@ VDirent_Index + @ index!

	auto buf
	0 buf!

	if (index@ 4096 %)
		index@ 4096 / 0 dirvn@ BMap buf!

		if (buf@ iserr)
			buf@ ok!
			return
		end
	end

	while (index@ sz@ <)
		if (index@ 4096 % ~~)
			if (buf@)
				buf@ brelse
			end

			index@ 4096 / 1 dirvn@ BMap buf!

			if (buf@ iserr)
				buf@ ok!
				return
			end
		end

		auto ent
		buf@ Buffer_Data + @ index@ 4096 % + ent!

		if (ent@ DirEnt_INum + @)
			index@ DirEnt_SIZEOF + dirent@ VDirent_Index + !

			ent@ DirEnt_INum + @ dirent@ VDirent_VNID + !

			auto name
			60 Calloc name!

			name@ ent@ DirEnt_name + 59 strncpy

			name@ dirent@ VDirent_Name + !

			name@ dirent@ VDirent_Cookie + !

			buf@ brelse

			0 ok!
			return
		end

		DirEnt_SIZEOF index +=
	end

	index@ dirent@ VDirent_Index + !

	if (buf@)
		buf@ brelse
	end

	-ENOENT ok!
end

fn (FSSync) AISIXFSSync { vnode -- ok }
	vnode@ UpdateNode ok!
end