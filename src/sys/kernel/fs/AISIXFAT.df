#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

table AISIXFSTab
	"aisixfs"
	pointerof AISIXFSMount
	pointerof AISIXFSGetNode
	pointerof AISIXFSPutNode
	pointerof AISIXFSSync
	pointerof AISIXFSRewindDir
	pointerof AISIXFSReadDir
	pointerof AISIXFSUnmount
	pointerof AISIXFSRead
	pointerof AISIXFSWrite
	pointerof AISIXFSCreate
	pointerof AISIXFSRename
	pointerof AISIXFSDelete
	pointerof AISIXFSTrunc
endtable
public AISIXFSTab

const SuperblockNo 0x0
const SuperblockMagic 0xAFBBAFBB
const SuperblockVersion 0x6

struct AFSData
	4 FATStart
	4 FATSize
	4 IStart
	4 ICount
	4 VolSize
endstruct

struct AVData
	4 Entry
	4 Dirty
	4 IParent
endstruct

struct Superblock
	4 Version
	4 Magic
	4 Dirty
	4 NumReservedBlocks
	4 FATStart
	4 FATSize
	4 IStart
	4 ICount
	4 DataStart
	4 DataSize
	4 VolSize
endstruct

struct DirEnt
	4 INum
	60 name
endstruct

struct INode
	4 type
	4 permissions
	4 uid
	4 iparent
	4 timestamp
	4 startblock
	4 reserved2
	4 bytesize
endstruct

fn private GetBlockStatus { block mount -- ok status }
	auto fb
	block@ 4 * 4096 / fb!
	mount@ Mount_FSData + @ AFSData_FATStart + @ fb +=

	fb@ mount@ Mount_Device + @ bread fb!

	if (fb@ iserr)
		fb@ ok!
		return
	end

	fb@ Buffer_Data + @ block@ 4 * + @ status!

	if (fb@ brelse)
		-EINTR ok!
		return
	end

	0 ok!
end

fn private SetBlockStatus { status block mount -- ok }
	auto fb
	block@ 4 * 4096 / fb!
	mount@ Mount_FSData + @ AFSData_FATStart + @ fb +=

	fb@ mount@ Mount_Device + @ bread fb!

	if (fb@ iserr)
		fb@ ok!
		return
	end

	status@ fb@ Buffer_Data + @ block@ 4 * + !

	fb@ bwrite ok!
	if (ok@ iserr)
		fb@ brelse drop
		return
	end

	fb@ brelse drop

	0 ok!
end

fn private BAlloc { link mount -- buf }
	auto bs
	mount@ Mount_FSData + @ AFSData_VolSize + @ bs!

	auto i
	0 i!

	auto bn

	auto r

	auto rs

	while (i@ bs@ <)
		InterruptDisable rs!
		i@ mount@ GetBlockStatus bn! r!

		if (r@ iserr)
			rs@ InterruptRestore
			r@ buf!
			return
		end

		if (bn@ 0 ==)
			(* allocate *)
			link@ i@ mount@ SetBlockStatus r!
			rs@ InterruptRestore

			if (r@ iserr)
				r@ buf!
				return
			end

			i@ mount@ Mount_Device + @ bread buf!

			if (buf@ iserr)
				0 i@ mount@ SetBlockStatus drop
				return
			end

			buf@ Buffer_Data + @ 4096 0 memset

			buf@ bwrite r!

			if (r@ iserr)
				0 i@ mount@ SetBlockStatus drop
				buf@ brelse drop
				r@ buf!
				return
			end

			return
		end else
			rs@ InterruptRestore
		end

		1 i +=
	end

	-ENOSPC buf!
end

fn private BFree { block mount -- ok }
	0 block@ mount@ SetBlockStatus ok!
end

fn private UpdateNode { vnode -- ok }
	0 ok!

	auto vd
	vnode@ VNode_FSData + @ vd!

	if (vd@ AVData_Dirty + @ ~~)
		return
	end

	auto vnid

	vnode@ VNode_VNID + @ vnid!

	vnid@ vnode@ "afs: update ptr=0x%x vnid=0x%x\n" Printf

	auto block
	auto off

	auto inode

	vnid@ INode_SIZEOF * off!

	auto mount
	vnode@ VNode_Mount + @ mount!

	mount@ Mount_FSData + @ AFSData_IStart + @ off@ 4096 / + block!

	auto buf
	block@ mount@ Mount_Device + @ bread buf!

	if (buf@ iserr)
		buf@ ok!
		return
	end

	buf@ Buffer_Data + @ off@ 4096 % + inode!

	vnode@ VNode_Size + @ inode@ INode_bytesize + !
	vd@ AVData_Entry + @ inode@ INode_startblock + !
	vd@ AVData_IParent + @ inode@ INode_iparent + !
	vnode@ VNode_Permissions + @ inode@ INode_permissions + !
	vnode@ VNode_UID + @ inode@ INode_uid + !

	buf@ bwrite ok!

	if (ok@ iserr)
		buf@ brelse drop
		return
	end

	0 vd@ AVData_Dirty + !

	if (buf@ brelse)
		-EINTR ok!
		return
	end
end

fn private BMap { bn reading vnode -- buf }
	auto mount
	vnode@ VNode_Mount + @ mount!

	auto ent
	vnode@ VNode_FSData + @ AVData_Entry + @ ent!

	auto dev
	mount@ Mount_Device + @ dev!

	if (ent@ 0xFFFFFFFF ==)
		if (reading@)
			"balloc entry on read\n" Panic
		end

		0xFFFFFFFF mount@ BAlloc buf!

		if (buf@ iserr)
			return
		end

		buf@ Buffer_BlockNum + @ ent! 

		if (buf@ brelse)
			-EINTR buf!
			return
		end

		ent@ vnode@ VNode_FSData + @ AVData_Entry + !
	end

	auto b
	ent@ b!

	auto t

	auto i
	0 i!

	while (i@ bn@ <)
		b@ mount@ GetBlockStatus ent! t!

		if (t@ iserr)
			t@ buf!
			return
		end

		if (ent@ 0xFFFFFFFF ==)
			if (reading@)
				"balloc on read\n" Panic
			end

			0xFFFFFFFF mount@ BAlloc buf!

			if (buf@ iserr)
				return
			end

			buf@ Buffer_BlockNum + @ ent!

			if (buf@ brelse)
				-EINTR buf!
				return
			end

			ent@ b@ mount@ SetBlockStatus t!

			if (t@ iserr)
				return
			end
		end

		ent@ b!

		1 i +=
	end

	b@ dev@ bread buf!
end

fn private TruncNode { vnode -- ok }
	auto vd
	vnode@ VNode_FSData + @ vd!

	auto ent
	vd@ AVData_Entry + @ ent!

	auto mount
	vnode@ VNode_Mount + @ mount!

	auto le

	while (ent@ 0xFFFFFFFF ~=)
		ent@ le!

		ent@ mount@ GetBlockStatus ent! ok!

		if (ok@ iserr)
			return
		end

		le@ mount@ BFree ok!

		if (ok@ iserr)
			return
		end
	end

	0 vnode@ VNode_Size + !
	0xFFFFFFFF vd@ AVData_Entry + !
	1 vd@ AVData_Dirty + !
end

fn (FSTrunc) AISIXFSTrunc { vnode -- ok }
	if (vnode@ VNode_Type + @ VNODE_DIR ==)
		-EISDIR ok!
		return
	end

	vnode@ TruncNode ok!
end

fn (FSRead) AISIXFSRead { buf len seek vnode -- bytes }
	if (vnode@ VNode_Type + @ VNODE_DIR ==)
		-EISDIR bytes!
		return
	end

	if (seek@ vnode@ VNode_Size + @ >=)
		0 bytes!
		return
	end

	if (seek@ len@ + vnode@ VNode_Size + @ >)
		vnode@ VNode_Size + @ seek@ - len!
	end

	if (len@ 0 ==)
		0 bytes!
		return
	end

	if (vnode@ VNodeLock)
		-EINTR bytes!
		return
	end

	auto tot
	0 tot!

	while (tot@ len@ <)
		auto bbuf
		seek@ 4096 / 1 vnode@ BMap bbuf!

		if (bbuf@ iserr)
			bbuf@ bytes!
			vnode@ VNodeUnlock
			return
		end

		auto m
		len@ tot@ -
		4096 seek@ 4096 % -
		min m!

		buf@
		bbuf@ Buffer_Data + @ seek@ 4096 % +
		m@ memcpy

		if (bbuf@ brelse)
			-EINTR bytes!
			vnode@ VNodeUnlock
			return
		end

		m@ buf +=
		m@ seek +=
		m@ tot +=
	end

	vnode@ VNodeUnlock

	len@ bytes!
end

fn (FSWrite) AISIXFSWrite { buf len seek vnode -- bytes }
	if (seek@ vnode@ VNode_Size + @ >)
		0 bytes!
		return
	end

	if (len@ 0 ==)
		0 bytes!
		return
	end

	if (vnode@ VNodeLock)
		-EINTR bytes!
		return
	end

	auto tot
	0 tot!

	auto r

	while (tot@ len@ <)
		auto bbuf
		seek@ 4096 / 0 vnode@ BMap bbuf!

		if (bbuf@ iserr)
			bbuf@ bytes!
			vnode@ VNodeUnlock
			return
		end

		auto m
		len@ tot@ -
		4096 seek@ 4096 % -
		min m!

		bbuf@ Buffer_Data + @ seek@ 4096 % +
		buf@
		m@ memcpy

		bbuf@ bwrite r!

		if (r@ iserr)
			bbuf@ brelse drop
			r@ bytes!
			vnode@ VNodeUnlock
			return
		end

		if (bbuf@ brelse)
			-EINTR bytes!
			vnode@ VNodeUnlock
			return
		end

		m@ buf +=
		m@ seek +=
		m@ tot +=
	end

	if (seek@ vnode@ VNode_Size + @ >)
		seek@ vnode@ VNode_Size + !
		1 vnode@ VNode_FSData + @ AVData_Dirty + !
	end

	len@ bytes!

	vnode@ VNodeUnlock
end

fn (FSCreate) AISIXFSCreate { dirvnode name type uid permissions -- vnode }
	-EPERM vnode!
end

fn (FSRename) AISIXFSRename { srcdirvnode srcname destdirvnode destname -- ok }
	-EPERM ok!
end

fn (FSDelete) AISIXFSDelete { dirvnode name -- ok }
	-EPERM ok!
end

fn (FSMount) AISIXFSMount { mount -- root }
	auto dev
	mount@ Mount_Device + @ dev!

	if (dev@ ~~)
		-ENODEV root!
		return
	end

	auto buf

	SuperblockNo dev@ bread buf!

	if (buf@ iserr)
		buf@ root!
		return
	end

	auto sblock
	buf@ Buffer_Data + @ sblock!

	if (sblock@ Superblock_Magic + @ SuperblockMagic ~=)
		buf@ brelse drop
		-EPERM root!
		return
	end

	if (sblock@ Superblock_Version + @ SuperblockVersion ~=)
		buf@ brelse drop
		-EPERM root!
		return
	end

	auto fsdata
	AFSData_SIZEOF Malloc fsdata!

	if (fsdata@ iserr)
		buf@ brelse drop
		-ENOMEM root!
		return
	end

	sblock@ Superblock_FATStart + @ fsdata@ AFSData_FATStart + !
	sblock@ Superblock_FATSize + @ fsdata@ AFSData_FATSize + !
	sblock@ Superblock_IStart + @ fsdata@ AFSData_IStart + !
	sblock@ Superblock_ICount + @ fsdata@ AFSData_ICount + !
	sblock@ Superblock_VolSize + @ fsdata@ AFSData_VolSize + !

	if (buf@ brelse)
		fsdata@ Free
		-EINTR root!
		return
	end

	fsdata@ mount@ Mount_FSData + !

	1 mount@ VNodeNew root!

	if (root@ iserr)
		fsdata@ Free
		return
	end

	root@ AISIXFSGetNode buf!

	if (buf@ iserr)
		root@ VNodePut
		fsdata@ Free
		buf@ root!
		return
	end
end

fn (FSUnmount) AISIXFSUnmount { mount -- ok }
	mount@ Mount_FSData + @ Free

	0 ok!
end

fn (FSGetNode) AISIXFSGetNode { vnode -- ok }
	auto vnid
	vnode@ VNode_VNID + @ vnid!

	auto mount
	vnode@ VNode_Mount + @ mount!

	auto fsd
	mount@ Mount_FSData + @ fsd!

	auto vd
	AVData_SIZEOF Calloc vd!

	if (vd@ iserr)
		-ENOMEM ok!

		return
	end

	vd@ vnode@ VNode_FSData + !

	0 vd@ AVData_Dirty + !

	auto block
	auto off

	auto inode

	vnid@ INode_SIZEOF * off!

	mount@ Mount_FSData + @ AFSData_IStart + @ off@ 4096 / + block!

	auto buf
	block@ mount@ Mount_Device + @ bread buf!

	if (buf@ iserr)
		buf@ ok!
		return
	end

	buf@ Buffer_Data + @ off@ 4096 % + inode!

	if (inode@ INode_type + @ 1 ==)
		VNODE_FILE vnode@ VNode_Type + !
	end elseif (inode@ INode_type + @ 2 ==)
		VNODE_DIR vnode@ VNode_Type + !
	end else
		"afs: bad inode type\n" Panic
		(* scared !! *)
		VNODE_FILE vnode@ VNode_Type + !
		0 vnode@ VNode_Size + !
		return
	end

	inode@ INode_bytesize + @ vnode@ VNode_Size + !
	inode@ INode_startblock + @ vd@ AVData_Entry + !
	inode@ INode_iparent + @ vd@ AVData_IParent + !
	inode@ INode_permissions + @ vnode@ VNode_Permissions + !
	inode@ INode_uid + @ vnode@ VNode_UID + !

	if (buf@ brelse)
		-EINTR ok!
		return
	end

	0 ok!
end

fn (FSPutNode) AISIXFSPutNode { vnode -- ok }
	vnode@ UpdateNode ok!

	if (ok@ iserr ~~)
		vnode@ VNode_FSData + @ Free
	end
end

fn (FSRewindDir) AISIXFSRewindDir { dirent -- ok }
	0 ok!

	-1 dirent@ VDirent_Index + !
end

fn (FSReadDir) AISIXFSReadDir { dirent -- ok }
	auto dirvn
	dirent@ VDirent_DirVNode + @ dirvn!

	auto sz
	dirvn@ VNode_Size + @ sz!

	auto index
	dirent@ VDirent_Index + @ index!

	if (index@ -1 ==)
		index@ DirEnt_SIZEOF + dirent@ VDirent_Index + !

		dirvn@ VNode_FSData + @ AVData_IParent + @ dirent@ VDirent_VNID + !

		".." dirent@ VDirent_Name + !

		0 dirent@ VDirent_Cookie + !

		0 dirent@ VDirent_Index + !

		0 ok!
		return
	end

	auto buf
	0 buf!

	if (index@ 4096 %)
		index@ 4096 / 0 dirvn@ BMap buf!

		if (buf@ iserr)
			buf@ ok!
			return
		end
	end

	while (index@ sz@ <)
		if (index@ 4096 % ~~)
			if (buf@)
				if (buf@ brelse)
					-EINTR ok!
					return
				end
			end

			index@ 4096 / 1 dirvn@ BMap buf!

			if (buf@ iserr)
				buf@ ok!
				return
			end
		end

		auto ent
		buf@ Buffer_Data + @ index@ 4096 % + ent!

		if (ent@ DirEnt_INum + @)
			index@ DirEnt_SIZEOF + dirent@ VDirent_Index + !

			ent@ DirEnt_INum + @ dirent@ VDirent_VNID + !

			auto name
			60 Calloc name!

			name@ ent@ DirEnt_name + 59 strncpy

			name@ dirent@ VDirent_Name + !

			name@ dirent@ VDirent_Cookie + !

			if (buf@ brelse)
				-EINTR ok!
			end

			0 ok!
			return
		end

		DirEnt_SIZEOF index +=
	end

	index@ dirent@ VDirent_Index + !

	if (buf@)
		if (buf@ brelse)
			-EINTR ok!
			return
		end
	end

	-ENOENT ok!
end

fn (FSSync) AISIXFSSync { vnode -- ok }
	vnode@ UpdateNode ok!
end