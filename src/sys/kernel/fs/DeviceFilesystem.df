#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

table DevFSTab
	"devfs"
	pointerof DevFSMount
	pointerof DevFSGetNode
	pointerof DevFSPutNode
	pointerof DevFSSync
	pointerof DevFSRewindDir
	pointerof DevFSReadDir
	pointerof DevFSUnmount
	pointerof DevFSRead
	pointerof DevFSWrite
	pointerof DevFSCreate
	pointerof DevFSRename
	pointerof DevFSUnlink
	pointerof DevFSTrunc
	pointerof DevFSDelete
endtable
public DevFSTab

var RootDevice 0
public RootDevice

var DeviceListHead 0

var Devices 0

var DevFSMounted 0

fn DevByName { name -- dev }
	DeviceListHead@ dev!
	while (dev@)
		if (dev@ Device_Name + name@ strcmp)
			return
		end

		dev@ Device_Next + @ dev!
	end

	0 dev!
end

fn DevByIndex { index -- dev }
	auto i
	0 i!

	DeviceListHead@ dev!

	while (i@ index@ <)
		if (dev@ 0 ==)
			break
		end

		dev@ Device_Next + @ dev!

		1 i +=
	end
end

fn DeviceRegister { permissions ibuffer obuffer name driver unit -- device }
	auto rs
	InterruptDisable rs!

	if (name@ DevByName)
		ERR device!
		rs@ InterruptRestore
		return
	end

	rs@ InterruptRestore

	Device_SIZEOF Calloc device!

	if (device@ ERR ==)
		return
	end

	unit@ device@ Device_Unit + !

	driver@ device@ Device_Driver + !

	permissions@ device@ Device_Permissions + !

	ibuffer@ device@ Device_IBuffer + !

	obuffer@ device@ Device_OBuffer + !

	0 device@ Device_Offset + !

	0 device@ Device_RawDev + !

	0 device@ Device_Size + !

	device@ Device_Name + name@ DEVNAMELEN 1 - strncpy

	InterruptDisable rs!

	if (DeviceListHead@)
		DeviceListHead@ device@ Device_Next + !
		device@ DeviceListHead@ Device_Prev + !
	end

	device@ DeviceListHead!

	1 Devices +=

	rs@ InterruptRestore
end

fn DeviceRead { buf len seek dev -- bytes }
	buf@
	len@
	dev@ Device_Unit + @
	seek@
	dev@ Device_Driver + @ Driver_Read + @ DevRead bytes!
end

fn DeviceWrite { buf len seek dev -- bytes }
	buf@
	len@
	dev@ Device_Unit + @
	seek@
	dev@ Device_Driver + @ Driver_Write + @ DevWrite bytes!
end

fn DeviceSysctl { op1 op2 op3 op4 dev -- ok }
	op1@
	op2@
	op3@
	op4@
	dev@ Device_Unit + @
	dev@ Device_Driver + @ Driver_Sysctl + @ DevSysctl ok!
end

fn DeviceOpen { dev -- ok }
	dev@ Device_Unit + @
	dev@ Device_Driver + @ Driver_Open + @ DevOpen ok!
end

fn DeviceClose { dev -- ok }
	dev@ Device_Unit + @
	dev@ Device_Driver + @ Driver_Close + @ DevClose ok!
end

fn (FSRead) DevFSRead { buf len seek vnode -- bytes }
	if (vnode@ VNode_VNID + @ 0 ==)
		-EISDIR bytes!
		return
	end

	auto dev

	vnode@ VNode_FSData + @ dev!

	if (vnode@ VNode_Type + @ VNODE_CHAR ==)
		buf@
		len@
		seek@
		dev@
		DeviceRead bytes!

		return
	end

	(* it must be a block device, be cleverer *)

	if (seek@ 0 s<)
		0 bytes!
		return
	end

	if (len@ 0 s<=)
		0 bytes!
		return
	end

	auto sz
	dev@ Device_Size + @ sz!

	if (seek@ sz@ >=)
		0 bytes!
		return
	end

	if (seek@ len@ + sz@ >)
		sz@ seek@ - len!
	end

	auto tot
	0 tot!

	auto bbuf

	while (tot@ len@ <)
		seek@ 4096 / dev@ bread bbuf!

		if (bbuf@ iserr)
			bbuf@ bytes!
			return
		end

		auto m

		auto off
		seek@ 0xFFF & off!

		len@ tot@ -
		4096 off@ -
		min m!

		buf@
		bbuf@ Buffer_Data + @ off@ +
		m@
		memcpy

		bbuf@ brelse

		m@ seek +=
		m@ buf +=
		m@ tot +=
	end

	len@ bytes!
end

fn (FSWrite) DevFSWrite { buf len seek vnode -- bytes }
	if (vnode@ VNode_VNID + @ 0 ==)
		-EPERM bytes!
		return
	end

	auto dev

	vnode@ VNode_FSData + @ dev!

	if (vnode@ VNode_Type + @ VNODE_CHAR ==)
		buf@
		len@
		seek@
		dev@
		DeviceWrite bytes!

		return
	end

	(* it must be a block device, be cleverer *)

	if (seek@ 0 s<)
		0 bytes!
		return
	end

	if (len@ 0 s<=)
		0 bytes!
		return
	end

	auto sz
	dev@ Device_Size + @ sz!

	if (seek@ sz@ >=)
		-ENOSPC bytes!
		return
	end

	if (seek@ len@ + sz@ >)
		sz@ seek@ - len!
	end

	auto tot
	0 tot!

	auto bbuf
	
	auto r

	while (tot@ len@ <)
		seek@ 4096 / dev@ bread bbuf!

		if (bbuf@ iserr)
			bbuf@ bytes!
			return
		end

		auto m

		auto off
		seek@ 0xFFF & off!

		len@ tot@ -
		4096 off@ -
		min m!

		bbuf@ Buffer_Data + @ off@ +
		buf@
		m@
		memcpy

		bbuf@ bwrite

		bbuf@ brelse

		m@ seek +=
		m@ buf +=
		m@ tot +=
	end

	len@ bytes!
end

fn (FSCreate) DevFSCreate { dirvnode name type uid permissions -- vnid }
	-EPERM vnid!
end

fn (FSRename) DevFSRename { srcdirvnode srcname destdirvnode destname -- ok }
	-EPERM ok!
end

fn (FSUnlink) DevFSUnlink { dirvnode vnode name -- ok }
	-EPERM ok!
end

fn (FSTrunc) DevFSTrunc { vnode -- ok }
	-EPERM ok!
end

fn (FSDelete) DevFSDelete { vnode -- ok }
	-EPERM ok!
end

externptr MemDriver

fn (FSMount) DevFSMount { mount -- root }
	if (DevFSMounted@)
		-EPERM root!
		return
	end

	OWNER_W OWNER_R | GROUP_W | GROUP_R | 0 0 "mem" MemDriver 2 DeviceRegister drop
	OWNER_W OWNER_R | GROUP_W | GROUP_R | WORLD_W | WORLD_R | 0 0 "null" MemDriver 0 DeviceRegister drop
	OWNER_W OWNER_R | GROUP_W | GROUP_R | WORLD_W | WORLD_R | 0 0 "zero" MemDriver 1 DeviceRegister drop
	(* OWNER_W OWNER_R | GROUP_W | GROUP_R | WORLD_W | WORLD_R | 0 0 "full" MemDriver 3 DeviceRegister drop *)

	1 DevFSMounted!

	0 mount@ VNodeNew root!

	auto ok
	root@ DevFSGetNode ok!

	if (ok@ iserr)
		root@ VNodePut
		ok@ root!
		return
	end
end

fn (FSUnmount) DevFSUnmount { mount -- ok }
	"devfs: unmount\n" Printf

	0 ok!
end

fn (FSGetNode) DevFSGetNode { vnode -- ok }
	auto vnid
	vnode@ VNode_VNID + @ vnid!

	0 vnode@ VNode_Size + !

	if (vnid@ 0 ==)
		VNODE_DIR vnode@ VNode_Type + !

		OWNER_R OWNER_X | GROUP_R | GROUP_X | WORLD_R | WORLD_X | vnode@ VNode_Permissions + !

		0 vnode@ VNode_DirParentVNID + !

		return
	end

	auto dev

	vnid@ 1 - DevByIndex dev!

	if (dev@ 0 ==)
		ERR ok!
	end

	dev@ vnode@ VNode_FSData + !

	auto type
	dev@ Device_Driver + @ Driver_Type + @ type!

	0 vnode@ VNode_UID + !

	dev@ Device_Permissions + @ vnode@ VNode_Permissions + !

	dev@ Device_Size + @ vnode@ VNode_Size + !

	0 vnode@ VNode_GID + !
	0 vnode@ VNode_Timestamp + !

	if (type@ DEV_CHAR ==)
		VNODE_CHAR type!
	end elseif (type@ DEV_BLOCK ==)
		VNODE_BLOCK type!
	end else
		"DevFSGetNode\n" Panic
		VNODE_FILE type!
	end

	type@ vnode@ VNode_Type + !

	0 ok!
end

fn (FSPutNode) DevFSPutNode { vnode -- ok }
	vnode@ "devfs put: %x\n" Printf

	0 ok!
end

fn (FSRewindDir) DevFSRewindDir { dirent -- ok }
	0 ok!

	1 dirent@ VDirent_Index + !
end

fn (FSReadDir) DevFSReadDir { dirent -- ok }
	0 ok!

	auto vnode
	dirent@ VDirent_DirVNode + @ vnode!

	if (vnode@ VNode_VNID + @ 0 ~=)
		"DevFSReadDir\n" Panic
	end

	auto index
	dirent@ VDirent_Index + @ index!

	if (index@ 1 - Devices@ >=)
		-ENOENT ok!
		return
	end

	if (index@ 0 ==)
		"DevFSReadDir: index = 0\n" Panic
	end

	auto dev

	index@ 1 - DevByIndex dev!

	if (dev@ 0 ==)
		-ENOENT ok!
		return
	end

	index@ dirent@ VDirent_VNID + !

	dev@ Device_Name + dirent@ VDirent_Name + !

	index@ 1 + dirent@ VDirent_Index + !
end

fn (FSSync) DevFSSync { vnode -- ok }
	0 ok!
end

fn DevFSPrintDevs { -- }
	auto dev

	DeviceListHead@ dev!
	while (dev@)
		dev@ Device_Name + "%s\n" Printf

		dev@ Device_Next + @ dev!
	end
end