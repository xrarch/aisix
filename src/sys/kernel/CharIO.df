#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"

fn ChangeIOBufSize { iobuf newsize -- ok }
	auto rs
	InterruptDisable rs!

	iobuf@ IOBuffer_Data + @ Free

	newsize@ Malloc ok!

	if (ok@ iserr)
		rs@ InterruptRestore
		return
	end

	ok@ iobuf@ IOBuffer_Data + !

	0 iobuf@ IOBuffer_ReadP + !
	0 iobuf@ IOBuffer_WriteP + !

	newsize@ iobuf@ IOBuffer_Size + !

	rs@ InterruptRestore

	0 ok!
end

fn AllocIOBuf { size -- iobuf }
	IOBuffer_SIZEOF Calloc iobuf!

	if (iobuf@ iserr)
		-ENOMEM iobuf!
		return
	end

	auto dat

	if (size@)
		size@ Malloc dat!

		if (dat@ iserr)
			iobuf@ Free
			-ENOMEM iobuf!
			return
		end

		dat@ iobuf@ IOBuffer_Data + !
	end

	size@ iobuf@ IOBuffer_Size + !
end

fn FreeIOBuf { iobuf -- }
	auto rs
	InterruptDisable rs!

	if (iobuf@ IOBuffer_WriteQ + EventQueue_FirstWaiter + @)
		"FreeIOBuf: can't free buffer waited on by writers\n" Panic
	end

	if (iobuf@ IOBuffer_ReadQ + EventQueue_FirstWaiter + @)
		"FreeIOBuf: can't free buffer waited on by readers\n" Panic
	end

	iobuf@ IOBuffer_Data + @ Free

	iobuf@ Free

	rs@ InterruptRestore
end

(* ok is 1 if char put, 0 if buffer full, negative if error *)
fn IOBufPutc { c buf sleeponfull -- ok }
	auto rs
	InterruptDisable rs!

	auto wf
	buf@ IOBuffer_WriterF + @ wf!

	if (wf@)
		(* try to write directly *)

		c@ buf@ wf@ IOBufWriter ok!

		if (ok@)
			rs@ InterruptRestore
			return
		end

		(* wasn't able to cuz device busy or what have you, buffer *)
	end

	auto rp
	buf@ IOBuffer_ReadP + @ rp!

	auto wp
	buf@ IOBuffer_WriteP + @ wp!

	if (wp@ 0xFFFFFFFF ==)
		"wp overflow\n" Panic
	end

	auto sz
	buf@ IOBuffer_Size + @ sz!

	if (sz@ 0 ==)
		"0 size buffer with no writer\n" Panic
	end

	if (wp@ rp@ - sz@ >=)
		if (sleeponfull@)
			while (wp@ rp@ - sz@ >=)
				if (buf@ IOBuffer_WriteQ + WaitQueue)
					-EINTR ok!
					rs@ InterruptRestore
					return
				end

				(* it changed since we slept, so, update these *)

				buf@ IOBuffer_WriteP + @ wp!
				buf@ IOBuffer_ReadP + @ rp!

				(* believe it or not this can change too *)

				buf@ IOBuffer_Size + @ sz!
			end
		end else
			if (buf@ IOBuffer_Overwrite + @)
				1 rp +=
				rp@ buf@ IOBuffer_ReadP + !
			end else
				rs@ InterruptRestore
				0 ok!
				return
			end
		end
	end

	c@ wp@ sz@ % buf@ IOBuffer_Data + @ + sb

	wp@ 1 + buf@ IOBuffer_WriteP + !

	1 wp +=

	auto btty
	buf@ IOBuffer_TTY + @ btty!

	auto wake
	0 wake!

	(* only wake on this char if this isn't the input buffer to a TTY
	in order to allow in-place line editing by the line discipline layer *)
	if (btty@)
		if (c@ '\n' ==)
			1 wake!
		end elseif (c@ 4 ==)
			1 wake!
		end elseif (c@ 3 ==)
			1 wake!
		end
	end else
		1 wake!
	end

	if (wake@)
		buf@ IOBuffer_ReadQ + WakeQueue
	end

	1 ok!

	rs@ InterruptRestore
end

(* c is char if available, IOBUFEMPTY if buf empty, negative if error *)
fn IOBufGetc { buf sleeponempty -- c }
	auto rs
	InterruptDisable rs!

	auto rp
	buf@ IOBuffer_ReadP + @ rp!

	auto wp
	buf@ IOBuffer_WriteP + @ wp!

	if (rp@ 0xFFFFFFFF ==)
		"rp overflow\n" Panic
	end

	auto sz
	buf@ IOBuffer_Size + @ sz!

	if (wp@ rp@ ==)
		0 wp!
		0 rp!
		wp@ buf@ IOBuffer_WriteP + !
		rp@ buf@ IOBuffer_ReadP + !

		if (sleeponempty@)
			while (wp@ rp@ ==)
				if (buf@ IOBuffer_ReadQ + WaitQueue)
					-EINTR c!
					rs@ InterruptRestore
					return
				end

				(* it changed since we slept, so, update these *)

				buf@ IOBuffer_WriteP + @ wp!
				buf@ IOBuffer_ReadP + @ rp!

				(* believe it or not this can change too *)

				buf@ IOBuffer_Size + @ sz!
			end
		end else
			rs@ InterruptRestore
			IOBUFEMPTY c!
			return
		end
	end

	rp@ sz@ % buf@ IOBuffer_Data + @ + gb c!

	rp@ 1 + buf@ IOBuffer_ReadP + !

	1 rp +=

	buf@ IOBuffer_WriteQ + WakeQueue

	rs@ InterruptRestore
end

fn IOBufPutBack { c buf -- }
	auto rs
	InterruptDisable rs!

	auto rp
	buf@ IOBuffer_ReadP + @ rp!

	auto wp
	buf@ IOBuffer_WriteP + @ wp!

	auto sz
	buf@ IOBuffer_Size + @ sz!

	if (wp@ rp@ - sz@ >=)
		return
	end

	1 rp -=

	c@ rp@ sz@ % buf@ IOBuffer_Data + @ + sb

	rp@ buf@ IOBuffer_ReadP + !

	rs@ InterruptRestore
end

fn IOBufRubout { buf -- c }
	auto rs
	InterruptDisable rs!

	auto rp
	buf@ IOBuffer_ReadP + @ rp!

	auto wp
	buf@ IOBuffer_WriteP + @ wp!

	auto sz
	buf@ IOBuffer_Size + @ sz!

	if (wp@ rp@ ==)
		ERR c!
		return
	end

	1 wp -=

	wp@ sz@ % buf@ IOBuffer_Data + @ + gb c!

	wp@ buf@ IOBuffer_WriteP + !

	rs@ InterruptRestore
end