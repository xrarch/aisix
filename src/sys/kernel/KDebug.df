#include "<df>/dragonfruit.h"
#include "<inc>/kernel.h"
#include "<inc>/context.h"

var MonitorCommandList 0
var MonitorRunning 0
var MonitorLine 0
var MonitorLinePoint 0

struct MonitorCommand
	4 Name
	4 Callback
	4 HelpText
endstruct

externptr Panicked

fn KDebug { -- }
	auto rs
	InterruptDisable rs!

	auto op
	Panicked@ op!

	1 Panicked! (* we aren't but this makes it use strictly polled console *)

	if (MonitorCommandList@ 0 ==)
		MonitorCommandsInit
	end

	1 MonitorRunning!

	256 Calloc MonitorLine!

	while (MonitorRunning@)
		MonitorPrompt
		MonitorDoLine
	end

	MonitorLine@ Free

	op@ Panicked!

	rs@ InterruptRestore
end

const ConsoleAssumedHeight 22

var UsedLines 0
var AllLines 0

fn ResetLines { -- }
	0 UsedLines!
	0 AllLines!
end

fn WaitNext { -- result }
	1 result!

	if (AllLines@)
		return
	end

	if (UsedLines@ ConsoleAssumedHeight >)
		"\[[7m(any) for more, (a) for all, (p) for a page, (q) to quit\[[0m" Printf
		auto c
		-1 c!

		while (c@ -1 ==)
			Getc c!
		end

		if (c@ 'q' ==)
			0 result!
		end elseif (c@ 'p' ==)
			0 UsedLines!
		end elseif (c@ 'a' ==)
			1 AllLines!
		end

		"\[[2K\r" Puts
	end

	1 UsedLines +=
end

extern HeapDump { -- }

extern VFSPrintMounts { -- }

extern DevFSPrintDevs { -- }

extern PrintVNodes { -- }

extern HeapDumpBlock { ept -- }

extern PrintWeaks { -- }

fn MonitorCommandsInit { -- }
	ListCreate MonitorCommandList!

	"Dump heap."
	pointerof HeapDump
	"dumpheap"
	MonitorAddCommand

	"Display info about a certain heap block."
	pointerof MonitorCommandHeapDumpBlock
	"dumpheapblock"
	MonitorAddCommand

	"Display help."
	pointerof MonitorCommandHelp
	"help"
	MonitorAddCommand

	"Exit monitor."
	pointerof MonitorCommandExit
	"exit"
	MonitorAddCommand

	"List processes."
	pointerof ListProcesses
	"proc"
	MonitorAddCommand

	"List threads."
	pointerof ListThreads
	"threads"
	MonitorAddCommand

	"[tid] Dump the trapframe (real state) of a thread."
	pointerof DumpTF
	"tf"
	MonitorAddCommand

	"[tid] Dump the context (kernel state) of a thread."
	pointerof DumpCTX
	"ctx"
	MonitorAddCommand

	"Cause a kernel panic."
	pointerof CommandPanic
	"panic"
	MonitorAddCommand

	"Print the list of mountpoints."
	pointerof VFSPrintMounts
	"mounts"
	MonitorAddCommand

	"Print the list of devices."
	pointerof DevFSPrintDevs
	"devs"
	MonitorAddCommand

	"[tid] Probably crash the system."
	pointerof MonitorCommandKillThread
	"killthread"
	MonitorAddCommand

	"[pid] Kill process."
	pointerof MonitorCommandKill
	"kill"
	MonitorAddCommand

	"[tid] Perform stack trace from thread context."
	pointerof MonitorCommandTraceThread
	"thtrace"
	MonitorAddCommand

	"[evq ptr] List waiters on event queue."
	pointerof MonitorCommandEvQ
	"evq"
	MonitorAddCommand

	"[sp] Trace."
	pointerof MonitorCommandTrace
	"trace"
	MonitorAddCommand

	"Print cached vnodes."
	pointerof PrintVNodes
	"vnodes"
	MonitorAddCommand

	"[pid] Dump the process's page table."
	pointerof MonitorCommandPages
	"pages"
	MonitorAddCommand

	"Dump weak memory objects."
	pointerof PrintWeaks
	"weaks"
	MonitorAddCommand
end

fn CommandPanic { -- }
	"debug\n" Panic
end

fn DumpContext { con -- }
	if (con@ 0 ==)
		"no context\n" Printf
		return
	end

	auto r
	0 r!

	ResetLines

	while (r@ CONTEXTELEM <)
		if (WaitNext ~~)
			return
		end

		r@ 4 * con@ + @ dup
		[r@]ContextNames@ "%s\t\t0x%x / %d\n" Printf

		1 r +=
	end
end

fn DumpTF { -- }
	auto tidw
	MonitorParseWord tidw!

	auto tid
	tidw@ atoi tid!

	tidw@ Free

	if (tid@ THREADMAX >=)
		return
	end

	auto thread
	[tid@]Threads@ thread!

	if (thread@ 0 ==)
		return
	end

	thread@ Thread_TrapFrame + @ DumpContext
end

fn DumpCTX { -- }
	auto tidw
	MonitorParseWord tidw!

	auto tid
	tidw@ atoi tid!

	tidw@ Free

	if (tid@ THREADMAX >=)
		return
	end

	auto thread
	[tid@]Threads@ thread!

	if (thread@ 0 ==)
		return
	end

	thread@ Thread_Context + @ DumpContext
end

fn MonitorCommandExit { -- }
	0 MonitorRunning!
end

fn MonitorCommandKillThread { -- }
	auto tidw
	MonitorParseWord tidw!

	auto tid
	tidw@ atoi tid!

	tidw@ Free

	if (tid@ THREADMAX >=)
		return
	end

	auto thread
	[tid@]Threads@ thread!

	if (thread@ 0 ==)
		return
	end

	thread@ ThreadKill
end

fn MonitorCommandHeapDumpBlock { -- }
	auto et
	MonitorParseWord et!

	auto etv
	et@ atoi etv!

	et@ Free

	if (etv@ 3 & 0 == etv@ 0 ~= &&)
		etv@ HeapDumpBlock
	end
end

extern Trace { pc link -- }

fn MonitorCommandTraceThread { -- }
	auto tidw
	MonitorParseWord tidw!

	auto tid
	tidw@ atoi tid!

	tidw@ Free

	if (tid@ THREADMAX >=)
		return
	end

	auto thread
	[tid@]Threads@ thread!

	if (thread@ 0 ==)
		return
	end

	thread@ Thread_Context + @ Context_lr + @ thread@ Thread_Context + @ Context_SIZEOF + Trace
end

fn MonitorCommandTrace { -- }
	auto tidw
	MonitorParseWord tidw!

	auto tid
	tidw@ atoi tid!

	tidw@ Free

	tid@ 4 + @ tid@ Trace
end

fn MonitorCommandKill { -- }
	auto tidw
	MonitorParseWord tidw!

	auto tid
	tidw@ atoi tid!

	tidw@ Free

	if (tid@ PROCMAX >=)
		return
	end

	auto proc
	[tid@]Processes@ proc!

	if (proc@ 0 ==)
		return
	end

	-1 proc@ ProcessKill
end

fn MonitorCommandPages { -- }
	auto tidw
	MonitorParseWord tidw!

	auto tid
	tidw@ atoi tid!

	tidw@ Free

	if (tid@ PROCMAX >=)
		return
	end

	auto proc
	[tid@]Processes@ proc!

	if (proc@ 0 ==)
		return
	end

	if (proc@ Process_Pagemap + @)
		proc@ Process_Pagemap + @ VMDumpWalk
	end else
		proc@ Process_Name + "%s has no page map\n" Printf
	end
end

fn MonitorCommandHelp { -- }
	auto plist
	MonitorCommandList@ plist!

	auto n
	plist@ List_Head + @ n!

	ResetLines

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		auto ht
		pnode@ MonitorCommand_HelpText + @ ht!

		if (ht@ 0 ~=)
			if (WaitNext ~~)
				return
			end
		
			ht@ pnode@ MonitorCommand_Name + @ "\[[33m%s\[[0m\t\t%s\n" Printf
		end

		n@ ListNodeNext n!
	end
end

extern PolledGets { s max -- }

fn MonitorPrompt { -- }
	MonitorLine@ MonitorLinePoint!
	"dbg> " Printf
	MonitorLine@ 255 PolledGets
end

fn MonitorDoLine { -- }
	auto word
	MonitorParseWord word!

	if (word@ strlen 0 ~=)
		if (word@ MonitorDoCommand ~~)
			word@ "%s is not a recognized command.\n" Printf
		end
	end else
		word@ Free
	end
end

fn MonitorParseWord { -- word }
	256 Calloc word!

	if (MonitorLinePoint@)
		MonitorLinePoint@ word@ ' ' 255 strntok MonitorLinePoint!
	end
end

fnptr MonitorCmd { -- }

fn MonitorDoCommand { name -- ok }
	auto plist
	MonitorCommandList@ plist!

	auto n
	plist@ List_Head + @ n!

	while (n@ 0 ~=)
		auto pnode
		n@ ListNodeValue
		pnode!

		if (pnode@ MonitorCommand_Name + @ name@ strcmp)
			name@ Free

			pnode@ MonitorCommand_Callback + @ MonitorCmd 1 ok! return
		end

		n@ ListNodeNext n!
	end

	name@ Free

	0 ok!
end

fn MonitorAddCommand { helptext callback name -- }
	auto command
	MonitorCommand_SIZEOF Calloc command!

	name@ command@ MonitorCommand_Name + !
	callback@ command@ MonitorCommand_Callback + !
	helptext@ command@ MonitorCommand_HelpText + !

	(* command@ MonitorCommand_HelpText + command@ MonitorCommand_Callback + command@ MonitorCommand_Name + "namep 0x%x\ncbp 0x%x\nhtp 0x%x\n" Printf *)

	command@ MonitorCommandList@ ListInsert
end

fn ListProcesses { -- }
	auto i
	0 i!

	ResetLines

	while (i@ PROCMAX <)
		auto proc
		[i@]Processes@ proc!

		if (proc@)
			if (WaitNext ~~)
				return
			end

			i@ "[%d]\t" Printf
			proc@ Process_PID + @ "(%d)\t" Printf
			proc@ Process_Name + "%s\n" Printf
		end

		1 i +=
	end
end

fn DumpThread { thread -- }
	thread@ thread@ Thread_TID + @ "[%d/0x%x]\t" Printf

	auto parent
	thread@ Thread_Process + @ parent!

	parent@ Process_Name + "(%s)\t" Printf

	thread@ Thread_Name + "%s\t" Printf

	thread@ Thread_Status + @ "%d\t" Printf

	thread@ Thread_EvQ + @ "%x\n" Printf
end

fn MonitorCommandEvQ { -- }
	auto tidw
	MonitorParseWord tidw!

	auto evq
	tidw@ atoi evq!

	tidw@ Free

	auto mtx
	evq@ EventQueue_Mutex + @ mtx!

	if (mtx@)
		mtx@ Mutex_Name + @ "associated mutex: '%s'\n" Printf
		if (mtx@ Mutex_Locked + @)
			"  locked by: " Printf
			mtx@ Mutex_OwnerThread + @ DumpThread
		end
	end

	auto w
	evq@ EventQueue_FirstWaiter + @ w!

	while (w@)
		w@ DumpThread
		w@ Thread_NextWaiter + @ w!
	end
end

fn ListThreads { -- }
	auto i
	0 i!

	ResetLines

	while (i@ THREADMAX <)
		auto thread
		[i@]Threads@ thread!

		if (thread@)
			if (WaitNext ~~)
				return
			end

			thread@ DumpThread
		end

		1 i +=
	end
end

// LIST STUFF since this has been removed from dfrt

struct ListNode
	4 Next
	4 Prev
	4 Value
	4 Owner
endstruct

struct List
	4 Head
	4 Tail
	4 Length
endstruct

fn ListLength { list -- length }
	list@ List_Length + @ length!
end

fn ListHead { list -- head }
	list@ List_Head + @ head!
end

fn ListTail { list -- tail }
	list@ List_Tail + @ tail!
end

fn ListNodeOwner { node -- owner }
	node@ ListNode_Owner + @ owner!
end

fn ListNodePrev { node -- prev }
	node@ ListNode_Prev + @ prev!
end

fn ListNodeNext { node -- next }
	node@ ListNode_Next + @ next!
end

fn ListNodeValue { node -- value }
	node@ ListNode_Value + @ value!
end

fn ListDestroy { list -- }
	auto n
	list@ List_Head + @ n!

	while (n@ 0 ~=)
		n@ ListNode_Value + @ Free
		n@ ListNode_Next + @ n!
	end
end

fn ListFree { list -- }
	auto n
	list@ List_Head + @ n!

	while (n@ 0 ~=)
		auto s
		n@ ListNode_Next + @ s!
		n@ Free
		s@ n!
	end
end

fn ListAppend { node list -- }
	0 node@ ListNode_Next + !
	list@ node@ ListNode_Owner + !

	if (list@ List_Length + @ 0 ==)
		node@ list@ List_Head + !
		node@ list@ List_Tail + !
		0 node@ ListNode_Prev + !
		0 node@ ListNode_Next + !
		1 list@ List_Length + !
		return
	end

	node@ list@ List_Tail + @ ListNode_Next + !
	list@ List_Tail + @ node@ ListNode_Prev + !
	node@ list@ List_Tail + !
	1 list@ List_Length + +=
end

fn ListInsert1 { item list -- node }
	ListNode_SIZEOF Malloc node!
	item@ node@ ListNode_Value + !
	0 node@ ListNode_Next + !
	0 node@ ListNode_Prev + !
	0 node@ ListNode_Owner + !
	node@ list@ ListAppend
end

fn ListInsert { item list -- }
	item@ list@ ListInsert1 drop
end

fn ListCreate { -- list }
	List_SIZEOF Malloc list!

	0 list@ List_Head + !
	0 list@ List_Tail + !
	0 list@ List_Length + !
end

fn ListTakeHead { list -- head }
	0 list@ ListRemoveRR head!
end

fn ListRemoveRR { index list -- ref }
	if (index@ list@ List_Length + @ >) ERR ref! return end

	auto n
	list@ List_Head + @ n!

	auto i
	0 i!

	while (i@ index@ <)
		n@ ListNode_Next + @ n!
		1 i +=
	end

	n@ list@ ListDelete

	n@ ref!
end

fn ListRemove { index list -- }
	index@ list@ ListRemoveRR Free
end

fn ListDelete { node list -- }
	if (node@ list@ List_Head + @ ==)
		node@ ListNode_Next + @ list@ List_Head + !
	end
	if (node@ list@ List_Tail + @ ==)
		node@ ListNode_Prev + @ list@ List_Tail + !
	end
	if (node@ ListNode_Prev + @ 0 ~=)
		node@ ListNode_Next + @
		node@ ListNode_Prev + @ ListNode_Next + !
	end
	if (node@ ListNode_Next + @ 0 ~=)
		node@ ListNode_Prev + @
		node@ ListNode_Next + @ ListNode_Prev + !
	end

	0 node@ ListNode_Prev + !
	0 node@ ListNode_Next + !
	0 node@ ListNode_Owner + !

	list@ List_Length + dup @ 1 - swap !
end

fn ListFind { value list -- item }
	auto n
	list@ List_Head + @ n!

	0 item!

	while (n@ 0 ~=)
		if (n@ ListNode_Value + @ value@ ==)
			return
		end

		1 item +=
		n@ ListNode_Next + @ n!
	end

	-1 item!
end