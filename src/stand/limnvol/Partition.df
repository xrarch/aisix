#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"

struct VDBs
	16 Label
	128 PartitionTable
	4 Magic
endstruct

struct PTE
	8 Label
	4 Blocks
	4 Status
endstruct

extern PromptYN { ... fmt -- r }
extern IWriteBlock { block buf -- }
extern IReadBlock { block buf -- }

var VDB 0

var Fixed 0

const MaxParts 8

externptr DiskNode

struct BootRecord
	4 Magic
	16 OSLabel
	4 BootBlockStart
	4 BootBlockCount
endstruct

fn WriteBoot { -- }
	auto blockbuf
	4096 Malloc blockbuf!

	a3xMyDevice@ a3xDeviceSelectNode
		blockbuf@ 1 "readBlock" a3xDCallMethod drop drop drop drop
	a3xDeviceExit

	auto bblock
	auto bbc
	blockbuf@ BootRecord_BootBlockStart + @ bblock!
	blockbuf@ BootRecord_BootBlockCount + @ bbc!

	blockbuf@ BootRecord_OSLabel + bblock@ bbc@ + bblock@ "copying: blocks %d-%d (os: %s)\n" Printf

	if ("is this what you want?" PromptYN ~~)
		blockbuf@ Free
		return
	end

	DiskNode@ a3xDeviceSelectNode
		blockbuf@ 1 "writeBlock" a3xDCallMethod drop drop drop drop
	a3xDeviceExit

	auto i
	0 i!

	auto ok

	while (i@ bbc@ <)
		a3xMyDevice@ a3xDeviceSelectNode
			blockbuf@ bblock@ "readBlock" a3xDCallMethod drop drop drop ok!
		a3xDeviceExit

		if (ok@ ERR ==)
			"I/O error on read\n" Printf
			blockbuf@ Free
			return
		end

		DiskNode@ a3xDeviceSelectNode
			blockbuf@ bblock@ "writeBlock" a3xDCallMethod drop drop drop ok!
		a3xDeviceExit

		if (ok@ ERR ==)
			"I/O error on write\n" Printf
			blockbuf@ Free
			return
		end

		'.' Putc

		1 i +=
		1 bblock +=
	end

	blockbuf@ Free

	"successfully wrote boot blocks!\n" Printf
end

fn LoadVDBSafe { -- ok }
	1 ok!

	LoadVDB

	if (VDBValid ~~)
		VDBFix dup Fixed! ok!
	end
end

fn LoadVDB { -- }
	4096 Malloc VDB!

	0 VDB@ IReadBlock
end

fn FreeVDB { -- }
	VDB@ Free
end

fn VDBValid { -- valid }
	VDB@ VDBs_Magic + @ 0x4E4D494C == valid!
end

fn VDBLabel { -- label }
	VDB@ VDBs_Label + label!
end

fn VDBWrite { new -- }
	if (new@)
		4096 Malloc VDB!
	end

	auto nbuf
	16 Calloc nbuf!

	"disk label: " Printf

	nbuf@ 15 Gets

	auto buf
	4096 Calloc buf!

	0x4E4D494C buf@ VDBs_Magic + !

	buf@ VDBs_Label + nbuf@ strcpy

	"writing new disklabel...\n" Printf

	0 buf@ IWriteBlock

	buf@ Free
	nbuf@ Free

	FreeVDB
	LoadVDB

	"wrote disklabel successfully.\n" Printf

	if (new@)
		"\nthe system software will not correctly identify this disk until the machine is\nreset.\n" Printf

		if ("would you like to reboot now" PromptYN)
			"/cpu" a3xDeviceSelect
				"reset" a3xDCallMethod drop drop drop drop
			a3xDeviceExit

			"didn't reset!\n" Printf

			while (1) end
		end
	end
end

fn VDBFix { -- ok }
	if (VDBValid) 1 ok! return end

	auto ynr

	"this disk's volume descriptor block is corrupt or empty.\nwrite new one" PromptYN ynr!

	if (ynr@ ~~) 0 ok! return end

	0 VDBWrite

	'\n' Putc

	1 ok! return
end

fn PTEGet { ent -- label blocks status }
	VDB@ VDBs_PartitionTable + ent@ PTE_SIZEOF * + ent!

	ent@ PTE_Label + label!
	ent@ PTE_Blocks + @ blocks!
	ent@ PTE_Status + @ status!
end

fn PTESet { label blocks status ent -- }
	auto ptb
	VDB@ VDBs_PartitionTable + ptb!
	ptb@ ent@ PTE_SIZEOF * + ptb!

	ptb@ PTE_Label + label@ strcpy
	blocks@ ptb@ PTE_Blocks + !
	status@ ptb@ PTE_Status + !
end

table PTStatus
	"unused"
	"boot"
	"used"
	"??? corrupt entry ???"
endtable

fn PTInfo { -- }
	auto i
	0 i!

	while (i@ 8 <)
		auto status
		auto blocks
		auto label

		i@ PTEGet status! blocks! label!

		if (status@ 3 >)
			3 status!
		end

		if (status@ 0 ~=)
			label@ i@ "part%d: %s\n" Printf
			[status@]PTStatus@ "\tstatus: %s\n" Printf
			blocks@ dup 4096 * "\tsize: %d bytes (%d blocks)\n" Printf
		end

		1 i +=
	end
end

fn PartitionDisk { -- }
	if (LoadVDBSafe ~~)
		"disklabel invalid. cannot continue.\n" Printf
		return
	end

	if (Fixed@ ~~)
		if ("view current partition info" PromptYN)
			"\ncurrent partition info:\n" Printf
			PTInfo
			'\n' Putc
		end
	end

	auto blocksleft

	DiskNode@ a3xDeviceSelectNode
		"blocks" a3xDGetProperty 2 - blocksleft!
	a3xDeviceExit

	auto ptr
	VDB@ VDBs_PartitionTable + ptr!

	ptr@ 128 0 memset

	auto buf
	256 Calloc buf!

	"number of partitions: " Printf

	buf@ 255 Gets

	auto partnum
	buf@ atoi 8 min partnum!

	auto i
	0 i!

	while (i@ partnum@ <)
		if (blocksleft@ 0 ==)
			"no more space on disk\n" Printf
			break
		end

		partnum@ 1 - i@ "partition %d of %d\n" Printf

		blocksleft@ 4096 * "  [%d bytes left] size: " Printf
		buf@ 255 Gets

		auto sz
		buf@ atoi sz!

		if (sz@ 0xFFF & 0 ~=)
			sz@ 0xFFFFF000 & 0x1000 + 4096 / sz!
		end else
			4096 sz /=
		end

		if (sz@ blocksleft@ >)
			"not enough space!\n" Printf
		end else
			sz@ blocksleft -=

			sz@ ptr@ PTE_Blocks + !

			"  label: " Printf
			buf@ 7 Gets

			ptr@ PTE_Label + buf@ strcpy

			2 ptr@ PTE_Status + !

			PTE_SIZEOF ptr +=

			1 i +=
		end
	end

	buf@ Free

	0 VDB@ IWriteBlock

	FreeVDB

	'\n' Putc

	"partitioned successfully!\n\nthe system software will not correctly identify this disk until the machine is\nreset.\n" Printf

	if ("would you like to reboot now" PromptYN)
		"/cpu" a3xDeviceSelect
			"reset" a3xDCallMethod drop drop drop drop
		a3xDeviceExit

		"didn't reset!\n" Printf

		while (1) end
	end
end