#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"

externptr AFSErrors
extern ArgsInit { argp -- }
extern AFSMount { -- success }
extern IDiskSelect { dev -- } 
extern ArgsValue { arg -- out }
extern ArgsCheck { arg -- present }
extern AFSLoadFile { count name destptr -- size ok }
extern AFSPrintList { path -- }

externptr IDiskBD

var Mounted 0

var TotalRAM 0
public TotalRAM

var bootargs 0

var BootFile 0

var BootPath 0

const LoadBase 0x80000

var BFAlloc1 0

fn GetBootFile { -- }
	auto ab

	"loadfile" ArgsValue ab!

	if (ab@ ~~)
		"/nvram" a3xDeviceSelect
			"load-file" "getVar" a3xDCallMethod drop drop drop ab!

			if (ab@ 0 ==)
				"/sys/aisix.A3X" "load-file" "setVar" a3xDCallMethod drop drop drop drop

				"/sys/aisix.A3X" ab!
			end
		a3xDeviceExit
	end else
		ab@ BFAlloc1!
	end

	ab@ dup BootFile! BootPath!
end

var BFAlloc2 0

fn GetBootDrive { -- }
	GetBootFile

	if (BootFile@ gb '(' ~=)
		a3xMyDevice@ IDiskSelect

		AFSMount Mounted!

		return
	end

	1 BootFile +=

	auto word
	256 Calloc word!

	auto nw
	BootFile@ word@ ')' 255 strntok nw!

	if (word@ Select ~~)
		"/sys/aisix.A3X" BootFile!

		word@ Free
		return
	end

	if (nw@ 0 ==)
		"/sys/aisix.A3X" BootFile!
	end else
		nw@ 1 + BootFile!
		word@ BFAlloc2!
	end
end

(* assumes 80 columns and 34 rows *)
fn CenteredMessage { msg -- }
	"\[[c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" Printf

	auto spaces
	40 msg@ strlen 2 / - spaces!

	while (spaces@)
		' ' Putc
		1 spaces -=
	end

	msg@ "\[[33m%s\[[0m\[[7m" Printf

	while (Getc ERR ==) end

	"\[[0m\n" Printf
end

fn RunKernel { args file -- ret }
	args@ file@ DoFile ret!

	if (ret@ 1024 ==)
		a3xConsoleUserOut

		"It's now safe to turn off your computer." CenteredMessage

		0 ret!
	end
end

fn Main { args -- ret }
	0 ret!

	args@ bootargs!

	args@ ArgsInit

	'\n' Putc

	"/memory" a3xDeviceSelect
		"totalRAM" a3xDGetProperty TotalRAM!
	a3xDeviceExit

	if (TotalRAM@ LoadBase <)
		LoadBase 1024 / "fileloader: I refuse to run with less than %dKB of RAM.\n" Printf
		-1 a3xReturn
	end

	GetBootDrive

	if (Mounted@)
		if ("-p" ArgsCheck ~~)
			auto c
			0 c!

			auto vs
			0 vs!
			while (c@ -1 ~=)
				Getc c!

				if (c@ 0x02 ==) (* ctrl-B over serial *)
					1 vs!

					(* don't break, keep eating buffer *)
				end
			end

			if (vs@ ~~)
				BootPath@ "load-file = %s\n" Printf

				args@ BootFile@ RunKernel ret!
			end
		end
	end else
		"couldn't mount specified filesystem, use 'cd' to select another one.\n" Printf
	end
	
	if (ret@ 0 ~=)
		return
	end

	a3xConsoleUserOut

	Prompt ret!

	if (BFAlloc2@)
		BFAlloc2@ Free
	end

	if (BFAlloc1@)
		BFAlloc1@ Free
	end
end

fn Select { devpath -- success }
	0 success!

	auto dn
	devpath@ a3xDevTreeWalk dn!

	if (dn@ 0 ==)
		devpath@ "%s is an invalid device path.\n" Printf
		return
	end

	auto wbm

	dn@ a3xDeviceSelectNode
		"readBlock" a3xDGetMethod wbm!
	a3xDeviceExit

	if (wbm@ 0 ==)
		devpath@ "%s isn't a readable block device.\n" Printf
		return
	end

	dn@ IDiskSelect

	AFSMount Mounted!

	if (Mounted@ ~~)
		devpath@ "filesystem on %s failed to mount.\n" Printf
	end

	1 success!
end

fnptr StandaloneEntry { size api bootdev arg -- ret }

var RetValue 0

fn DoFile { arg buf -- ret }
	0 ret!

	if (Mounted@ ~~)
		"no mounted filesystem\n" Printf
		return
	end

	auto sz

	auto r
	-1 buf@ LoadBase AFSLoadFile r! sz!

	if (r@ 1 ~=)
		[r@]AFSErrors@ buf@ "failed to load %s: %s\n" Printf
	end elseif (LoadBase@ 0x45544E41 ~=)
		buf@ "%s is not a standalone program\n" Printf
	end else
		(* this bootloader uses the same protocol as a3x but just with file size added *)
		(* also the base is 0x80000 instead of 0x40000 *)


		sz@ a3xCIPtr@ IDiskBD@ arg@ LoadBase 4 + @ StandaloneEntry ret!

		"\[[0m" Printf

		ret@ "DoFile (%i)\n" Printf
	end
end

fn Prompt { -- ret }
	0 ret!

	auto Go
	1 Go!

	auto buf
	256 Calloc buf!

	auto word
	256 Calloc word!

	if (Mounted@)
		"/" AFSPrintList
	end

	"Type the name of a standalone program. OR,
 'exit' to return to the BIOS,
 'ls'   to list files,
 'go'   to load the OS with normal arguments.\n\n" Printf

	while (Go@)
		">> " Printf
		buf@ 255 Gets

		auto nw
		buf@ word@ ' ' 255 strntok nw!

		if (word@ strlen 0 >)
			if (word@ "exit" strcmp)
				0 Go!
			end elseif (word@ "ls" strcmp)
				if (Mounted@)
					if (nw@ 0 ~=)
						1 nw +=
					end
					nw@ AFSPrintList
				end else
					"no mounted filesystem\n" Printf
				end
			end elseif (word@ "cd" strcmp)
				if (nw@ 0 ~=)
					1 nw +=
				end
				nw@ Select drop
			end elseif (word@ "go" strcmp)
				if (BootFile@ 0 ==)
					GetBootFile
				end

				bootargs@ BootFile@ RunKernel ret!

				if (ret@ 1 ~=)
					break
				end
			end else
				if (nw@ 0 ~=)
					1 nw +=
				end

				nw@ word@ DoFile drop
			end
		end
	end

	word@ Free
	buf@ Free
end

fn Panic { ... fmt -- }
	"panic: " Printf

	argv argc@ fmt@ VPrintf

	-1 a3xReturn
end