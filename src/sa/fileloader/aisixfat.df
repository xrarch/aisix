#include "<df>/dragonfruit.h"

externptr TotalRAM
extern IReadBlock { block buf -- }
extern Panic { ... fmt -- }

(* extremely simple, read-only implementation of aisixfat *)

const AFSSuperblockNumber 0x0
const AFSSuperblockCache 0x47F00
const AFSFATCache 0x48F00
const AFSDirCache 0x49F00
const AFSInoCache 0x4AF00
const AFSSuperblockMagic 0xAFBBAFBB
const AFSSuperblockVersion 0x6

struct AFSSuperblock
	4 Version
	4 Magic
	4 Dirty
	4 NumReservedBlocks
	4 FATStart
	4 FATSize
	4 IStart
	4 ICount
	4 DataStart
	4 DataSize
endstruct

struct AFSDirEnt
	4 INum
	60 name
endstruct

struct AFSINode
	4 type
	4 permissions
	4 uid
	4 reserved1
	4 timestamp
	4 startblock
	4 reserved2
	4 bytesize
endstruct

table AFSErrors
	"not found"
	"ok"
	"not enough memory"
	"not a file"
endtable
public AFSErrors

fn AFSMount { -- success }
	-1 AFSICached!
	-1 AFSFatCached!

	0 success!

	AFSSuperblockNumber AFSSuperblockCache IReadBlock

	if (AFSSuperblockCache AFSSuperblock_Magic + @ AFSSuperblockMagic ~=)
		"fileloader: invalid superblock\n" Printf
		return
	end

	if (AFSSuperblockCache AFSSuperblock_Version + @ AFSSuperblockVersion ~=)
		"fileloader: bad version on superblock\n" Printf
		return
	end

	1 success!
end

var AFSICached -1
fn AFSIGet { inum -- ino }
	auto iblk
	inum@ AFSINode_SIZEOF * 4096 / iblk!

	if (AFSICached@ iblk@ ~=)
		iblk@ AFSSuperblockCache AFSSuperblock_IStart + @ +
		AFSInoCache IReadBlock

		iblk@ AFSICached!
	end

	AFSInoCache inum@ AFSINode_SIZEOF * 4096 % + ino!
end

fn AFSLoadFile { count name destptr -- size ok }
	auto entryptr
	auto ino
	name@ AFSFileByName ino! entryptr!
	if (entryptr@ 0 ==)
		0 size! 0 ok! return
	end

	auto cblock

	ino@ AFSINode_startblock + @ cblock!
	ino@ AFSINode_bytesize + @ 4096 / size!

	if (ino@ AFSINode_bytesize + @ 0xFFF &)
		1 size +=
	end

	if (count@ -1 ==)
		size@ count!
	end else
		if (count@ 0xFFF & 0 ~=)
			count@ 0xFFFFF000 & 0x1000 + count!
		end

		4096 count /=
	end

	auto nmem
	destptr@ size@ 4096 * + nmem!

	if (nmem@ TotalRAM@ >=)
		size@ 4096 * size! 2 ok! return (* not enough memory *)
	end

	auto i
	0 i!
	while (i@ count@ <)
		cblock@ destptr@ IReadBlock

		cblock@ AFSBlockStatus cblock!

		destptr@ 4096 + destptr!
		1 i +=
	end

	count@ 4096 * size! 1 ok!
end

fn AFSDirentByName { name dirsz dirblock -- dirent }
	if (name@ strlen 0 ==)
		0 dirent!
		return
	end

	auto off
	0 off!
	while (off@ dirsz@ <)
		if (off@ 4096 % 0 ==)
			dirblock@ AFSDirCache IReadBlock
			dirblock@ AFSBlockStatus dirblock!
		end

		auto ptr
		off@ 4096 % AFSDirCache + ptr!

		if (ptr@ AFSDirEnt_INum + @ 0 ~=)
			if (ptr@ AFSDirEnt_name + name@ strcmp)
				ptr@ dirent!
				return
			end
		end

		AFSDirEnt_SIZEOF off +=
	end

	0 dirent!
end

fn AFSPath { path -- dirent ino }
	auto pcomp
	256 Calloc pcomp!

	auto last
	2 last!

	1 AFSIGet ino!

	auto lastsz
	ino@ AFSINode_bytesize + @ lastsz!

	auto lastdirblock
	ino@ AFSINode_startblock + @ lastdirblock!

	-1 dirent!

	while (path@ 0 ~=)
		path@ pcomp@ '/' 255 strntok path!

		if (pcomp@ strlen 0 ==)
			pcomp@ Free
			if (dirent@ -1 ==) 0 dirent! 0 ino! end
			return
		end

		if (last@ 2 ~=)
			pcomp@ Free
			0 dirent!
			0 ino!
			return
		end

		pcomp@ lastsz@ lastdirblock@ AFSDirentByName dirent!
		if (dirent@ 0 ==)
			pcomp@ Free
			0 dirent!
			0 ino!
			return
		end

		dirent@ AFSDirEnt_INum + @ AFSIGet ino!

		ino@ AFSINode_type + @ last!
		ino@ AFSINode_bytesize + @ lastsz!
		ino@ AFSINode_startblock + @ lastdirblock!
	end

	if (dirent@ -1 ==) 0 dirent! 0 ino! end

	pcomp@ Free
end

fn AFSPrintList { path -- }
	auto dirblock
	auto dirsz

	auto dirent
	auto ino

	if (path@ strlen 0 ==)
		1 AFSIGet ino!
	end elseif (path@ "/" strcmp)
		1 AFSIGet ino!
	end else
		path@ AFSPath ino! dirent!

		if (ino@ 0 ==)
			path@ "couldn't find %s\n" Printf
			return
		end

		if (ino@ AFSINode_type + @ 2 ~=)
			path@ "%s isn't a directory\n" Printf
			return
		end
	end

	ino@ AFSINode_startblock + @ dirblock!
	ino@ AFSINode_bytesize + @ dirsz!

	path@ "%s:\n" Printf

	auto off
	0 off!
	while (off@ dirsz@ <)
		if (off@ 4096 % 0 ==)
			dirblock@ AFSDirCache IReadBlock
			dirblock@ AFSBlockStatus dirblock!
		end

		auto ptr
		off@ 4096 % AFSDirCache + ptr!

		auto inum
		ptr@ AFSDirEnt_INum + @ inum!

		if (inum@ 0 ~=)
			inum@ AFSIGet ino!

			if (ino@ AFSINode_type + @ 1 ==)
				ino@ AFSINode_bytesize + @ ptr@ AFSDirEnt_name + "\t%s\t%d\n" Printf
			end else
				ino@ AFSINode_bytesize + @ ptr@ AFSDirEnt_name + "\t%s/\t%d\n" Printf
			end
		end

		AFSDirEnt_SIZEOF off +=
	end

	'\n' Putc
end

fn AFSFileSize { path -- size }
	auto dirent
	auto ino
	path@ AFSFileByName ino! dirent!
	if (dirent@ 0 ==)
		return
	end

	ino@ AFSINode_bytesize + @ size!
end

fn AFSFileByName { path -- dirent ino }
	if (path@ strlen 0 ==)
		0 dirent!
		return
	end

	path@ AFSPath ino! dirent!
	if (dirent@ 0 ==)
		return
	end

	if (ino@ AFSINode_type + @ 1 ~=)
		0 dirent!
		return
	end
end

var AFSFatCached -1
fn AFSReadFATBlock { fatblock -- }
	if (fatblock@ AFSFatCached@ ~=) (* only read in new block if not already in cache *)
		fatblock@ AFSSuperblockCache AFSSuperblock_FATStart + @ +
		AFSFATCache IReadBlock
		fatblock@ AFSFatCached!
	end
end

fn AFSBlockStatus { bnum -- status }
	auto fatblock
	auto fatoff

	bnum@ 4096 / fatblock!
	bnum@ 4096 % fatoff!

	fatblock@ AFSReadFATBlock
	fatoff@ 4 * AFSFATCache + @ status!
end