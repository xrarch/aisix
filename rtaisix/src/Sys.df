#include "<df>/dragonfruit.h"
#include "<inc>/aisix.h"

const SYSOPEN    1
const SYSWRITE   2
const SYSCLOSE   3
const SYSREAD    4
const SYSNEWPROC 5
const SYSEXIT    6
const SYSDUP     7
const SYSIGN     8
const SYSWAIT    9
const SYSSETUID  10
const SYSGETPID  11
const SYSGETUID  12
const SYSGETEUID 13
const SYSREADDIR 14
const SYSPSTAT   15
const SYSFSTAT   16
const SYSCHDIR   17
const SYSUNLINK  18
const SYSUNAME   19
const SYSMKDIR   20
const SYSUMASK   21
const SYSMOUNT   22
const SYSUMOUNT  23
const SYSCHOWN   24
const SYSCHMOD   25
const SYSSYNC    26
const SYSSEEK    27
const SYSGETCWD  28
const SYSHALT    29
const SYSMEMINFO 30
const SYSALLOCSEGMENT 31
const SYSMAPSEGMENT   32
const SYSCLOSESEGMENT 33
const SYSUNMAPSEGMENT 34
const SYSAISIXGETMODE 35
const SYSTIME         36
const SYSFCHOWN       37
const SYSFCHMOD       38
const SYSPROCINFO     39
const SYSNEXTPROCINFO 40
const SYSGETDEVNAME   41
const SYSKILL    42

asm "

_open:
	mov v0, a3
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSOPEN
	sys
	ret

_write:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSWRITE
	sys
	ret

_close:
	mov a1, a0
	li a0, SYSCLOSE
	sys
	ret

_read:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSREAD
	sys
	ret

_newprocess:
	lio.l t2, sp, 20
	lio.l t1, sp, 16
	lio.l t0, sp, 12
	lio.l v1, sp, 8
	mov v0, a3
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSNEWPROC
	sys
	ret

_exit:
	mov a1, a0
	li a0, SYSEXIT
	sys
	ret

_dup:
	mov a1, a0
	li a0, SYSDUP
	sys
	ret

_ttyign:
	mov a1, a0
	li a0, SYSIGN
	sys
	ret

_wait:
	li a0, SYSWAIT
	sys
	ret

_setuid:
	mov a1, a0
	li a0, SYSSETUID
	sys
	ret

_getpid:
	li a0, SYSGETPID
	sys
	ret

_getuid:
	li a0, SYSGETUID
	sys
	ret

_geteuid:
	li a0, SYSGETEUID
	sys
	ret

_readdir:
	mov a2, a1
	mov a1, a0
	li a0, SYSREADDIR
	sys
	ret

_pstat:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSPSTAT
	sys
	ret

_fstat:
	mov a2, a1
	mov a1, a0
	li a0, SYSFSTAT
	sys
	ret

_chdir:
	mov a2, a1
	mov a1, a0
	li a0, SYSCHDIR
	sys
	ret

_uname:
	mov a1, a0
	li a0, SYSUNAME
	sys
	ret

_unlink:
	mov a2, a1
	mov a1, a0
	li a0, SYSUNLINK
	sys
	ret

_mkdir:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSMKDIR
	sys
	ret

_umask:
	mov a1, a0
	li a0, SYSUMASK
	sys
	ret

_mount:
	lio.l t1, sp, 16
	lio.l t0, sp, 12
	lio.l v1, sp, 8
	mov v0, a3
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSMOUNT
	sys
	ret

_umount:
	mov a2, a1
	mov a1, a0
	li a0, SYSUMOUNT
	sys
	ret

_chown:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSCHOWN
	sys
	ret

_chmod:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSCHMOD
	sys
	ret

_sync:
	li a0, SYSSYNC
	sys
	ret

_seek:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSSEEK
	sys
	ret

_getcwd:
	mov a1, a0
	li a0, SYSGETCWD
	sys
	ret

_halt:
	mov a1, a0
	li a0, SYSHALT
	sys
	ret

_meminfo:
	li a0, SYSMEMINFO
	sys
	sio.l sp, 8, t0
	sio.l sp, 12, t1
	ret

_allocsegment:
	mov a2, a1
	mov a1, a0
	li a0, SYSALLOCSEGMENT
	sys
	ret

_mapsegment:
	mov a3, a2
	mov a2, a1
	mov a1, a0
	li a0, SYSMAPSEGMENT
	sys
	ret

_closesegment:
	mov a1, a0
	li a0, SYSCLOSESEGMENT
	sys
	ret

_unmapsegment:
	mov a1, a0
	li a0, SYSUNMAPSEGMENT
	sys
	ret

_getmode:
	li a0, SYSAISIXGETMODE
	sys
	ret

_time:
	li a0, SYSTIME
	sys
	ret

_fchown:
	mov a2, a1
	mov a1, a0
	li a0, SYSFCHOWN
	sys
	ret

_fchmod:
	mov a2, a1
	mov a1, a0
	li a0, SYSFCHMOD
	sys
	ret

_procinfo:
	mov a2, a1
	mov a1, a0
	li a0, SYSPROCINFO
	sys
	ret

_nextprocinfo:
	mov a2, a1
	mov a1, a0
	li a0, SYSNEXTPROCINFO
	sys
	ret

_getdevname:
	mov a2, a1
	mov a1, a0
	li a0, SYSGETDEVNAME
	sys
	ret

_kill:
	mov a1, a0
	li a0, SYSKILL
	sys
	ret

; fd c --
_rFPutc:
.global _rFPutc
	subi.i sp, 4
	s.l sp, zero, a0
	mov a3, sp
	li a2, 1
	;mov a1, a1 ;already in a1 due to ABI
	li a0, SYSWRITE
	sys
	addi.i sp, 4
	ret

"

extern _open { pbits mode pathlen path -- fd }

fn Open { path mode -- fd }
	0 mode@ path@ strlen path@ _open fd!
end

fn Create { path mode pbits -- fd }
	pbits@ mode@ O_CREATE | path@ strlen path@ _open fd!
end

extern _write { buf len fd -- bytes }

fn Write { buf len fd -- bytes }
	buf@ len@ fd@ _write bytes!
end

extern _read { buf len fd -- bytes }

fn Read { buf len fd -- bytes }
	IOFlush

	buf@ len@ fd@ _read bytes!
end

extern _close { fd -- ok }

fn Close { fd -- ok }
	fd@ _close ok!
end

extern _newprocess { pathlen path fd0 fd1 fd2 mode udatavec udatac -- pid }

fn NewProcess { path fd0 fd1 fd2 mode udatavec udatac -- pid }
	path@ strlen path@ fd0@ fd1@ fd2@ mode@ udatavec@ udatac@ _newprocess pid!
end

fn ASpawn { fd0 fd1 fd2 argcn argvt path -- pid }
	auto uvec
	argcn@ 2 + UDVec_SIZEOF * Malloc uvec!

	if (uvec@ ERR ==)
		-ENOMEM pid!
		return
	end

	(* some day soon [0]uvec will be envp, but for now make it zero *)
	0 uvec@ UDVec_Size + !
	0 uvec@ UDVec_Ptr + !

	auto i
	0 i!

	auto p
	uvec@ p!
	
	UDVec_SIZEOF p +=

	(* [1]uvec is the path we are calling the process by *)
	path@ strlen 1 + p@ UDVec_Size + !
	path@ p@ UDVec_Ptr + !

	UDVec_SIZEOF p +=

	while (i@ argcn@ <)
		argvt@@ strlen 1 + p@ UDVec_Size + !
		argvt@@ p@ UDVec_Ptr + !

		4 argvt +=
		UDVec_SIZEOF p +=
		1 i +=
	end

	if (fd0@ -2 ==)
		path@ 0 0 0 NP_INHERIT uvec@ argcn@ 2 + NewProcess pid!
	end else
		path@ fd0@ fd1@ fd2@ NP_SPECIFY uvec@ argcn@ 2 + NewProcess pid!
	end

	uvec@ Free
end

fn VSpawn { argcn argvt path -- pid }
	-2 0 0 argcn@ argvt@ path@ ASpawn pid!
end

fn SSpawn { ... fd0 fd1 fd2 path -- pid }
	fd0@ fd1@ fd2@ argc@ argv path@ ASpawn pid!
end

fn Spawn { ... path -- pid }
	argc@ argv path@ VSpawn pid!
end

extern _exit { ret -- }

fn Exit { ret -- }
	IOFlush

	ret@ _exit
end

extern _dup { fd1 -- fd2 }

fn FDup { fd1 -- fd2 }
	fd1@ _dup fd2!
end

extern _ttyign { ign -- ok }

fn SetTTYIgnore { ign -- ok }
	ign@ _ttyign ok!
end

extern _wait { -- pid ret }

fn Wait { -- pid ret }
	_wait ret! pid!
end

extern _setuid { uid -- ok }

fn SetUID { uid -- ok }
	uid@ _setuid ok!
end

extern _getpid { -- pid }

fn GetPID { -- pid }
	_getpid pid!
end

extern _getuid { -- uid }

fn GetUID { -- uid }
	_getuid uid!
end

extern _geteuid { -- euid }

fn GetEUID { -- euid }
	_geteuid euid!
end

extern _readdir { dirent fd -- ok }

fn ReadDir { dirent fd -- ok }
	dirent@ fd@ _readdir ok!
end

extern _pstat { pathlen stat path -- ok }

fn PStat { stat path -- ok }
	path@ strlen stat@ path@ _pstat ok!
end

extern _fstat { stat fd -- ok }

fn FStat { stat fd -- ok }
	stat@ fd@ _fstat ok!
end

extern _chdir { pathlen path -- ok }

fn Chdir { path -- ok }
	path@ strlen path@ _chdir ok!
end

extern _uname { uname -- ok }

fn UName { uname -- ok }
	uname@ _uname ok!
end

extern _unlink { pathlen path -- ok }

fn Unlink { path -- ok }
	path@ strlen path@ _unlink ok!
end

extern _mkdir { mode pathlen path -- ok }

fn Mkdir { path mode -- ok }
	mode@ path@ strlen path@ _mkdir ok!
end

extern _umask { umask -- old }

fn UMask { umask -- old }
	umask@ _umask old!
end

extern _mount { flags pdevlen pdev dirlen dir typelen type -- ok }

fn Mount { flags dev dir type -- ok }
	flags@ dev@ strlen dev@ dir@ strlen dir@ type@ strlen type@ _mount ok!
end

extern _umount { pathlen path -- ok }

fn UMount { path -- ok }
	path@ strlen path@ _umount ok!
end

extern _chown { owner pathlen path -- ok }

fn Chown { path owner -- ok }
	owner@ path@ strlen path@ _chown ok!
end

extern _fchown { owner fd -- ok }

fn FChown { fd owner -- ok }
	owner@ fd@ _fchown ok!
end

extern _chmod { mode pathlen path -- ok }

fn Chmod { path mode -- ok }
	mode@ path@ strlen path@ _chmod ok!
end

extern _fchmod { mode fd -- ok }

fn FChmod { fd mode -- ok }
	mode@ fd@ _fchmod ok!
end

extern _sync { -- ok }

fn Sync { -- ok }
	_sync ok!
end

extern _seek { fd offset whence -- ok }

fn Seek { fd offset whence -- ok }
	fd@ offset@ whence@ _seek ok!
end

extern _getcwd { buf -- ok }

fn GetCWD { buf -- ok }
	buf@ _getcwd ok!
end

extern _halt { haltmode -- ok }

fn Halt { haltmode -- ok }
	haltmode@ _halt ok!
end

extern _meminfo { -- memtotal memused heaptotal heapused }

fn MemInfo { -- memtotal memused heaptotal heapused }
	_meminfo heapused! heaptotal! memused! memtotal!
end

extern _allocsegment { flags bytes -- sd }

fn AllocSegment { flags bytes -- sd }
	flags@ bytes@ _allocsegment sd!
end

extern _mapsegment { sd va must -- ok ava }

fn MapSegment { sd va must -- ok ava }
	sd@ va@ must@ _mapsegment ava! ok!
end

extern _closesegment { sd -- ok }

fn CloseSegment { sd -- ok  }
	sd@ _closesegment ok!
end

extern _unmapsegment { sd -- ok }

fn UnmapSegment { sd -- ok }
	sd@ _unmapsegment ok!
end

extern _getmode { -- mode }

fn AISIXGetMode { -- mode }
	_getmode mode!
end

extern _time { -- sec ms }

fn Time { -- sec ms }
	_time ms! sec!
end

extern _procinfo { stat pid -- ok }

fn ProcessInfo { stat pid -- ok }
	stat@ pid@ _procinfo ok!
end

extern _nextprocinfo { stat oldindex -- newindex }

fn NextProcessInfo { stat oldindex -- newindex }
	stat@ oldindex@ _nextprocinfo newindex!
end

extern _getdevname { buf fd -- ok }

fn GetDeviceName { buf fd -- ok }
	buf@ fd@ _getdevname ok!
end

extern _kill { pid -- ok }

fn Kill { pid -- ok }
	pid@ _kill ok!
end